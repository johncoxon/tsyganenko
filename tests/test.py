 """tsyganenko module

This module contains the following object:

Functions
--------------------------------------------------
generate_test       Generate new unit tests easily
--------------------------------------------------

Classes
--------------------------------------------------------------
tsygTraceTestCase   Tests whether NH/SH traces are as expected
--------------------------------------------------------------
"""
import unittest
import datetime as dt
import numpy as np
from tsyganenko import tsygTrace

def generate_test(lat, lon, rho, start, end):
    """Generate a string to paste into a new function in tsygTraceTestCase"""
    dates = np.array([dt.datetime(i,1,1) for i in np.arange(start,end)])

    trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                      lon = np.ones_like(dates, dtype = float) * lon,
                      rho = np.ones_like(dates, dtype = float) * rho,
                      coords = 'geo', datetime = dates)
    
    if lat < 0:
        lat_string = "{}S".format(-1 * lat)
    else:
        lat_string = "{}N".format(lat)

    print("    def test_{}_{}_{}(self):".format(lat_string, lon, rho))
    print("        \"\"\"Test for latitude = {}, longitude = {}, rho = {}\"\"\"".format(lat, lon, rho))
    print("        lat = {}".format(lat))
    print("        lon = {}".format(lon))
    print("        rho = {}\n".format(rho))
    print("        expected = {}")
    print("        expected['latNH'] = np.array([{}])".format(",".join(trace.latNH.astype('str'))))
    print("        expected['lonNH'] = np.array([{}])".format(",".join(trace.lonNH.astype('str'))))
    print("        expected['rhoNH'] = np.array([{}])".format(",".join(trace.rhoNH.astype('str'))))
    print("        expected['latSH'] = np.array([{}])".format(",".join(trace.latSH.astype('str'))))
    print("        expected['lonSH'] = np.array([{}])".format(",".join(trace.lonSH.astype('str'))))
    print("        expected['rhoSH'] = np.array([{}])".format(",".join(trace.rhoSH.astype('str'))))
    print("")
    print("        years = np.arange({},{})".format(start,end))
    print("        dates = np.array([dt.datetime(i,1,1) for i in years])")
    print("")
    print("        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,")
    print("                          lon = np.ones_like(dates, dtype = float) * lon,")
    print("                          rho = np.ones_like(dates, dtype = float) * rho,")
    print("                          coords = 'geo', datetime = dates)")
    print("")
    print("        for cnt, year in enumerate(years):")
    print("            for coord in expected:")
    print("                with self.subTest(coord = coord, year = year):")
    print("                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])")
    print("")
    print("# --------------------------------------------------------------------------------------------------")
    print("")

# --------------------------------------------------------------------------------------------------

class Trace1965to2005(unittest.TestCase):
    def test_90S_0_30000(self):
        """Test for latitude = -90, longitude = 0, rho = 30000"""
        lat = -90
        lon = 0
        rho = 30000

        expected = {}
        expected['latNH'] = np.array([-6.744800649487416,-6.730306988068648,-6.716284609702612,-6.702590080416741,-6.756207065401341,-6.741665592658379,-6.732485818413892,-6.723674874384571,-6.782387180490005,-6.772742953381936,-6.763570009326614,-6.757060839047597,-6.818191032119202,-6.810951031598989,-6.804045710348106,-6.797638992906641,-6.864390431665171,-6.862648733426823,-6.861187072944432,-6.860292318163161,-6.927460398461065,-6.92511764357576,-6.923253001932338,-6.921893794287513,-6.988672553802729,-6.986562025349187,-6.987600214103026,-6.989034553828731,-7.058845917335432,-7.059563087198285,-7.06075154011387,-7.066359125422451,-7.1403915458362235,-7.145329772606132,-7.150609508834549,-7.156456150764086,-7.22965528809911,-7.233452873277642,-7.23769442075222,-7.242420911657874,-7.3159615584513915,-7.3281192951740195,-7.340816616841067,-7.353971561182519,-7.436289001059507,-7.448781417051464,-7.464545493655848,-7.480869645772188,-7.566247010397348,-7.581908634164179,-7.5981508240104745])
        expected['lonNH'] = np.array([350.3510837397057,350.3288719645248,350.3067148308573,350.28447573491974,350.37703845855174,350.3548813248842,350.3423137768114,350.329882832522,350.43236299082884,350.4199047257827,350.4075284230067,350.3975563468185,350.50271393928,350.49287846687514,350.48304299447034,350.47315288055216,350.59126051168005,350.5943204364282,350.5972710781496,350.60035832365446,350.7186572000791,350.7172365207317,350.71581584138437,350.7144498035504,350.8282953966361,350.82703864182884,350.8279402267993,350.8287598494997,350.94522823522675,350.9461844617106,350.9471133674377,350.9554461982251,351.07931850901247,351.0877333020699,351.0959022083172,351.104207718348,351.2237360288232,351.227424330975,351.2310853123701,351.2348009352786,351.3544385287806,351.36719732215016,351.3801473608165,351.3928788334294,351.522024050256,351.5348648058956,351.5524047316842,351.5698080536894,351.703652440665,351.72116504569686,351.7386230092154])
        expected['rhoNH'] = np.array([292487.15989990236,292480.06307373045,292473.2822021484,292466.9145019531,292520.0434814453,292513.0438720703,292511.29396972654,292510.2974975586,292569.06505126954,292566.9748901367,292565.37081298826,292564.8604248047,292624.673059082,292623.43354492186,292622.8016357422,292622.4856811523,292690.14857177733,292696.9537475586,292703.8561401367,292711.5119628906,292779.6852416992,292782.7961791992,292786.49041748047,292790.52491455077,292855.14978027344,292858.69819335936,292862.7569946289,292867.4963134765,292933.0204345703,292937.0306274414,292941.5512084961,292950.6409790039,293021.0745483398,293029.7268432617,293038.8409179687,293048.7327270508,293116.12827148434,293121.66962890624,293127.50263671874,293134.1619873047,293201.970703125,293211.9597290039,293222.58066406247,293233.7119873047,293306.79471435543,293317.6100830078,293332.1196899414,293347.40703125,293424.52425537107,293439.3741210937,293455.0746337891])
        expected['latSH'] = np.array([-78.96699553695964,-78.94655961096296,-78.92606904345291,-78.90552383442952,-78.88586654999821,-78.8652120579481,-78.84998073609898,-78.83470843311483,-78.82032405472279,-78.80494246871191,-78.78951990156602,-78.77494427787721,-78.76129755991553,-78.74663997395669,-78.73194140686283,-78.7171881982556,-78.70512608418136,-78.69208042286661,-78.67899378041687,-78.66585249645377,-78.65366743897448,-78.64256155138403,-78.6314283430369,-78.62028147431144,-78.6100908320698,-78.5989029822093,-78.58878064185936,-78.57864464113106,-78.56947852726489,-78.55930154540158,-78.54911090315991,-78.53948033643019,-78.5308469773193,-78.52118908983292,-78.51151754196817,-78.50181867334675,-78.49710584281945,-78.49134116315994,-78.48557648350047,-78.47978448308427,-78.47498969028695,-78.47459353931507,-78.47418372796488,-78.47374659585799,-78.47433399212662,-78.47386953926306,-78.47363731283127,-78.47336410526447,-78.47412908645151,-78.47384221850638,-78.47354169018288])
        expected['lonSH'] = np.array([136.90634712010825,136.89589693067813,136.88547406200468,136.87502387257456,136.8688903626999,136.85841285251308,136.88405338265733,136.90959829015318,136.93969210363625,136.96534629415882,136.99089120165465,136.99660123980078,137.00670991977242,137.0124062975402,137.0180343734163,137.02374441156243,137.04442622436923,137.06064109345883,137.07689694368347,137.09313913352975,137.11379362557986,137.10207302096413,137.0904207182401,137.0787820758944,137.07140547159077,137.05968486697503,137.0382380729812,137.01669565633898,136.9996065230356,136.97811874790673,136.95675391618295,136.9179721020756,136.8835616090371,136.8447934553081,136.8060936034708,136.7672161667151,136.70973329466025,136.64775615813156,136.58573804046785,136.52366528129076,136.46601848469587,136.39874112137124,136.33131349388486,136.26379024375012,136.2005426920358,136.1329648003877,136.06678026733027,136.00058207389452,135.93868689963585,135.87227014014664,135.80578507876575])
        expected['rhoSH'] = np.array([6371.198860740661,6371.198860740661,6371.198860740661,6371.198860740661,6371.198860740661,6371.198860740661,6371.1984809875485,6371.1984809875485,6371.199240493775,6371.198860740661,6371.1984809875485,6371.1984809875485,6371.199240493775,6371.199240493775,6371.198860740661,6371.198860740661,6371.1984809875485,6371.198860740661,6371.199620246887,6371.198860740661,6371.198860740661,6371.199240493775,6371.199240493775,6371.199240493775,6371.199240493775,6371.199240493775,6371.199620246887,6371.199240493775,6371.198860740661,6371.199240493775,6371.199240493775,6371.199620246887,6371.199240493775,6371.198860740661,6371.199240493775,6371.198860740661,6371.198860740661,6371.198860740661,6371.199240493775,6371.198860740661,6371.199240493775,6371.198860740661,6371.1984809875485,6371.198101234436,6371.198860740661,6371.1984809875485,6371.198860740661,6371.198860740661,6371.198101234436,6371.1984809875485,6371.198860740661])

        years = np.arange(1965,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

    def test_90S_0_30000(self):
        """Test for latitude = -90, longitude = 0, rho = 30000"""
        lat = -90
        lon = 0
        rho = 30000

        expected = {}
        expected['latNH'] = np.array([-6.744800649487416,-6.730306988068648,-6.716284609702612,-6.702590080416741,-6.756207065401341,-6.741665592658379,-6.732485818413892,-6.723674874384571,-6.782387180490005,-6.772742953381936,-6.763570009326614,-6.757060839047597,-6.818191032119202,-6.810951031598989,-6.804045710348106,-6.797638992906641,-6.864390431665171,-6.862648733426823,-6.861187072944432,-6.860292318163161,-6.927460398461065,-6.92511764357576,-6.923253001932338,-6.921893794287513,-6.988672553802729,-6.986562025349187,-6.987600214103026,-6.989034553828731,-7.058845917335432,-7.059563087198285,-7.06075154011387,-7.066359125422451,-7.1403915458362235,-7.145329772606132,-7.150609508834549,-7.156456150764086,-7.22965528809911,-7.233452873277642,-7.23769442075222,-7.242420911657874,-7.3159615584513915])
        expected['lonNH'] = np.array([350.3510837397057,350.3288719645248,350.3067148308573,350.28447573491974,350.37703845855174,350.3548813248842,350.3423137768114,350.329882832522,350.43236299082884,350.4199047257827,350.4075284230067,350.3975563468185,350.50271393928,350.49287846687514,350.48304299447034,350.47315288055216,350.59126051168005,350.5943204364282,350.5972710781496,350.60035832365446,350.7186572000791,350.7172365207317,350.71581584138437,350.7144498035504,350.8282953966361,350.82703864182884,350.8279402267993,350.8287598494997,350.94522823522675,350.9461844617106,350.9471133674377,350.9554461982251,351.07931850901247,351.0877333020699,351.0959022083172,351.104207718348,351.2237360288232,351.227424330975,351.2310853123701,351.2348009352786,351.3544385287806])
        expected['rhoNH'] = np.array([292487.15989990236,292480.06307373045,292473.2822021484,292466.9145019531,292520.0434814453,292513.0438720703,292511.29396972654,292510.2974975586,292569.06505126954,292566.9748901367,292565.37081298826,292564.8604248047,292624.673059082,292623.43354492186,292622.8016357422,292622.4856811523,292690.14857177733,292696.9537475586,292703.8561401367,292711.5119628906,292779.6852416992,292782.7961791992,292786.49041748047,292790.52491455077,292855.14978027344,292858.69819335936,292862.7569946289,292867.4963134765,292933.0204345703,292937.0306274414,292941.5512084961,292950.6409790039,293021.0745483398,293029.7268432617,293038.8409179687,293048.7327270508,293116.12827148434,293121.66962890624,293127.50263671874,293134.1619873047,293201.970703125])
        expected['latSH'] = np.array([-78.96699553695964,-78.94655961096296,-78.92606904345291,-78.90552383442952,-78.88586654999821,-78.8652120579481,-78.84998073609898,-78.83470843311483,-78.82032405472279,-78.80494246871191,-78.78951990156602,-78.77494427787721,-78.76129755991553,-78.74663997395669,-78.73194140686283,-78.7171881982556,-78.70512608418136,-78.69208042286661,-78.67899378041687,-78.66585249645377,-78.65366743897448,-78.64256155138403,-78.6314283430369,-78.62028147431144,-78.6100908320698,-78.5989029822093,-78.58878064185936,-78.57864464113106,-78.56947852726489,-78.55930154540158,-78.54911090315991,-78.53948033643019,-78.5308469773193,-78.52118908983292,-78.51151754196817,-78.50181867334675,-78.49710584281945,-78.49134116315994,-78.48557648350047,-78.47978448308427,-78.47498969028695])
        expected['lonSH'] = np.array([136.90634712010825,136.89589693067813,136.88547406200468,136.87502387257456,136.8688903626999,136.85841285251308,136.88405338265733,136.90959829015318,136.93969210363625,136.96534629415882,136.99089120165465,136.99660123980078,137.00670991977242,137.0124062975402,137.0180343734163,137.02374441156243,137.04442622436923,137.06064109345883,137.07689694368347,137.09313913352975,137.11379362557986,137.10207302096413,137.0904207182401,137.0787820758944,137.07140547159077,137.05968486697503,137.0382380729812,137.01669565633898,136.9996065230356,136.97811874790673,136.95675391618295,136.9179721020756,136.8835616090371,136.8447934553081,136.8060936034708,136.7672161667151,136.70973329466025,136.64775615813156,136.58573804046785,136.52366528129076,136.46601848469587])
        expected['rhoSH'] = np.array([6371.198860740661,6371.198860740661,6371.198860740661,6371.198860740661,6371.198860740661,6371.198860740661,6371.1984809875485,6371.1984809875485,6371.199240493775,6371.198860740661,6371.1984809875485,6371.1984809875485,6371.199240493775,6371.199240493775,6371.198860740661,6371.198860740661,6371.1984809875485,6371.198860740661,6371.199620246887,6371.198860740661,6371.198860740661,6371.199240493775,6371.199240493775,6371.199240493775,6371.199240493775,6371.199240493775,6371.199620246887,6371.199240493775,6371.198860740661,6371.199240493775,6371.199240493775,6371.199620246887,6371.199240493775,6371.198860740661,6371.199240493775,6371.198860740661,6371.198860740661,6371.198860740661,6371.199240493775,6371.198860740661,6371.199240493775])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_60S_0_30000(self):
        """Test for latitude = -60, longitude = 0, rho = 30000"""
        lat = -60
        lon = 0
        rho = 30000

        expected = {}
        expected['latNH'] = np.array([5.8205139514774515,5.816771007812278,5.8125841018510584,5.808035195863837,5.765401155064623,5.761617230264434,5.75369421082722,5.745381870607304,5.698656546495258,5.6911296780298954,5.683247639727696,5.673753676781388,5.6255666921869505,5.616851370806003,5.607801370155741,5.598437180803657,5.546876082759226,5.535237440413525,5.523243628230986,5.510942457535791,5.459354038734688,5.449935207869231,5.440099735464415,5.430018376249478,5.380274108524276,5.370998711631401,5.360090899526895,5.34889621947724,5.297751762972183,5.287342554677082,5.276639648247681,5.264229194525754,5.211520624700768,5.2000322465168125,5.18811356641514,5.176071942908408,5.123998580676229,5.113493749732754,5.102708881033294,5.091671295334564,5.039488650075654])
        expected['lonNH'] = np.array([354.8852091975703,354.87425357414156,354.8632706299562,354.8523150065275,354.90796738788475,354.8970390852127,354.8912470847966,354.8854550843804,354.94640769253357,354.9406703336308,354.93496029548464,354.9313266348462,354.9945741865605,354.9909951674354,354.9873888275537,354.98383712918525,355.0535870209894,355.05645570044084,355.0593517006489,355.06219305934366,355.13202491341787,355.1318609888778,355.131669743581,355.1314238567709,355.198359710637,355.19811382382693,355.19860559744717,355.19904272955404,355.2667708853639,355.2672626589841,355.26767247033433,355.27215307442987,355.34395202298504,355.3483233440538,355.3527219858793,355.35692938240805,355.4265699911855,355.42867368944985,355.43066810468747,355.4326351991685,355.5023850909726])
        expected['rhoNH'] = np.array([320479.4727416992,320477.3582763672,320475.559765625,320474.07720947266,320498.1383666992,320496.0482055664,320497.38493652345,320499.37788085936,320526.96314697264,320528.12974853517,320529.3935668945,320532.28576660156,320561.54802246095,320563.54096679686,320566.0442993164,320568.7906738281,320602.91376953124,320609.5731201172,320617.3990722656,320625.5652832031,320659.7369873047,320665.15682373045,320670.69818115234,320676.40966796875,320708.5155151367,320713.57078857423,320718.91771240236,320724.5562866211,320756.7350463867,320761.6444946289,320766.7483764648,320774.7201538086,320809.7182006836,320816.79072265624,320824.32502441405,320831.7864135742,320864.9616455078,320869.7981811523,320875.04788818356,320880.85659179685,320914.05612792965])
        expected['latSH'] = np.array([-79.90934307636795,-79.90413847222041,-79.89886556618114,-79.89356533938522,-79.88857930129112,-79.8831834518468,-79.88692639551198,-79.89066933917715,-79.89480843381418,-79.89855137747932,-79.90232164190118,-79.90493077416411,-79.9079223970206,-79.91054518966189,-79.91316798230315,-79.91579077494444,-79.92018941676994,-79.9242055680019,-79.92820805885552,-79.93223787046583,-79.93666383304802,-79.93466941781037,-79.9326340214377,-79.93058496468669,-79.92891839852922,-79.92685568139987,-79.92292149243795,-79.91897364309767,-79.91540828435092,-79.91143311425398,-79.90743062340036,-79.89722632078036,-79.88740450875389,-79.87714556462052,-79.8668319789738,-79.8564910725704,-79.84280337347369,-79.82865122151344,-79.81448540917481,-79.80029227607955,-79.78648163357778])
        expected['lonSH'] = np.array([57.82406049443696,57.91081072708529,57.99797077108382,58.08528790943327,58.16835667011896,58.256268034926194,58.31304056730734,58.369901892147695,58.42254216008099,58.48016163591922,58.53797918724337,58.57721862402509,58.61197062652212,58.651531082194836,58.6912622925968,58.731116446403824,58.774180789120756,58.82210822652673,58.870445475282914,58.91876223347158,58.96265302907808,59.02170001445285,59.08095873569187,59.14029258901178,59.19491361180437,59.25449335193439,59.30602712922214,59.3576701895366,59.4046140797021,59.45653717777254,59.508631030572225,59.55180465631587,59.590313262856405,59.63360300181595,59.67700885399138,59.720380555220956,59.7246084423172,59.73375406561584,59.74283138702279,59.751895048051395,59.75615708609349])
        expected['rhoSH'] = np.array([6371.192404937744,6371.192404937744,6371.192025184631,6371.192025184631,6371.192404937744,6371.191645431519,6371.192025184631,6371.191645431519,6371.192404937744,6371.192025184631,6371.191645431519,6371.190885925293,6371.191645431519,6371.192404937744,6371.191645431519,6371.192404937744,6371.191645431519,6371.191265678405,6371.192025184631,6371.191645431519,6371.191265678405,6371.191645431519,6371.191645431519,6371.190885925293,6371.191645431519,6371.191645431519,6371.191645431519,6371.191645431519,6371.190885925293,6371.192025184631,6371.191645431519,6371.191645431519,6371.191265678405,6371.190885925293,6371.191265678405,6371.191265678405,6371.190885925293,6371.191645431519,6371.191645431519,6371.191645431519,6371.192025184631])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_30S_0_30000(self):
        """Test for latitude = -30, longitude = 0, rho = 30000"""
        lat = -30
        lon = 0
        rho = 30000

        expected = {}
        expected['latNH'] = np.array([62.178641680205835,62.2348865804736,62.291049518471326,62.34710488098962,62.402924601981546,62.458817747507055,62.52256902567266,62.5864944736621,62.65023550654395,62.71357868090665,62.777210430761784,62.84974362465273,62.9221589977805,62.994482163354476,63.06679679119198,63.13871526805763,63.20520374453312,63.271757107805726,63.33790919746459,63.404189353170395,63.469656716364966,63.526934682744695,63.58397188495618,63.640659039972704,63.69723861950979,63.753737944324136,63.81287030706352,63.871676528270044,63.93043664569966,63.98888428197475,64.04743095599281,64.11070412091651,64.17367504996945,64.23620372427362,64.29901755897563,64.3609588370112,64.4206563979044,64.47986560027195,64.5391892083081,64.5980654389536,64.6563064620063])
        expected['lonNH'] = np.array([334.27926613207217,334.31877194623155,334.3582504396342,334.3978655368203,334.4442288609063,334.4841171656592,334.54239233965774,334.6007494759263,334.66615536741836,334.72505891882054,334.7840171117361,334.8876447418235,334.99884022151133,335.10372460640605,335.2091280856777,335.3151872631097,335.4493594991654,335.57708403664464,335.70562819682425,335.8348280551642,335.972415385805,336.09462113043486,336.2173732901983,336.34072650660875,336.4723579122932,336.59696788351096,336.7207309112716,336.84498571265243,336.97779191087415,337.103330787819,337.22938875914076,337.3992692241773,337.57822018043163,337.74995845692246,337.9224617146003,338.0957845949785,338.2761562305802,338.44887805431154,338.62222825544643,338.796206833985,338.9797203566049])
        expected['rhoNH'] = np.array([6371.195442962647,6371.195822715759,6371.1965822219845,6371.197721481323,6371.1984809875485,6371.199620246887,6371.194303703308,6371.196202468872,6371.199240493775,6371.195063209533,6371.197721481323,6371.1946834564205,6371.196961975097,6371.195442962647,6371.197721481323,6371.195063209533,6371.195442962647,6371.197341728211,6371.195442962647,6371.198101234436,6371.1946834564205,6371.196961975097,6371.198101234436,6371.195442962647,6371.196961975097,6371.1965822219845,6371.197341728211,6371.195442962647,6371.1984809875485,6371.195442962647,6371.1965822219845,6371.195822715759,6371.198860740661,6371.195063209533,6371.199620246887,6371.195063209533,6371.199620246887,6371.195822715759,6371.197721481323,6371.196961975097,6371.1965822219845])
        expected['latSH'] = np.array([-69.54882036967237,-69.54436708633352,-69.539927463373,-69.53546051965583,-69.53041984004835,-69.5259665567095,-69.52723697189512,-69.52853470783742,-69.52925870788945,-69.53061108534513,-69.53199078355746,-69.53225033074591,-69.53193614204412,-69.53223667036758,-69.53249621755603,-69.53279674587952,-69.53756421792019,-69.54291908622949,-69.5483149356738,-69.55375176625313,-69.55856021942881,-69.56092346488163,-69.5633003707128,-69.5656909369223,-69.56750776724152,-69.56992565420771,-69.56754874837654,-69.56515818216704,-69.56212557817557,-69.55978965347941,-69.55739908726991,-69.55244036993247,-69.54682595443472,-69.5418672370973,-69.53685387824652,-69.53189516090907,-69.51764738630044,-69.5040553098521,-69.49042225226876,-69.47677553430708,-69.46244579742839])
        expected['lonSH'] = np.array([31.391426481973543,31.40673293590354,31.422172578522357,31.4376736928437,31.452443976923853,31.468211468622826,31.45421641101347,31.44018378736368,31.425218842892182,31.411066690931914,31.396863312552874,31.363388555430642,31.328971232202946,31.295199361851818,31.261191849974324,31.226928206002956,31.201653090979324,31.17694146656222,31.152185445915507,31.127279161107055,31.101297121504327,31.109636782480912,31.117993518930422,31.126329764812425,31.133965916304497,31.142421690496974,31.146666653066138,31.150839898649014,31.154224257382754,31.158588748262392,31.162898597628672,31.173731277652312,31.18373067459721,31.194635071607134,31.205481412009117,31.216498507140347,31.21822654500036,31.2209278848171,31.22352677179629,31.226193960667178,31.22800054570265])
        expected['rhoSH'] = np.array([6371.190885925293,6371.188987159729,6371.187088394165,6371.187088394165,6371.186328887939,6371.185189628601,6371.185189628601,6371.186328887939,6371.186708641052,6371.187468147277,6371.188607406616,6371.19050617218,6371.193544197083,6371.1965822219845,6371.199620246887,6371.1965822219845,6371.193544197083,6371.191265678405,6371.190126419067,6371.188607406616,6371.186708641052,6371.186328887939,6371.185569381713,6371.184809875488,6371.184809875488,6371.184809875488,6371.185189628601,6371.184809875488,6371.185189628601,6371.187468147277,6371.188227653503,6371.190126419067,6371.191645431519,6371.193164443969,6371.195442962647,6371.197341728211,6371.198101234436,6371.195442962647,6371.192404937744,6371.190126419067,6371.187847900391])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_0N_0_30000(self):
        """Test for latitude = 0, longitude = 0, rho = 30000"""
        lat = 0
        lon = 0
        rho = 30000

        expected = {}
        expected['latNH'] = np.array([60.10271838010176,60.14800253429895,60.193344745104085,60.238710861571306,60.283615940269556,60.32848345292737,60.37916345656886,60.42988444134538,60.48020244496086,60.53055459952219,60.58071550878677,60.6363303241036,60.69152849788105,60.746934992428194,60.80186337373344,60.85676784937659,60.904466475445375,60.95251685625641,61.0001915766631,61.047521372516705,61.09435939475007,61.13330854849207,61.17215866449109,61.21089949746341,61.24869776433026,61.28683071046645,61.32701612844821,61.36716398038955,61.40684908701461,61.44651370307217,61.48599561156943,61.52702968055557,61.56750879667165,61.60824233733432,61.64876072703812,61.68870879594624,61.726148477881665,61.763938207012046,61.80152815310922,61.83899686334861,61.87565790371866])
        expected['lonNH'] = np.array([342.52286732817066,342.5707332938741,342.6185719388209,342.666465225281,342.7144131532545,342.7624976850114,342.824351878135,342.88623339201536,342.9481968681657,343.0103515896128,343.07261559408664,343.17810103562834,343.2839416470069,343.3901647489789,343.4968796245712,343.6040043115137,343.7242429616626,343.84489142316164,343.966031658281,344.08771830853397,344.2098967324072,344.32396089154634,344.43835289976573,344.55301811555194,344.66814778420166,344.7834960189048,344.89663127231694,345.01006705405246,345.12377604335484,345.2378128817374,345.3521229276867,345.503070108344,345.6543997795948,345.80608462068244,345.9581519523636,346.11068373690836,346.2602648797316,346.41003726785164,346.5600555427818,346.7103470252788,346.86093903609924])
        expected['rhoNH'] = np.array([6371.195442962647,6371.193923950195,6371.193923950195,6371.1965822219845,6371.198860740661,6371.195063209533,6371.193164443969,6371.194303703308,6371.197721481323,6371.196202468872,6371.194303703308,6371.193544197083,6371.196202468872,6371.1984809875485,6371.194303703308,6371.193544197083,6371.194303703308,6371.197721481323,6371.197721481323,6371.195063209533,6371.193544197083,6371.194303703308,6371.1965822219845,6371.199240493775,6371.196202468872,6371.1946834564205,6371.193923950195,6371.195442962647,6371.1984809875485,6371.196961975097,6371.194303703308,6371.194303703308,6371.195063209533,6371.196961975097,6371.199240493775,6371.196202468872,6371.194303703308,6371.193923950195,6371.195063209533,6371.197721481323,6371.1984809875485])
        expected['latSH'] = np.array([-63.749702896386395,-63.73598787653302,-63.72224553592295,-63.708434893421185,-63.694979420756255,-63.681100476362786,-63.67293157011545,-63.66476266386812,-63.656976248214306,-63.648698058940255,-63.64043353004453,-63.634259039034845,-63.62838507634865,-63.62200567966386,-63.61565360373575,-63.60916492402421,-63.611596471368756,-63.61371383001145,-63.61576288676247,-63.61782560389179,-63.620134207831256,-63.61876816999725,-63.61744311329829,-63.61615903773432,-63.61516183011551,-63.613823113038166,-63.60426084820017,-63.59468492298379,-63.58539586571257,-63.57569699709117,-63.56602544922643,-63.560083184648505,-63.55445510877243,-63.548417221546146,-63.542365673941504,-63.536437069741936,-63.51988069119383,-63.50294182205218,-63.48592099064052,-63.4689821214989,-63.452343780680735])
        expected['lonSH'] = np.array([30.765050323759183,30.753367285183877,30.74171156736525,30.72986460424986,30.715855886262165,30.70393379106591,30.66356395797655,30.622866275807027,30.579887310454723,30.538755911272908,30.497388870564723,30.43202054511312,30.364135294952362,30.297937101516595,30.23132226654146,30.16429762021613,30.104878389531603,30.04732380049049,29.989291098207477,29.93097152797932,29.869995014164033,29.84832282392758,29.826531105380656,29.80471889626622,29.780485385091016,29.758362402369343,29.73228815521282,29.70609437974582,29.677506622974732,29.651022564468008,29.624456543691245,29.603911334667846,29.580941408489092,29.560054690007195,29.539058688498574,29.518165139827506,29.488638232045542,29.461320890460076,29.433863529996625,29.406471056330286,29.37667777117069])
        expected['rhoSH'] = np.array([6371.185569381713,6371.185569381713,6371.194303703308,6371.190885925293,6371.184050369263,6371.186708641052,6371.198860740661,6371.186708641052,6371.1844301223755,6371.191645431519,6371.191645431519,6371.182911109924,6371.186708641052,6371.198860740661,6371.185189628601,6371.184050369263,6371.190885925293,6371.193923950195,6371.185189628601,6371.182911109924,6371.189746665955,6371.197721481323,6371.187088394165,6371.182151603699,6371.185189628601,6371.195063209533,6371.190126419067,6371.1825313568115,6371.183670616149,6371.195442962647,6371.190126419067,6371.183290863037,6371.182911109924,6371.188227653503,6371.198101234436,6371.186708641052,6371.18101234436,6371.184050369263,6371.195442962647,6371.188987159729,6371.181771850585])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_30N_0_30000(self):
        """Test for latitude = 30, longitude = 0, rho = 30000"""
        lat = 30
        lon = 0
        rho = 30000

        expected = {}
        expected['latNH'] = np.array([65.43793111250775,65.46715066177707,65.49630361670198,65.52540534520811,65.55462489447743,65.58364466071352,65.61616831399382,65.64857243896365,65.68109950733856,65.71339605682896,65.74561918178578,65.78222216554789,65.81884222478291,65.85520102928217,65.89144030547098,65.92757200618034,65.95776656495367,65.98766230295082,66.01742143716456,66.04710543929744,66.07678602633572,66.10029553745892,66.12361892592722,66.14686035212547,66.17009153303998,66.19309561016459,66.21833315914779,66.24350923642845,66.26864945521598,66.29360867399049,66.31845177954912,66.3453114984602,66.37214901925647,66.39863820040507,66.42497540984465,66.45110429851452,66.4752780455345,66.49919736800788,66.52294422820472,66.54650325819938,66.56997008064026])
        expected['lonNH'] = np.array([345.4761318422575,345.51653924138725,345.5570012820304,345.59749064343026,345.6395919294742,345.68013593238743,345.73311087959,345.7861677890627,345.8408366231795,345.8939754949222,345.94714168742155,346.0489934683248,346.15270306068226,346.2551012567191,346.3577726603227,346.46071727149314,346.5745901853356,346.6871790236141,346.8001230317294,346.9133129266549,347.028497236818,347.13551264073374,347.2427466107029,347.3501718259689,347.4594548526891,347.56728987930524,347.67476973608456,347.78244083816065,347.89202439320434,348.00007798587393,348.10837746535367,348.25386049467494,348.40122865620714,348.547258100662,348.69350611117034,348.84002732924546,348.98671247186064,349.1318403313451,349.2770774738562,349.42247854090743,349.5697374194129])
        expected['rhoNH'] = np.array([6371.2,6371.199240493775,6371.197721481323,6371.197341728211,6371.196961975097,6371.196202468872,6371.195822715759,6371.195442962647,6371.195822715759,6371.195063209533,6371.195822715759,6371.195442962647,6371.195442962647,6371.196202468872,6371.196202468872,6371.196961975097,6371.196961975097,6371.197721481323,6371.1984809875485,6371.198860740661,6371.199240493775,6371.2,6371.199620246887,6371.198860740661,6371.1984809875485,6371.198101234436,6371.197341728211,6371.196961975097,6371.1965822219845,6371.196202468872,6371.196202468872,6371.195822715759,6371.196202468872,6371.195822715759,6371.195822715759,6371.195822715759,6371.195822715759,6371.196202468872,6371.195822715759,6371.195822715759,6371.196202468872])
        expected['latSH'] = np.array([-66.9342922572832,-66.9211509733201,-66.9079823686003,-66.89475912236716,-66.88753278222529,-66.87425489447878,-66.87171406410755,-66.86911859222292,-66.87249270567293,-66.86992455454498,-66.86732908266038,-66.8715364791891,-66.88169980067408,-66.88587987644615,-66.89003263146151,-66.89417172609853,-66.91216244437234,-66.92425187920327,-66.9363413140342,-66.9484853903785,-66.9664761086523,-66.96837490124156,-66.97024637307413,-66.97214516566339,-66.97991792093887,-66.98185769466315,-66.97704924148746,-66.97224078831178,-66.97325165630895,-66.96841588237658,-66.96353912730919,-66.96177693850333,-66.96584773124866,-66.96405822168612,-66.96229603288023,-66.96057482520939,-66.9551106738734,-66.94381354098618,-66.93251640809899,-66.92116463369842,-66.91552289744399])
        expected['lonSH'] = np.array([44.82232071117037,44.81469480496205,44.80715427611836,44.79956935104506,44.77807474572703,44.77042493385662,44.73033513852322,44.69004385260932,44.63564822605934,44.59492322313314,44.55398989943725,44.48811272489248,44.408032171968664,44.341222676602186,44.27397263403424,44.20636400653487,44.12982832179029,44.06659101535973,44.00293023720062,43.93897234581262,43.8605105477221,43.824604243255344,43.788513523681,43.752337426742024,43.70204332878863,43.66549840163448,43.620586492747066,43.57562677253546,43.51662759848488,43.47133319900394,43.42585779951,43.37719953186283,43.31459060283591,43.26545080685225,43.21626661463899,43.16705510166905,43.09032475653312,43.02722063879138,42.96407553991461,42.90085872405155,42.823862001538004])
        expected['rhoSH'] = np.array([6371.1946834564205,6371.186708641052,6371.196202468872,6371.187468147277,6371.187468147277,6371.196961975097,6371.187468147277,6371.189366912841,6371.1946834564205,6371.188607406616,6371.187088394165,6371.1965822219845,6371.190126419067,6371.186708641052,6371.199240493775,6371.186708641052,6371.191265678405,6371.192025184631,6371.193164443969,6371.192404937744,6371.195063209533,6371.187468147277,6371.186328887939,6371.190126419067,6371.188227653503,6371.185189628601,6371.193544197083,6371.188987159729,6371.185569381713,6371.188227653503,6371.193923950195,6371.193544197083,6371.186328887939,6371.1946834564205,6371.191265678405,6371.184809875488,6371.19050617218,6371.187088394165,6371.190126419067,6371.187088394165,6371.184050369263])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_60N_0_30000(self):
        """Test for latitude = 60, longitude = 0, rho = 30000"""
        lat = 60
        lon = 0
        rho = 30000

        expected = {}
        expected['latNH'] = np.array([76.22452272717602,76.24011007263564,76.25567009733858,76.27116011260252,76.28655877408632,76.30206671859683,76.31980130477677,76.33755552775057,76.35516717052545,76.37280357273606,76.39044253626763,76.41581498148693,76.44099959650406,76.46617994265296,76.49128003407911,76.51627852644135,76.53793193365759,76.55963742106624,76.58120801223879,76.60273506095538,76.6240708643752,76.64201974774035,76.65988666883545,76.67766992011323,76.69530376100292,76.71294016321353,76.73292273540405,76.75281822268265,76.77255149296846,76.7922463434402,76.8118669156047,76.83533459181922,76.8584821029164,76.88153655268613,76.90437841281795,76.92706659369343,76.94859108108908,76.97000030904249,76.99121658415184,77.01223307622797,77.03298916734198])
        expected['lonNH'] = np.array([340.27259320421825,340.30699003687846,340.34138686953867,340.3759203059822,340.40886913853836,340.44332061271194,340.49350884273315,340.5436151104844,340.59227337813155,340.64254357042284,340.69281376271414,340.81671339425816,340.93946555402164,341.0641848082661,341.1893138738607,341.31482543004887,341.45066423226206,341.58847012895626,341.72693172381076,341.86583045077214,342.00371830973637,342.139775678003,342.2763248198899,342.41322913161366,342.54893133004344,342.68660062295424,342.83118206730506,342.9761733230061,343.11990782389984,343.2658006645713,343.41204867507963,343.61389442543185,343.81478394930025,344.0178591337031,344.2215900162662,344.4258399932063,344.6313194041969,344.8389571549653,345.0470320378406,345.2555713735794,345.4627993129976])
        expected['rhoNH'] = np.array([6371.1984809875485,6371.198101234436,6371.197341728211,6371.197721481323,6371.198101234436,6371.198101234436,6371.1984809875485,6371.198101234436,6371.198860740661,6371.1984809875485,6371.1984809875485,6371.1984809875485,6371.198101234436,6371.1984809875485,6371.198860740661,6371.1984809875485,6371.197721481323,6371.1984809875485,6371.199240493775,6371.198860740661,6371.1984809875485,6371.199240493775,6371.199620246887,6371.198860740661,6371.199240493775,6371.199240493775,6371.198860740661,6371.198860740661,6371.198860740661,6371.198860740661,6371.199240493775,6371.199240493775,6371.199620246887,6371.198860740661,6371.1984809875485,6371.198860740661,6371.199240493775,6371.198860740661,6371.199240493775,6371.199240493775,6371.199240493775])
        expected['latSH'] = np.array([30.62138845046814,30.633068073948863,30.644453999295273,30.655539396318204,30.598172637479266,30.60987958171667,30.619878978661568,30.629495885012943,30.570783578907516,30.581110824932573,30.5911033916883,30.59953867531327,30.539822331399847,30.548995275455177,30.557819879862834,30.566296144622818,30.506941800735405,30.51631965046583,30.525321839791907,30.534037161172847,30.475099458824808,30.484135799096734,30.492878441234346,30.501231762589278,30.44229406024123,30.451391872215694,30.458570401033377,30.465496212851768,30.405247114183084,30.41293107699935,30.420280360546286,30.427137870472976,30.367284922776157,30.374962055403252,30.382352320085204,30.389435226254506,30.330115033312943,30.33801756218265,30.345646883485557,30.352873223627427,30.294119936386977])
        expected['lonSH'] = np.array([5.858789420969782,5.833867768235699,5.808931174462805,5.783936524081967,5.8172106443973295,5.792285149681838,5.7631689070237195,5.733999730399534,5.763115119284006,5.733972836529677,5.704847629248273,5.671130827297328,5.6956614517014295,5.661977093149042,5.6282607180849205,5.594490555281085,5.613712842039616,5.574726122257183,5.5356979944529074,5.496592600133646,5.515691089713471,5.478723971491246,5.441669341470281,5.404569888332887,5.42570847004043,5.388593222090581,5.350346724059448,5.312016983097807,5.331913751036876,5.293646762438233,5.255316594589768,5.212105829692506,5.227009302461473,5.183812197942551,5.140489161810806,5.09718362803881,5.113842459424471,5.072350340877113,5.03083986619636,4.989284995286003,5.0058601568543315])
        expected['rhoSH'] = np.array([343096.6202758789,343103.4497558594,343110.1091064453,343116.52541503904,343096.28001708986,343103.0851928711,343109.3556762695,343115.5532470703,343095.0891113281,343101.6755493164,343107.99464111327,343114.02208251954,343092.95034179685,343099.05069580075,343105.2482666015,343111.2027954101,343089.8394042969,343095.745324707,343101.4325073242,343107.0467773437,343085.7806030273,343091.4677856445,343097.22788085934,343102.79354248045,343081.21141357423,343087.6034179687,343095.28354492184,343101.7241577148,343083.3987915039,343089.6449707031,343095.5994995117,343101.09224853513,343081.18710937497,343086.99581298826,343092.63438720704,343098.12713623047,343077.63869628904,343083.2772705078,343088.69710693357,343094.0683349609,343073.36115722655])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_90N_0_30000(self):
        """Test for latitude = 90, longitude = 0, rho = 30000"""
        lat = 90
        lon = 0
        rho = 30000

        expected = {}
        expected['latNH'] = np.array([85.85865951139581,85.86528650243801,85.87190196753599,85.87851871329444,85.88420015002342,85.8908100655927,85.90044148609607,85.91007376037308,85.91877072562062,85.92836287253625,85.9379588614333,85.96213773109514,85.98538257238799,86.00949442081861,86.03358236358713,86.05763700918344,86.08356654170693,86.1103968054272,86.13721853141102,86.1640359885266,86.18989380406381,86.21774176597042,86.2455671028754,86.27336896100512,86.30023209501078,86.32797290832478,86.3591271086765,86.39022794817534,86.4203657310012,86.45135792780354,86.48229420243206,86.52514318074671,86.56698299861151,86.60962258893943,86.65214841392898,86.694575414619,86.73572773125514,86.77764396186127,86.81943212642047,86.86104868247676,86.90162747666605])
        expected['lonNH'] = np.array([264.32083499216316,264.29329566942965,264.2659749127496,264.2384082692594,264.21455724867775,264.1870998882143,264.14551769654724,264.104126750177,264.06604161536495,264.0240769331044,263.98205760933047,263.83900612735374,263.69863207953165,263.5525753143201,263.40509786976116,263.2560904628282,263.09041739432035,262.91824198572266,262.7439901996173,262.5673068661674,262.39215349509163,262.2075744629612,262.0200447891093,261.829564473536,261.6406960826068,261.4440412760238,261.226103599987,261.0038765651515,260.7826877190698,260.55292015539055,260.3186719876158,260.0591247991553,259.79821157286085,259.5255777419506,259.24644157095054,258.96017468245697,258.6797817566496,258.3867119997427,258.0864295630723,257.77827874847793,257.4688984998331])
        expected['rhoNH'] = np.array([6371.2,6371.2,6371.199240493775,6371.199240493775,6371.2,6371.2,6371.199240493775,6371.199240493775,6371.2,6371.199240493775,6371.199620246887,6371.198860740661,6371.199620246887,6371.2,6371.199620246887,6371.199620246887,6371.198860740661,6371.199620246887,6371.2,6371.199240493775,6371.199620246887,6371.2,6371.2,6371.2,6371.2,6371.2,6371.2,6371.2,6371.199620246887,6371.199240493775,6371.2,6371.199620246887,6371.2,6371.199240493775,6371.2,6371.199620246887,6371.2,6371.199620246887,6371.199620246887,6371.199620246887,6371.2])
        expected['latSH'] = np.array([48.18526771248012,48.19166076954325,48.19770890205329,48.20333014774022,48.14152376594077,48.1477802192205,48.15184076668208,48.155423200901744,48.09146872460833,48.09570002679916,48.099562498774795,48.10218870651067,48.03728141882804,48.040600890764665,48.04341151360812,48.04581915529055,47.979409225990516,47.9809630940267,47.98201494315888,47.98257501867082,47.91573820254766,47.91704276867913,47.91777018382574,47.918009240446686,47.8512475564044,47.852056933821046,47.85141831113365,47.8502230280289,47.78217385332806,47.78152498535691,47.78046972113014,47.77903196630985,47.71076422555558,47.709855810395965,47.70833609330564,47.706375829013844,47.63893795624372,47.63846667319099,47.63764022030142,47.636236616426984,47.56866213987346])
        expected['lonSH'] = np.array([10.431394457070926,10.388850062504563,10.34621260661076,10.303371952589146,10.3727837500294,10.330283751692642,10.279889762222643,10.229336117080793,10.29091197999575,10.240718627332619,10.19039720862255,10.133042402614661,10.187670255596423,10.130707331692163,10.073583898342408,10.016304224415387,10.06012415680925,9.992278180236221,9.92441000554839,9.856370222357661,9.900196131167048,9.834417140591594,9.768539112273174,9.702519357529479,9.74821417685051,9.682528247602496,9.613475888867315,9.544244237666419,9.586760457702455,9.517892514074864,9.448996395916945,9.37154461204994,9.405763006018057,9.328597236322546,9.251353773225224,9.174047130878082,9.212407180804165,9.139271222718962,9.066014882549636,8.992694509356841,9.031144205515782])
        expected['rhoSH'] = np.array([327573.64975585934,327586.94415283203,327599.7767700195,327612.51217041013,327580.94101562497,327594.11389160156,327606.21738281247,327618.0292236328,327585.5102050781,327597.8081298828,327609.7414916992,327621.0429443359,327587.4302368164,327598.82890625,327609.93592529296,327620.8728149414,327584.87829589844,327593.8951538086,327602.32871093747,327610.2518798828,327573.4553222656,327582.3992675781,327590.71130371094,327598.5858642578,327561.9108276367,327570.1742553711,327577.3439941406,327583.9790405273,327546.30753173825,327553.3314453125,327559.9907958984,327562.98021240236,327521.7116821289,327525.2357910156,327527.98216552736,327530.1452392578,327488.8037963867,327492.2549926758,327495.12288818357,327497.6262207031,327455.6042602539])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_90S_90_30000(self):
        """Test for latitude = -90, longitude = 90, rho = 30000"""
        lat = -90
        lon = 90
        rho = 30000

        expected = {}
        expected['latNH'] = np.array([-6.744786989109073,-6.730306988068648,-6.716277779513447,-6.702590080416741,-6.756207065401341,-6.741665592658379,-6.732478988224713,-6.723668044195392,-6.782373520111662,-6.772742953381936,-6.763570009326614,-6.757060839047597,-6.818191032119202,-6.810944201409825,-6.804032049969763,-6.797632162717463,-6.864383601476007,-6.862641903237645,-6.861187072944432,-6.8602854879739965,-6.9274535682719005,-6.925110813386581,-6.923253001932338,-6.921886964098334,-6.9886657236135505,-6.986555195160022,-6.987593383913861,-6.989034553828731,-7.058839087146268,-7.05955625700912,-7.060744709924691,-7.066352295233273,-7.1403915458362235,-7.145329772606132,-7.150609508834549,-7.156449320574922,-7.22965528809911,-7.233432382710134,-7.2376875905630556,-7.242420911657874,-7.315954728262227])
        expected['lonNH'] = np.array([350.35105641894904,350.3288719645248,350.30668751010063,350.28447573491974,350.3770111377951,350.35485400412756,350.3423137768114,350.3298555117653,350.43236299082884,350.4199047257827,350.4075284230067,350.3975563468185,350.50271393928,350.49287846687514,350.4830156737137,350.47315288055216,350.59126051168005,350.5942931156715,350.5972710781496,350.60035832365446,350.7186572000791,350.7172365207317,350.71581584138437,350.7144224827937,350.8282953966361,350.82703864182884,350.8279402267993,350.8287598494997,350.9452009144701,350.9461844617106,350.9471133674377,350.95541887746845,351.07931850901247,351.0877059813132,351.0959022083172,351.104207718348,351.2237360288232,351.227424330975,351.2310853123701,351.23477361452194,351.3544385287806])
        expected['rhoNH'] = np.array([292487.1355957031,292480.06307373045,292473.2578979492,292466.9631103515,292520.0677856445,292513.0438720703,292511.31827392575,292510.2974975586,292569.08935546875,292566.99919433595,292565.39511718747,292564.8604248047,292624.673059082,292623.40924072266,292622.777331543,292622.4856811523,292690.14857177733,292696.9537475586,292703.8561401367,292711.56057128904,292779.7095458984,292782.7961791992,292786.49041748047,292790.52491455077,292855.12547607423,292858.67388916016,292862.78129882814,292867.4963134765,292933.06904296874,292937.07923583983,292941.5269042969,292950.6409790039,293021.0502441406,293029.7025390625,293038.8409179687,293048.7813354492,293116.1525756836,293121.64532470703,293127.52694091795,293134.1619873047,293201.970703125])
        expected['latSH'] = np.array([-78.96699553695964,-78.94655961096296,-78.92608270383127,-78.90552383442952,-78.88586654999821,-78.8652120579481,-78.84998073609898,-78.83470843311483,-78.82033771510112,-78.80495612909024,-78.78953356194435,-78.77495793825557,-78.76129755991553,-78.74663997395669,-78.73194140686283,-78.7171881982556,-78.70513974455969,-78.69208042286661,-78.67899378041687,-78.66585249645377,-78.65366743897448,-78.64257521176236,-78.6314283430369,-78.62028147431144,-78.6100908320698,-78.5989029822093,-78.58878064185936,-78.57864464113106,-78.56947852726489,-78.55930154540158,-78.54911090315991,-78.53949399680855,-78.53086063769763,-78.52118908983292,-78.51151754196817,-78.50181867334675,-78.49710584281945,-78.4913548235383,-78.48557648350047,-78.47979814346263,-78.47498969028695])
        expected['lonSH'] = np.array([136.90636078048658,136.89591059105646,136.88547406200468,136.87501021219623,136.86890402307824,136.85842651289144,136.88405338265733,136.9095709693965,136.93967844325792,136.96534629415882,136.990904862033,136.99658757942245,137.00672358015075,137.01243361829688,137.01802071303794,137.02374441156243,137.04441256399087,137.06065475383718,137.0769106040618,137.0931527939081,137.11382094633655,137.1020593605858,137.0904207182401,137.0787820758944,137.07140547159077,137.05968486697503,137.0382380729812,137.0167093167173,136.9996065230356,136.97814606866342,136.95675391618295,136.9179721020756,136.88354794865873,136.84480711568642,136.8060936034708,136.7672161667151,136.70971963428192,136.64776981850991,136.58576536122453,136.52365162091243,136.4660321450742])
        expected['rhoSH'] = np.array([6371.198860740661,6371.198860740661,6371.198860740661,6371.198101234436,6371.199240493775,6371.198860740661,6371.1984809875485,6371.198860740661,6371.199240493775,6371.1984809875485,6371.198860740661,6371.198101234436,6371.198860740661,6371.199240493775,6371.1984809875485,6371.198860740661,6371.198860740661,6371.198860740661,6371.199620246887,6371.198860740661,6371.198860740661,6371.199620246887,6371.199240493775,6371.199240493775,6371.199240493775,6371.199240493775,6371.199240493775,6371.199240493775,6371.198860740661,6371.198860740661,6371.198860740661,6371.199240493775,6371.199620246887,6371.198860740661,6371.199620246887,6371.198860740661,6371.1984809875485,6371.198860740661,6371.198860740661,6371.199240493775,6371.199240493775])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_60S_90_30000(self):
        """Test for latitude = -60, longitude = 90, rho = 30000"""
        lat = -60
        lon = 90
        rho = 30000

        expected = {}
        expected['latNH'] = np.array([8.25467042826493,8.279252279087814,8.303437978938831,8.327254848574654,8.263344768510848,8.2880700533063,8.320670546214771,8.352936359853913,8.29720884641577,8.330424056349543,8.363208964365612,8.399887080208572,8.348469416136723,8.386090098085148,8.423478553601797,8.4604913487141,8.419298477829756,8.467635726585925,8.515856862126228,8.563627205181291,8.522523126756155,8.569200639544022,8.615625435332603,8.66172238204102,8.61865120913491,8.6657112125163,8.715940423672578,8.765916917829557,8.726226688562619,8.777173069581735,8.828105790222523,8.885568171709835,8.853015490125557,8.911741456609334,8.970180555147962,9.028414748011485,8.992918254894931,9.049321957060897,9.105322678065832,9.161275587746573,9.125881547467571])
        expected['lonNH'] = np.array([27.638118004741063,27.622265135677463,27.606226143958978,27.59020422771342,27.646210071360233,27.630488683438156,27.619164229794276,27.607831238413933,27.66852771447325,27.657471345754292,27.646319354386954,27.63786528774177,27.70148166967127,27.693280320025377,27.685201913784546,27.676805903747304,27.74537758791965,27.74227326694188,27.739221879930174,27.73597924762171,27.804559469530517,27.803097809048133,27.80147222402567,27.799824440888404,27.86986290818501,27.868454181668692,27.87107697430998,27.873597314113713,27.947740725101493,27.95054622530308,27.953409782112605,27.959755027851546,28.037427939092932,28.044065175418893,28.050555562677697,28.05699813861231,28.134099021510707,28.14028205025686,28.14625675823333,28.15234757942569,28.2293767453378])
        expected['rhoNH'] = np.array([293947.6964477539,293920.93752441404,293894.5188598633,293868.4890625,293959.9943725586,293933.6729248047,293904.2405395508,293874.8810668945,293963.6400024414,293933.4541870117,293904.1433227539,293872.35343017575,293958.3416870117,293925.72545166017,293893.49808349606,293861.1491943359,293943.61334228516,293907.1327392578,293870.6278320312,293834.46318359376,293916.75720214844,293877.4573120117,293838.0359008789,293799.0762695312,293878.4051757812,293838.61920166016,293794.7258178711,293750.85673828126,293826.2240600586,293781.4557250976,293736.8089111328,293688.5893798828,293759.7277709961,293710.31733398436,293661.2714599609,293612.2012817383,293682.95080566406,293632.78693847655,293582.74459228513,293532.7994628906,293603.1358154297])
        expected['latSH'] = np.array([-67.13422555466781,-67.11291536445736,-67.0915641931119,-67.07019936138812,-67.04942192593293,-67.02797513193909,-67.01311264030514,-66.99819550715785,-66.98394773254918,-66.96894863713183,-66.95392222095782,-66.93691504992447,-66.92053625629478,-66.90343346261307,-66.88631700855302,-66.86911859222292,-66.85683791209524,-66.8438468922939,-66.83082855173583,-66.81776923004279,-66.80535194613168,-66.79338545470583,-66.78137798214496,-66.76935684920574,-66.7580187351835,-66.74597028148762,-66.73709103556658,-66.72823911040226,-66.7200292230199,-66.71114997709887,-66.70225707079953,-66.69367835320199,-66.68578265452146,-66.67721759730225,-66.66859789856969,-66.66000552059381,-66.6540222748809,-66.64739699138599,-66.64074438713439,-66.63405080174778,-66.62801291452149])
        expected['lonSH'] = np.array([109.98509503480045,110.00026488494706,110.01527764074274,110.03037235880846,110.04385515223008,110.05884058726909,110.08866119318536,110.11856376137168,110.14681342377885,110.17672282215433,110.20674833374571,110.23344071302212,110.25856214878942,110.28536381109255,110.31209034131481,110.33889200361794,110.36147943920318,110.38574710132423,110.41000793325613,110.43432340670137,110.45699963474581,110.46096114446442,110.46503876739891,110.46897295636084,110.47134303200284,110.47533186247811,110.4720123905415,110.46860412614566,110.46362491824073,110.46024397460157,110.45686303096241,110.43904989760702,110.41946774525658,110.40161363076618,110.38375951627576,110.36585076027198,110.33519687127696,110.30620954843944,110.27709928219684,110.2480231669001,110.21721901374335])
        expected['rhoSH'] = np.array([6371.1984809875485,6371.1984809875485,6371.197721481323,6371.198101234436,6371.198101234436,6371.198101234436,6371.1984809875485,6371.198101234436,6371.1984809875485,6371.198101234436,6371.1984809875485,6371.198101234436,6371.198101234436,6371.1984809875485,6371.198860740661,6371.198860740661,6371.198101234436,6371.1984809875485,6371.198860740661,6371.1984809875485,6371.198101234436,6371.198860740661,6371.1984809875485,6371.198101234436,6371.1984809875485,6371.1984809875485,6371.198101234436,6371.198101234436,6371.198101234436,6371.198101234436,6371.1984809875485,6371.198860740661,6371.1984809875485,6371.197721481323,6371.198101234436,6371.1984809875485,6371.197721481323,6371.198101234436,6371.198101234436,6371.198101234436,6371.1984809875485])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_30S_90_30000(self):
        """Test for latitude = -30, longitude = 90, rho = 30000"""
        lat = -30
        lon = 90
        rho = 30000

        expected = {}
        expected['latNH'] = np.array([74.60422597867787,74.60477239381147,74.60533076177613,74.60562275236315,74.608137969525,74.6084333752066,74.60187980869797,74.59546967616191,74.59062024185121,74.5841298545924,74.57762068431339,74.54721438967579,74.51872054800577,74.48838767790176,74.45802919458833,74.42758021126842,74.38516985916452,74.34059092199914,74.2963910603327,74.25159355711388,74.20867947855868,74.16834038132059,74.1279756708731,74.08727969625087,74.04822296702945,74.00742283202239,73.96624874415825,73.92506441101037,73.88532978551382,73.84401226367712,73.80228151539563,73.74697918123333,73.69280724337867,73.637199258251,73.58128903725257,73.52564348608448,73.47563967117082,73.42443545051053,73.37294606945238,73.32142936763756,73.2715638640546])
        expected['lonNH'] = np.array([61.36597120176296,61.385806071112675,61.40611222351512,61.42725848918548,61.48172924781634,61.50237007948812,61.556622272065525,61.61078567218373,61.699625942718086,61.753297569216045,61.80705798817321,61.917345052701414,62.06063559129911,62.16858673113116,62.27643541812566,62.38414750133676,62.56698483522884,62.71528190248815,62.86237002626437,63.00975867836408,63.188750615753435,63.34747055168619,63.50571237437705,63.66387906498703,63.85353292767078,64.00935003320627,64.1952063107115,64.38022930513797,64.596008641397,64.77835420166885,64.96072025250818,65.16061256875777,65.39033232111281,65.58663195785898,65.78218710398562,65.97608251414394,66.17839954754889,66.34814340880204,66.51718376057069,66.68531569717972,66.88080937160383])
        expected['rhoNH'] = np.array([6371.1984809875485,6371.198860740661,6371.199240493775,6371.1984809875485,6371.199620246887,6371.1984809875485,6371.198101234436,6371.199620246887,6371.1984809875485,6371.199240493775,6371.199240493775,6371.1984809875485,6371.198101234436,6371.199240493775,6371.199240493775,6371.199620246887,6371.2,6371.198101234436,6371.2,6371.198860740661,6371.1984809875485,6371.198860740661,6371.2,6371.199240493775,6371.1984809875485,6371.199620246887,6371.199240493775,6371.1984809875485,6371.1984809875485,6371.199620246887,6371.1984809875485,6371.199620246887,6371.1984809875485,6371.199240493775,6371.1984809875485,6371.199620246887,6371.198860740661,6371.199240493775,6371.199240493775,6371.198860740661,6371.2])
        expected['latSH'] = np.array([-55.45073618687579,-55.430737392985975,-55.41069761796115,-55.39065784293635,-55.37035852072307,-55.35027776456323,-55.33536063141591,-55.320388856755244,-55.305184855662816,-55.290185760245464,-55.275159344071426,-55.258493682496606,-55.241595794489996,-55.22488915178013,-55.20819616944863,-55.19143488522542,-55.1815720920639,-55.17192786495585,-55.16228363784779,-55.15262575036141,-55.14269465530819,-55.132763560255,-55.12277782368844,-55.11283306825692,-55.102601444880236,-55.092629368692,-55.08462438698476,-55.076605744899155,-55.068313895246774,-55.06025427202616,-55.05218098842718,-55.048041893790156,-55.043602270829666,-55.03944951581428,-55.03525577966391,-55.03103472275683,-55.0290812886542,-55.02736008098336,-55.025652533690874,-55.02387668450666,-55.021841288134])
        expected['lonSH'] = np.array([101.7597236135967,101.76718218017037,101.77469538825738,101.7821607850202,101.78899780437939,101.7964632011422,101.81417388166005,101.83186407161038,101.84890539358956,101.86665705524243,101.8844292074628,101.90811630350441,101.93115453157486,101.95488260875149,101.97861751611728,102.00238657442893,102.02074612291791,102.03979552051308,102.05888589924326,102.0780104289193,102.09649292081336,102.09546156224869,102.09449167538655,102.09347397720022,102.0917459393402,102.09078971285639,102.0789939761598,102.06721189984151,102.05470582347122,102.04296472828797,102.0311826519697,102.01054182029792,101.98919064895246,101.96857713803736,101.94799094787894,101.92741158790969,101.899824453852,101.87303645192722,101.84622795943493,101.81943312732096,101.79180501212826])
        expected['rhoSH'] = np.array([6371.196961975097,6371.1965822219845,6371.1965822219845,6371.197341728211,6371.196961975097,6371.197341728211,6371.1965822219845,6371.197341728211,6371.197721481323,6371.197341728211,6371.1965822219845,6371.1965822219845,6371.197341728211,6371.197341728211,6371.196961975097,6371.197721481323,6371.196961975097,6371.197341728211,6371.197721481323,6371.197721481323,6371.197341728211,6371.197341728211,6371.197721481323,6371.197341728211,6371.197341728211,6371.196961975097,6371.198101234436,6371.1965822219845,6371.197341728211,6371.197341728211,6371.197341728211,6371.197341728211,6371.197341728211,6371.197341728211,6371.197341728211,6371.197721481323,6371.196961975097,6371.197721481323,6371.197721481323,6371.197341728211,6371.197721481323])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_0N_90_30000(self):
        """Test for latitude = 0, longitude = 90, rho = 30000"""
        lat = 0
        lon = 90
        rho = 30000

        expected = {}
        expected['latNH'] = np.array([67.66661671604103,67.67011548044339,67.67358009389987,67.67706178282928,67.67991509435505,67.68340361347364,67.68102329254789,67.67871639615572,67.67584088651515,67.67355277314319,67.67098632956255,67.64523480884432,67.61908372205963,67.59361906928653,67.5677736334672,67.54216725426883,67.50203647780042,67.46214988059484,67.42265772681381,67.38269428998007,67.34267962672756,67.30323357672344,67.26431345128542,67.22502278808491,67.18527279466274,67.146243386198,67.10558668516349,67.06542346529652,67.02401202835873,66.9838180726405,66.9431135602818,66.89435796243896,66.84447709093035,66.79581370064132,66.74672683862373,66.69798660870651,66.65499398297587,66.61275267805392,66.57054723162513,66.52835886066924,66.48560358401227])
        expected['lonNH'] = np.array([86.79628178371618,86.79516846288146,86.79408246280343,86.7929281608337,86.79518895344897,86.79404148166842,86.79611785917609,86.79818057630544,86.80356276537141,86.80557767117656,86.80774967133263,86.80637680330946,86.80814582230448,86.80649291652534,86.80507906736715,86.80350129366887,86.81822035133025,86.8296677483792,86.84079412653715,86.85215273112688,86.86644831705972,86.89754616835079,86.92820688753497,86.95902470107006,86.99291609973167,87.02335142267324,87.06752225603572,87.11131742899384,87.15859599842867,87.20221358646837,87.24593362734562,87.27305630853975,87.30353944280552,87.33034793529781,87.35725888062767,87.38393076933656,87.39681933630038,87.40637477094923,87.41588239427388,87.4252602440043,87.43762288640204])
        expected['rhoNH'] = np.array([6371.199240493775,6371.198860740661,6371.1984809875485,6371.1984809875485,6371.198860740661,6371.198101234436,6371.197341728211,6371.1984809875485,6371.2,6371.199620246887,6371.199240493775,6371.197721481323,6371.1984809875485,6371.199240493775,6371.198101234436,6371.1984809875485,6371.198860740661,6371.198101234436,6371.199620246887,6371.198860740661,6371.199240493775,6371.198101234436,6371.2,6371.198101234436,6371.1984809875485,6371.199240493775,6371.198860740661,6371.198860740661,6371.198101234436,6371.198860740661,6371.198860740661,6371.2,6371.198860740661,6371.199240493775,6371.198860740661,6371.198860740661,6371.199240493775,6371.1984809875485,6371.1984809875485,6371.198860740661,6371.198860740661])
        expected['latSH'] = np.array([-48.613484601261234,-48.59695554346979,-48.58042648567837,-48.56385644675191,-48.54649410588175,-48.529937727333646,-48.51808051893448,-48.50625063129203,-48.493587460570836,-48.48168927103666,-48.46977742112415,-48.457496740996476,-48.444437419303426,-48.43208843728402,-48.419753115642976,-48.4074041336236,-48.40497258627909,-48.40336066163496,-48.40174873699084,-48.400150472725045,-48.397773566893875,-48.395041491225896,-48.39237771744959,-48.38967296253824,-48.38624420757492,-48.38359409417694,-48.38138111288586,-48.37911349008141,-48.37613552760328,-48.373895225555515,-48.37169590464279,-48.37744692392394,-48.382337339369656,-48.38789711335406,-48.39345688733843,-48.39901666132283,-48.40625666184303,-48.41428896430699,-48.422307606392565,-48.43038088999154,-48.437634550890095])
        expected['lonSH'] = np.array([100.85535875616283,100.86004426593347,100.86472977570409,100.86940162509637,100.87328117254495,100.87794619174807,100.89196173992494,100.90598411829097,100.91918004376743,100.93322974289015,100.9472931023912,100.97189544378159,100.99568499266074,101.02028733405113,101.04493065657654,101.0695603187236,101.08843896158952,101.10817137810169,101.12796526631638,101.14770451301771,101.16669243891036,101.16246455181411,101.15822983452871,101.15400877762164,101.14896809801417,101.14476070148544,101.12532198310758,101.10586960435138,101.08556345194894,101.06608375243607,101.04661088311236,101.02202220210032,100.99657974744201,100.97197740605164,100.94734774390456,100.92275906289252,100.89380589100084,100.86568600218789,100.83753879261828,100.8093574321028,100.78030180737356])
        expected['rhoSH'] = np.array([6371.196202468872,6371.196961975097,6371.195822715759,6371.196202468872,6371.197341728211,6371.196961975097,6371.1965822219845,6371.1965822219845,6371.1965822219845,6371.1965822219845,6371.1965822219845,6371.196202468872,6371.196202468872,6371.1965822219845,6371.196202468872,6371.1965822219845,6371.1965822219845,6371.1965822219845,6371.197721481323,6371.199240493775,6371.2,6371.198860740661,6371.198101234436,6371.196961975097,6371.196961975097,6371.196202468872,6371.1965822219845,6371.196202468872,6371.196202468872,6371.196961975097,6371.197721481323,6371.199240493775,6371.199240493775,6371.197341728211,6371.197721481323,6371.196202468872,6371.1965822219845,6371.1965822219845,6371.197341728211,6371.1984809875485,6371.199240493775])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_30N_90_30000(self):
        """Test for latitude = 30, longitude = 90, rho = 30000"""
        lat = 30
        lon = 90
        rho = 30000

        expected = {}
        expected['latNH'] = np.array([69.15238435109933,69.15689569104612,69.16144118193877,69.1659456916964,69.17005575802945,69.17455685269249,69.17534232444703,69.17609706035032,69.17642661697778,69.17720867363775,69.17795657935186,69.15786045526639,69.13732719907404,69.11725839574524,69.09718105468,69.0771378645606,69.04598878685076,69.01526488841674,68.98457855602317,68.9539127141971,68.9226406930822,68.89064467191527,68.85866914131586,68.82671068618937,68.79437657065853,68.76245568157248,68.72932414145603,68.6961908937923,68.66274687252134,68.62968021920202,68.59658112248412,68.55767124232986,68.51850352253442,68.47976951975127,68.44113796980568,68.40260204250848,68.369750540148,68.33736690574568,68.30502425247838,68.27255353316414,68.2396695874051])
        expected['lonNH'] = np.array([89.09994749641056,89.09591768480026,89.09194934489248,89.08787855214716,89.085542627451,89.08147866489485,89.07952523079223,89.07748983441957,89.0772097966636,89.07522904180429,89.07317315486412,89.06836470168842,89.06523647504856,89.06045534262955,89.05564005926469,89.05079062495399,89.05895953120132,89.06527745618358,89.07165002267921,89.07794745709396,89.08596609917954,89.10820519511711,89.13038964954131,89.15253995301967,89.17622704906127,89.1981792770537,89.22950935477654,89.2607711306077,89.29355603862375,89.32461973896896,89.35571759026003,89.37119479891928,89.3882497812768,89.40356989558515,89.41880121743428,89.43394374682418,89.43495461482135,89.43426476571518,89.43345197320394,89.43276212409778,89.4336432185007])
        expected['rhoNH'] = np.array([6371.2,6371.2,6371.199620246887,6371.199620246887,6371.199620246887,6371.198860740661,6371.198860740661,6371.199240493775,6371.199240493775,6371.1984809875485,6371.1984809875485,6371.198101234436,6371.198101234436,6371.198860740661,6371.1984809875485,6371.198860740661,6371.1984809875485,6371.199240493775,6371.2,6371.199240493775,6371.199620246887,6371.199240493775,6371.199240493775,6371.1984809875485,6371.199240493775,6371.198860740661,6371.199240493775,6371.199240493775,6371.199620246887,6371.2,6371.2,6371.2,6371.199240493775,6371.1984809875485,6371.1984809875485,6371.198101234436,6371.198860740661,6371.199240493775,6371.199240493775,6371.199240493775,6371.198860740661])
        expected['latSH'] = np.array([-49.736367700811314,-49.72048068080187,-49.7045800004141,-49.68870664078298,-49.67236882828831,-49.656522789413884,-49.64747961895279,-49.638299844708285,-49.62884686289698,-49.61989931508427,-49.61062391819138,-49.602195464755596,-49.59313863391617,-49.584614557832,-49.57606316099114,-49.56747078301524,-49.57242950035268,-49.57792097244538,-49.58348074642976,-49.58899953927914,-49.59387629434653,-49.59903991735905,-49.60444942718169,-49.60980429549099,-49.61446248450494,-49.619749050922536,-49.6278633156565,-49.63597758039049,-49.643381505450776,-49.65130452488799,-49.659309506595235,-49.67693139465388,-49.69408882984894,-49.71171071790758,-49.72933260596622,-49.746927173268176,-49.76504083494703,-49.78365993062451,-49.802251705545274,-49.82080249933102,-49.83888884025322])
        expected['lonSH'] = np.array([103.36175814380154,103.36567867238513,103.36957188021204,103.37345825784978,103.37460572963033,103.37849893745724,103.39357999514463,103.40861324150782,103.42090075182468,103.4360432812146,103.45111750871281,103.4781582276369,103.50235075767708,103.52937781622282,103.55640487476856,103.5834319333143,103.60580763303527,103.63106567258598,103.65634420270419,103.6816705441466,103.70414186651594,103.70188790408983,103.6996407718529,103.69743462075098,103.69229148830597,103.6900989975824,103.67140476982406,103.65273103263326,103.63109982353183,103.6124055957735,103.59371819820434,103.57301589483004,103.54941076105847,103.52874260863001,103.5081086071474,103.4874746056648,103.46007871690388,103.4356539604319,103.41118139263575,103.38667467389375,103.35914901153859])
        expected['rhoSH'] = np.array([6371.1965822219845,6371.1965822219845,6371.196202468872,6371.196961975097,6371.197721481323,6371.198101234436,6371.198101234436,6371.1965822219845,6371.197721481323,6371.199240493775,6371.197721481323,6371.197721481323,6371.197341728211,6371.197721481323,6371.197721481323,6371.197721481323,6371.195822715759,6371.1965822219845,6371.1984809875485,6371.198860740661,6371.197341728211,6371.196961975097,6371.198101234436,6371.198860740661,6371.196961975097,6371.197341728211,6371.198860740661,6371.198860740661,6371.197341728211,6371.196961975097,6371.196961975097,6371.197341728211,6371.197341728211,6371.196961975097,6371.197341728211,6371.196961975097,6371.196961975097,6371.196961975097,6371.197341728211,6371.197721481323,6371.197721481323])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_60N_90_30000(self):
        """Test for latitude = 60, longitude = 90, rho = 30000"""
        lat = 60
        lon = 90
        rho = 30000

        expected = {}
        expected['latNH'] = np.array([78.86104234114536,78.86351401585125,78.86594641696942,78.86842236054356,78.87146179472421,78.8739351769774,78.87337424769181,78.87282783255822,78.8728978419972,78.87236508724195,78.87182635607117,78.85209735465358,78.83303088158549,78.81333603111375,78.79364971837849,78.77401633960929,78.7474904461939,78.72031739235464,78.69314519228904,78.66597469977073,78.63944112239253,78.61110352129978,78.5827889720955,78.55439672948941,78.526700312405,78.49828928677869,78.46841574689634,78.4385089098418,78.40931326623458,78.37942606597389,78.34952093646663,78.31319372159228,78.27761697375297,78.24136232963855,78.20516488835842,78.16898366877757,78.13804803447928,78.10648060768278,78.07492257239639,78.04346784372119,78.01276358208104])
        expected['lonNH'] = np.array([87.97495386840694,87.96924383026081,87.96377284873563,87.95819258418372,87.95634160291866,87.95078182893427,87.94880107407496,87.94692960224238,87.94901280993923,87.94716182867415,87.94533816816576,87.95450428203192,87.96770703769755,87.97676386853699,87.98586168051145,87.99496632267507,88.02370775870249,88.04828277933619,88.0727894980782,88.09718693379348,88.1259966717126,88.16697097654351,88.20796577194191,88.24886494469196,88.29417641964582,88.33487751690993,88.38453982236508,88.43416114668523,88.48830405623592,88.53749507863836,88.58663145952742,88.62307734893862,88.6641472764179,88.7002721469381,88.73613747026984,88.77181154830481,88.79850392758122,88.82010781592598,88.8415136287848,88.8628306491844,88.88911321711062])
        expected['rhoNH'] = np.array([6371.2,6371.199620246887,6371.199620246887,6371.198860740661,6371.2,6371.199240493775,6371.199620246887,6371.199240493775,6371.2,6371.2,6371.199620246887,6371.199620246887,6371.198860740661,6371.199620246887,6371.199240493775,6371.2,6371.2,6371.199240493775,6371.200759506225,6371.2,6371.2,6371.199620246887,6371.2,6371.2,6371.199620246887,6371.199620246887,6371.2,6371.199620246887,6371.199620246887,6371.2,6371.199620246887,6371.2,6371.2,6371.199620246887,6371.2,6371.199240493775,6371.2,6371.199620246887,6371.199620246887,6371.2,6371.199620246887])
        expected['latSH'] = np.array([-58.271604314091036,-58.2574248413741,-58.243122425252096,-58.22875170723839,-58.210296536101,-58.196035101114006,-58.19088513847984,-58.185776156980666,-58.17661004311449,-58.17140543896696,-58.16628279708945,-58.16144702315708,-58.152226267777564,-58.14728121081848,-58.14234981423772,-58.13748671954866,-58.14378415396342,-58.15439826793363,-58.16512166493055,-58.175940684575835,-58.18286649639424,-58.197606044623114,-58.21238657398703,-58.22719442410761,-58.238054424887935,-58.2530261995486,-58.27581171061976,-58.2986518632043,-58.31770809098862,-58.34063020584318,-58.363415716914346,-58.3954766248784,-58.42337111744874,-58.455240780116014,-58.487151423918306,-58.51908938847728,-58.545576862078605,-58.57610780766856,-58.60648848909676,-58.63695113279502,-58.66354788942306])
        expected['lonSH'] = np.array([119.45166209235725,119.44677167691152,119.44164903503402,119.43622586483303,119.38542291778647,119.38021831363892,119.38677529524213,119.39303174852186,119.3535532551192,119.3599053310473,119.3660115201653,119.36918072794019,119.32617785692578,119.32938804583569,119.33212012150369,119.33463363111827,119.29503219431052,119.30316011942284,119.31169785588536,119.32044049802298,119.28626223141623,119.27036155102844,119.25429694610057,119.23813671852432,119.17976592187739,119.16435701510984,119.13743240940165,119.11033021877505,119.04163217610305,119.01495345720498,118.98811081376684,118.95890492487585,118.88847201415469,118.8595666535872,118.83036076469622,118.80078604559006,118.72331804002378,118.68683116947757,118.64968860077104,118.6124367490378,118.5345589321213])
        expected['rhoSH'] = np.array([6371.199240493775,6371.199620246887,6371.199240493775,6371.199240493775,6371.199620246887,6371.199620246887,6371.198860740661,6371.199620246887,6371.199620246887,6371.199240493775,6371.199620246887,6371.199240493775,6371.199240493775,6371.199620246887,6371.199240493775,6371.200759506225,6371.199240493775,6371.199240493775,6371.2,6371.199620246887,6371.199240493775,6371.2,6371.2,6371.199620246887,6371.199240493775,6371.199620246887,6371.199240493775,6371.199620246887,6371.199620246887,6371.2,6371.199240493775,6371.2,6371.199620246887,6371.199240493775,6371.199620246887,6371.2,6371.199240493775,6371.2,6371.199620246887,6371.199240493775,6371.2])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_90N_90_30000(self):
        """Test for latitude = 90, longitude = 90, rho = 30000"""
        lat = 90
        lon = 90
        rho = 30000

        expected = {}
        expected['latNH'] = np.array([85.85865951139581,85.86528650243801,85.87190196753599,85.87851871329444,85.88420015002342,85.8908100655927,85.90044148609607,85.91007376037308,85.91877072562062,85.92836287253625,85.9379588614333,85.96213773109514,85.98538257238799,86.00949442081861,86.03358236358713,86.05763700918344,86.08356654170693,86.1103968054272,86.13721853141102,86.1640359885266,86.18989380406381,86.21774176597042,86.2455671028754,86.27336896100512,86.30023209501078,86.32797290832478,86.3591271086765,86.39022794817534,86.4203657310012,86.45135792780354,86.48229420243206,86.52514318074671,86.56698299861151,86.60962258893943,86.65214841392898,86.694575414619,86.73572773125514,86.77764396186127,86.81943212642047,86.86104868247676,86.90162747666605])
        expected['lonNH'] = np.array([264.32083499216316,264.29329566942965,264.2659749127496,264.2384082692594,264.21455724867775,264.1870998882143,264.14551769654724,264.104126750177,264.06604161536495,264.0240769331044,263.98205760933047,263.83900612735374,263.69863207953165,263.5525753143201,263.40509786976116,263.2560904628282,263.09041739432035,262.91824198572266,262.7439901996173,262.5673068661674,262.39215349509163,262.2075744629612,262.0200447891093,261.829564473536,261.6406960826068,261.4440412760238,261.226103599987,261.0038765651515,260.7826877190698,260.55292015539055,260.3186719876158,260.0591247991553,259.79821157286085,259.5255777419506,259.24644157095054,258.96017468245697,258.6797817566496,258.3867119997427,258.0864295630723,257.77827874847793,257.4688984998331])
        expected['rhoNH'] = np.array([6371.2,6371.2,6371.199240493775,6371.199240493775,6371.2,6371.2,6371.199240493775,6371.199240493775,6371.2,6371.199240493775,6371.199620246887,6371.198860740661,6371.199620246887,6371.2,6371.199620246887,6371.199620246887,6371.198860740661,6371.199620246887,6371.2,6371.199240493775,6371.199620246887,6371.2,6371.2,6371.2,6371.2,6371.2,6371.2,6371.2,6371.199620246887,6371.199240493775,6371.2,6371.199620246887,6371.2,6371.199240493775,6371.2,6371.199620246887,6371.2,6371.199620246887,6371.199620246887,6371.199620246887,6371.2])
        expected['latSH'] = np.array([48.18526771248012,48.19166076954325,48.19770890205329,48.20333014774022,48.14152376594077,48.1477802192205,48.15184076668208,48.155423200901744,48.09146872460833,48.09570002679916,48.099562498774795,48.10218870651067,48.03728141882804,48.040600890764665,48.04341151360812,48.04581915529055,47.979409225990516,47.9809630940267,47.98201494315888,47.98257501867082,47.91573820254766,47.91704276867913,47.91777018382574,47.918009240446686,47.8512475564044,47.852056933821046,47.85141831113365,47.8502230280289,47.78217385332806,47.78152498535691,47.78046972113014,47.77903196630985,47.71076422555558,47.709855810395965,47.70833609330564,47.706375829013844,47.63893795624372,47.63846667319099,47.63764022030142,47.636236616426984,47.56866213987346])
        expected['lonSH'] = np.array([10.431394457070926,10.388850062504563,10.34621260661076,10.303371952589146,10.3727837500294,10.330283751692642,10.279889762222643,10.229336117080793,10.29091197999575,10.240718627332619,10.19039720862255,10.133042402614661,10.187670255596423,10.130707331692163,10.073583898342408,10.016304224415387,10.06012415680925,9.992278180236221,9.92441000554839,9.856370222357661,9.900196131167048,9.834417140591594,9.768539112273174,9.702519357529479,9.74821417685051,9.682528247602496,9.613475888867315,9.544244237666419,9.586760457702455,9.517892514074864,9.448996395916945,9.37154461204994,9.405763006018057,9.328597236322546,9.251353773225224,9.174047130878082,9.212407180804165,9.139271222718962,9.066014882549636,8.992694509356841,9.031144205515782])
        expected['rhoSH'] = np.array([327573.64975585934,327586.94415283203,327599.7767700195,327612.51217041013,327580.94101562497,327594.11389160156,327606.21738281247,327618.0292236328,327585.5102050781,327597.8081298828,327609.7414916992,327621.0429443359,327587.4302368164,327598.82890625,327609.93592529296,327620.8728149414,327584.87829589844,327593.8951538086,327602.32871093747,327610.2518798828,327573.4553222656,327582.3992675781,327590.71130371094,327598.5858642578,327561.9108276367,327570.1742553711,327577.3439941406,327583.9790405273,327546.30753173825,327553.3314453125,327559.9907958984,327562.98021240236,327521.7116821289,327525.2357910156,327527.98216552736,327530.1452392578,327488.8037963867,327492.2549926758,327495.12288818357,327497.6262207031,327455.6042602539])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_90S_180_30000(self):
        """Test for latitude = -90, longitude = 180, rho = 30000"""
        lat = -90
        lon = 180
        rho = 30000

        expected = {}
        expected['latNH'] = np.array([-6.744793819298252,-6.730306988068648,-6.716284609702612,-6.702583250227576,-6.756200235212177,-6.741665592658379,-6.732478988224713,-6.723674874384571,-6.782373520111662,-6.772749783571115,-6.763570009326614,-6.757060839047597,-6.818184201930038,-6.810944201409825,-6.8040388801589415,-6.797638992906641,-6.864390431665171,-6.862641903237645,-6.861187072944432,-6.8602854879739965,-6.9274535682719005,-6.925110813386581,-6.923246171743173,-6.921886964098334,-6.9886657236135505,-6.986562025349187,-6.987593383913861,-6.989034553828731,-7.058832256957089,-7.05955625700912,-7.060744709924691,-7.066352295233273,-7.1403915458362235,-7.145329772606132,-7.150609508834549,-7.156456150764086,-7.22965528809911,-7.2334460430884775,-7.23769442075222,-7.242420911657874,-7.315954728262227])
        expected['lonNH'] = np.array([350.3510837397057,350.3288719645248,350.3067148308573,350.28447573491974,350.3770111377951,350.35485400412756,350.34234109756807,350.329882832522,350.43236299082884,350.4199047257827,350.4075284230067,350.3975563468185,350.50271393928,350.49287846687514,350.48304299447034,350.47315288055216,350.59126051168005,350.5943204364282,350.5972710781496,350.60035832365446,350.7186572000791,350.7172365207317,350.71581584138437,350.7144224827937,350.8282953966361,350.82703864182884,350.8279402267993,350.8287598494997,350.9452009144701,350.9461844617106,350.9471133674377,350.95541887746845,351.07931850901247,351.0877059813132,351.0959022083172,351.10423503910465,351.2237360288232,351.2274516517317,351.2310853123701,351.2348009352786,351.3544385287806])
        expected['rhoNH'] = np.array([292487.18420410156,292480.06307373045,292473.2822021484,292466.9388061523,292520.0677856445,292513.0438720703,292511.31827392575,292510.2974975586,292569.08935546875,292566.99919433595,292565.39511718747,292564.8604248047,292624.6973632812,292623.43354492186,292622.8259399414,292622.4856811523,292690.14857177733,292697.002355957,292703.8561401367,292711.56057128904,292779.73385009763,292782.82048339845,292786.49041748047,292790.52491455077,292855.12547607423,292858.69819335936,292862.7569946289,292867.4963134765,292933.04473876953,292937.07923583983,292941.5512084961,292950.68958740233,293021.0502441406,293029.67823486327,293038.8166137695,293048.7327270508,293116.1525756836,293121.69393310545,293127.55124511715,293134.1619873047,293201.970703125])
        expected['latSH'] = np.array([-78.96700919733797,-78.94655961096296,-78.92608270383127,-78.90552383442952,-78.88588021037657,-78.8652120579481,-78.84998073609898,-78.83470843311483,-78.82033771510112,-78.80494246871191,-78.78953356194435,-78.77495793825557,-78.76129755991553,-78.74663997395669,-78.73194140686283,-78.7171881982556,-78.70512608418136,-78.69208042286661,-78.67900744079523,-78.66586615683212,-78.65366743897448,-78.64256155138403,-78.6314283430369,-78.62028147431144,-78.6100908320698,-78.5989029822093,-78.58878064185936,-78.57864464113106,-78.56947852726489,-78.55930154540158,-78.54911090315991,-78.53949399680855,-78.53086063769763,-78.52118908983292,-78.51151754196817,-78.50181867334675,-78.49710584281945,-78.4913548235383,-78.48557648350047,-78.47979814346263,-78.47498969028695])
        expected['lonSH'] = np.array([136.9063334597299,136.89589693067813,136.88544674124802,136.87499655181787,136.8688903626999,136.85842651289144,136.88402606190064,136.9095709693965,136.93966478287956,136.96533263378046,136.990863880898,136.99651927753075,137.00672358015075,137.01241995791855,137.01802071303794,137.02373075118408,137.04442622436923,137.0606274330805,137.07688328330514,137.09311181277306,137.11379362557986,137.1020593605858,137.09040705786174,137.07876841551604,137.07139181121244,137.05968486697503,137.0382380729812,137.01669565633898,136.9996065230356,136.9781324082851,136.95672659542626,136.91793112094058,136.8835342882804,136.84477979492974,136.80607994309247,136.76722982709342,136.70970597390357,136.64774249775323,136.58575170084617,136.52365162091243,136.4660321450742])
        expected['rhoSH'] = np.array([6371.1984809875485,6371.198860740661,6371.198101234436,6371.198101234436,6371.198860740661,6371.198860740661,6371.1984809875485,6371.1984809875485,6371.199240493775,6371.1984809875485,6371.1984809875485,6371.198101234436,6371.198860740661,6371.198860740661,6371.198860740661,6371.199240493775,6371.198101234436,6371.198860740661,6371.2,6371.1984809875485,6371.199240493775,6371.199620246887,6371.199240493775,6371.199240493775,6371.199620246887,6371.199240493775,6371.199240493775,6371.199240493775,6371.199240493775,6371.198860740661,6371.199240493775,6371.2,6371.199620246887,6371.198860740661,6371.199240493775,6371.1984809875485,6371.199240493775,6371.198860740661,6371.199240493775,6371.198860740661,6371.199240493775])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_60S_180_30000(self):
        """Test for latitude = -60, longitude = 180, rho = 30000"""
        lat = -60
        lon = 180
        rho = 30000

        expected = {}
        expected['latNH'] = np.array([-77.51865392345843,-77.35572659099694,-77.18010876705759,-76.99167750823526,-76.93147622089077,-76.71601107333356,-76.46953686694448,-76.19193065831848,-76.05748521469596,-75.69223401864033,-75.23413323100758,-74.64485183017555,-74.11351775426195,-71.85947336588768,32.51854179433088,36.67431233821719,37.96499269510699,39.66945957229451,40.935011663227826,41.96048601992979,42.07366566957148,42.86317065082784,43.5988537414245,44.281688243318186,44.21548663478784,44.86210747370212,45.463468064081304,46.01354417907745,45.878419131632505,46.41892273650688,46.45859930539548,46.95488085048861,46.688527378520206,46.974200040555985,46.77351542236267,46.46461670205426,45.1011094531392,42.77196030465149,-13.98581886788726,-17.27408367019568,-19.40905737076909])
        expected['lonNH'] = np.array([4.074051599335342,3.538525281375203,2.9875817323544647,2.4076062508231755,2.472939571555286,1.8181771471503536,1.1217865340231918,0.3547531953012923,0.20020735872506001,359.2492083035882,358.11665365617336,356.74670895396554,355.7706476008141,351.8432888280567,230.22442137243274,225.34975634292968,224.76936784839702,224.32972223190163,224.1927769390429,224.17366606974517,224.13709723692892,224.17128916391403,224.23726879129634,224.3233974767302,224.25726758518613,224.35791725279543,224.45840299586467,224.55617032364424,224.45355356155397,224.55914828612237,224.48672096016355,224.57958421211904,224.42531755952513,224.45453710879445,224.31327513638024,224.15256078520983,223.69141373320727,223.14543573171312,277.24789690213936,280.19356624586914,280.9509249417968])
        expected['rhoNH'] = np.array([259288.085546875,259142.33326416014,259027.3014892578,258892.3645751953,258814.8341796875,258627.0356323242,258472.04775390626,258272.85053710936,258092.2217285156,257858.41533203123,257560.76180419922,257248.72019042968,256921.36693115233,255919.01314697266,77215.97208251953,67548.02290344238,64090.97537841797,59281.781958007814,55625.51898803711,52668.196179199214,52366.62967529297,50121.298382568355,48073.07110748291,46217.952847290035,46410.69426116943,44692.23243713379,43143.04936065674,41761.92678375244,42118.92812805175,40784.266065979005,40685.7550704956,39511.03286743164,40180.05455932617,39504.8899810791,39981.893309021,40711.6785369873,44108.381773376466,50260.315364074704,99333.6683227539,100761.10255126953,100429.96391296387])
        expected['latSH'] = np.array([-68.07565784872733,-68.05848675315394,-68.04132931795885,-68.02411724125042,-68.00646803243512,-67.98918765383499,-67.97310938852877,-67.95701746284422,-67.94050206543113,-67.92434183785488,-67.9081679499003,-67.89288198653782,-67.87713157031175,-67.86181828619257,-67.84642303980337,-67.83102779341417,-67.81732643393912,-67.80402122543595,-67.79070235655442,-67.77734250653788,-67.76357284517113,-67.756537750326,-67.74948899510255,-67.74246756063579,-67.73496801292711,-67.72789193694697,-67.72281027620448,-67.71775593621868,-67.71225080374765,-67.70718280338349,-67.70207382188434,-67.69983351983657,-67.69719706681693,-67.69495676476916,-67.69270280234306,-67.69047616067365,-67.6903258965119,-67.69057178332201,-67.69084499088882,-67.69111819845563,-67.69094061353721])
        expected['lonSH'] = np.array([160.51139892940228,160.48231598391635,160.45317839691708,160.42401348916113,160.39572284561893,160.3665306171063,160.3548236728689,160.34306208711814,160.33210646368943,160.3202902364253,160.30846034878286,160.2829837431787,160.25825845838327,160.2326725697524,160.20710034149985,160.18147347173397,160.16797701793402,160.15375656408207,160.13948146871672,160.12522003372976,160.11155965538973,160.09116471052806,160.0707697656664,160.0503201792914,160.03049897032002,160.0100220631883,159.9897500617317,159.96938243762673,159.94960220979038,159.92920726492872,159.90883964082374,159.8854803938623,159.86258559976443,159.83917171128962,159.81570318130144,159.79219367017828,159.76249600766707,159.73233389229227,159.70207615426912,159.6717637747326,159.64182022541127])
        expected['rhoSH'] = np.array([6371.199240493775,6371.2,6371.199620246887,6371.199240493775,6371.199620246887,6371.199620246887,6371.1984809875485,6371.199620246887,6371.2,6371.198860740661,6371.2,6371.198860740661,6371.2,6371.199620246887,6371.199620246887,6371.199620246887,6371.1984809875485,6371.2,6371.2,6371.2,6371.199620246887,6371.2,6371.199620246887,6371.198860740661,6371.199620246887,6371.2,6371.2,6371.199240493775,6371.199620246887,6371.199240493775,6371.200759506225,6371.2,6371.2,6371.2,6371.2,6371.199620246887,6371.199240493775,6371.199620246887,6371.2,6371.2,6371.199240493775])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_30S_180_30000(self):
        """Test for latitude = -30, longitude = 180, rho = 30000"""
        lat = -30
        lon = 180
        rho = 30000

        expected = {}
        expected['latNH'] = np.array([67.06888124856384,67.07005433355378,67.07108227702388,67.07238342806076,67.07526235279593,67.07634664532667,67.07911116439323,67.08143001361644,67.08593793846865,67.0885214575222,67.09091031618442,67.0882055612731,67.08685318381744,67.08399474964978,67.08075382488862,67.07777927750507,67.08381374963678,67.08775306124059,67.09184092945884,67.09579560898827,67.10140831693873,67.10424967563345,67.10645241164079,67.10897104389723,67.11297182720357,67.1151523650961,67.12242993165674,67.12934720573867,67.13822132901781,67.14476977288456,67.15124137712314,67.16945578409228,67.18899012511851,67.20666153204863,67.22389068422999,67.24105324206694,67.25543249781711,67.26813835722062,67.2801458297815,67.29224721744347,67.30582392596617])
        expected['lonNH'] = np.array([210.7167727254727,210.70401393210312,210.69124147835518,210.6785509868773,210.6580740797456,210.6453426071327,210.61406034073406,210.58265513093033,210.5436684111479,210.51233150323588,210.48096727456718,210.41666787372068,210.3445957175987,210.28035095826556,210.21602423666238,210.15187509997762,210.0411850542884,209.93793991479447,209.83465379416555,209.73129937164492,209.62010389195711,209.49397761874366,209.36756447758506,209.24117865718316,209.1068971381007,208.98012882710526,208.82524745748606,208.67010654067838,208.50715188746022,208.351587498924,208.19588650660438,208.01013268193674,207.8163055736701,207.63000533386884,207.4433772449874,207.25659889194424,207.077169822448,206.90554082898393,206.73376157135812,206.56207793638066,206.38255324423605])
        expected['rhoNH'] = np.array([6371.1984809875485,6371.198101234436,6371.1965822219845,6371.199240493775,6371.197721481323,6371.1965822219845,6371.1984809875485,6371.196202468872,6371.198101234436,6371.197721481323,6371.196202468872,6371.199240493775,6371.1965822219845,6371.199620246887,6371.196961975097,6371.1984809875485,6371.198101234436,6371.196202468872,6371.198101234436,6371.198101234436,6371.1965822219845,6371.2,6371.197341728211,6371.198101234436,6371.196961975097,6371.198101234436,6371.198860740661,6371.1965822219845,6371.1984809875485,6371.196961975097,6371.196961975097,6371.199240493775,6371.197341728211,6371.197341728211,6371.196961975097,6371.198101234436,6371.1965822219845,6371.2,6371.196961975097,6371.197721481323,6371.197721481323])
        expected['latSH'] = np.array([-58.30727156193686,-58.29250469295127,-58.27771050320902,-58.262916313466775,-58.24783525577939,-58.2329864245238,-58.21903917823863,-58.205050950818446,-58.1908441573448,-58.176828609167956,-58.162813060991084,-58.14840136184236,-58.13378475701853,-58.119332076734764,-58.10485207569434,-58.090358414275585,-58.07966233803535,-58.069198488226874,-58.058679996905056,-58.04816150558324,-58.037438108586315,-58.035389051835324,-58.033339995084305,-58.03130459871164,-58.02905063628555,-58.027001579534556,-58.027001579534556,-58.027001579534556,-58.026769353102765,-58.026769353102765,-58.026769353102765,-58.02974731558089,-58.03256135351893,-58.03555297637541,-58.03854459923187,-58.04154988246668,-58.04590754315714,-58.050470109522706,-58.05505999664496,-58.05963622338888,-58.06400754445767])
        expected['lonSH'] = np.array([164.3179999576338,164.29276923883975,164.2675248596674,164.24226682011667,164.21774644099634,164.1924474203106,164.17802206078355,164.16361036163482,164.14990900215977,164.135456321876,164.12096266045725,164.09477571517942,164.06927178881858,164.0430302020274,164.01676129447952,163.99045140579665,163.97856687664083,163.96591736629796,163.9532678559551,163.94059102485556,163.92863819380804,163.91645313632873,163.9042680788494,163.8920420402351,163.88055366205114,163.86831396305848,163.8610876229166,163.85386128277474,163.84738626344156,163.840132602543,163.83287894164445,163.82715524312,163.8221418842692,163.8163772046097,163.81061252495022,163.80482052453405,163.79329116521507,163.78099682470904,163.76864784268966,163.75628520029193,163.74466021832455])
        expected['rhoSH'] = np.array([6371.1984809875485,6371.199240493775,6371.199240493775,6371.199240493775,6371.198860740661,6371.199240493775,6371.198860740661,6371.199240493775,6371.199620246887,6371.199620246887,6371.198860740661,6371.1984809875485,6371.199240493775,6371.2,6371.198860740661,6371.199240493775,6371.199620246887,6371.198860740661,6371.2,6371.199240493775,6371.2,6371.199620246887,6371.199240493775,6371.199620246887,6371.199620246887,6371.199620246887,6371.199620246887,6371.199240493775,6371.198860740661,6371.1984809875485,6371.198860740661,6371.1984809875485,6371.198860740661,6371.198860740661,6371.1984809875485,6371.199240493775,6371.198860740661,6371.1984809875485,6371.197721481323,6371.1984809875485,6371.197721481323])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_0N_180_30000(self):
        """Test for latitude = 0, longitude = 180, rho = 30000"""
        lat = 0
        lon = 180
        rho = 30000

        expected = {}
        expected['latNH'] = np.array([64.3821392536274,64.38469545192429,64.38727384833597,64.38985224474764,64.39250918833477,64.39511319795585,64.39689075468735,64.39869221708094,64.40059271721749,64.40230367960457,64.40397366085665,64.39872295293219,64.3935951884128,64.38836155596128,64.38319281030688,64.37800015899037,64.37524759275486,64.37239428122909,64.36943168667659,64.36629150720569,64.36319913905896,64.35741226128467,64.35159123256452,64.34575995856062,64.34000723173219,64.33400691054632,64.33069939144075,64.3273389383691,64.32399556077038,64.32051045674638,64.3169519281888,64.32252023990966,64.32789218369187,64.33307117463004,64.3381118542375,64.34302276025075,64.34502400567756,64.34686815675346,64.34825127006039,64.34958144940124,64.35091845893128])
        expected['lonNH'] = np.array([198.8234736067562,198.81921156871414,198.81497685142872,198.81075579452164,198.8057560960492,198.80154869952048,198.78645398145474,198.7713865841457,198.75559518678463,198.74048680834056,198.72540575065318,198.68646001200577,198.64683125444134,198.60796747806398,198.56918566395663,198.53041751022764,198.4565421841648,198.38339085815394,198.31019855100809,198.23695160234888,198.16292601212427,198.06772683547266,197.97250033806432,197.87730116141267,197.78137798470902,197.68613782692236,197.56568061072002,197.4452643756527,197.324110480155,197.20372156584438,197.08331899115538,196.94249415084806,196.8009043293537,196.66013413055973,196.5194049129008,196.37877131789023,196.25524051656137,196.13261130020297,196.01000940460125,195.8876124146746,195.7646416888577])
        expected['rhoNH'] = np.array([6371.195063209533,6371.1946834564205,6371.194303703308,6371.1946834564205,6371.195063209533,6371.195442962647,6371.195442962647,6371.196961975097,6371.199620246887,6371.1984809875485,6371.196961975097,6371.195063209533,6371.195063209533,6371.1946834564205,6371.194303703308,6371.195063209533,6371.196202468872,6371.1984809875485,6371.199240493775,6371.197721481323,6371.195822715759,6371.1946834564205,6371.195442962647,6371.195063209533,6371.197341728211,6371.199240493775,6371.1965822219845,6371.194303703308,6371.1946834564205,6371.1965822219845,6371.199240493775,6371.198860740661,6371.196202468872,6371.1946834564205,6371.1946834564205,6371.195442962647,6371.1965822219845,6371.2,6371.196961975097,6371.195822715759,6371.1946834564205])
        expected['latSH'] = np.array([-53.08410296022305,-53.0705382045314,-53.05694612808307,-53.04332673087805,-53.02959805064634,-53.01593767230631,-53.00369797331365,-52.99144461394263,-52.97904099040991,-52.96674664990388,-52.954424988641165,-52.940559704626054,-52.92654415644918,-52.9126242309207,-52.89869064501386,-52.88470241759367,-52.87686136042652,-52.86914324666441,-52.86139781214561,-52.853652377626815,-52.845783999702945,-52.84895320747785,-52.852190717144424,-52.855387245675985,-52.858488151559186,-52.86172566122576,-52.86805041639718,-52.874402492325316,-52.88061796447002,-52.88701102153314,-52.893294795569574,-52.90226966413897,-52.911094268546606,-52.920069137116,-52.929071326442084,-52.93805985538984,-52.94766310136285,-52.95740295111929,-52.96719744238911,-52.976978273280565,-52.986677141901964])
        expected['lonSH'] = np.array([163.33524501909565,163.3112983758656,163.28732441187884,163.26333678751377,163.24026440849747,163.2162494633757,163.20237051898224,163.1885052349671,163.17555519630076,163.16166259152897,163.1477563263788,163.12185624904612,163.0968987378189,163.07095767935118,163.04501662088347,163.0190482416591,163.01173993924718,163.00344808959477,162.9951972210774,162.98690537142502,162.9795287671214,162.9736548044352,162.96773986061396,162.96183857717108,162.95685253907695,162.95091027449905,162.95346476524864,162.95600559561987,162.9594889920966,162.9619888413328,162.96457065283906,162.97140084200907,162.97920091804124,162.98603110721126,162.99284763600292,162.9996641647946,162.99853035339237,162.99644031550636,162.99428197572863,162.99213729632925,162.99090786227865])
        expected['rhoSH'] = np.array([6371.197341728211,6371.198101234436,6371.1984809875485,6371.1984809875485,6371.198860740661,6371.198860740661,6371.1984809875485,6371.199240493775,6371.199620246887,6371.2,6371.2,6371.199240493775,6371.199620246887,6371.1984809875485,6371.198101234436,6371.197721481323,6371.197341728211,6371.196961975097,6371.198101234436,6371.196961975097,6371.196202468872,6371.1965822219845,6371.196202468872,6371.196202468872,6371.1965822219845,6371.196202468872,6371.196961975097,6371.196961975097,6371.198101234436,6371.199620246887,6371.198860740661,6371.1984809875485,6371.197721481323,6371.197341728211,6371.196961975097,6371.1965822219845,6371.196202468872,6371.1965822219845,6371.1965822219845,6371.197721481323,6371.198101234436])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_30N_180_30000(self):
        """Test for latitude = 30, longitude = 180, rho = 30000"""
        lat = 30
        lon = 180
        rho = 30000

        expected = {}
        expected['latNH'] = np.array([67.73862910800779,67.74308580644121,67.74752030675984,67.75196675990952,67.75641492060649,67.76087161903993,67.7642269494697,67.76760106291968,67.77098712920072,67.77436465774528,67.7777319410061,67.77435099736695,67.77101103486281,67.76763521386553,67.76423719475345,67.76083746809408,67.75640638287003,67.75193090141639,67.74742297656417,67.7428382120838,67.73822612684674,67.73082049423917,67.72337558804385,67.71587945542976,67.70831843601856,67.7006993599994,67.69403992555864,67.68729340620597,67.680475169867,67.67351862219734,67.66649035754139,67.66635716885258,67.66612323487351,67.66574928201645,67.66522848009224,67.66458131966837,67.66377023470444,67.6628430365246,67.66182192324369,67.6607290929765,67.65953722496633])
        expected['lonNH'] = np.array([194.72288757626902,194.71843429293017,194.71395368883464,194.7094730847391,194.70480123534682,194.70034795200797,194.68771210204346,194.67511723321394,194.66229013795265,194.64972258987984,194.63710040029366,194.59517669916812,194.55310273388085,194.511247334647,194.4694055957915,194.42757751731435,194.35700800280978,194.28662973360196,194.2162651247725,194.14584587442965,194.07526269954676,193.98465341001736,193.89407144124465,193.80351679322862,193.71277089991582,193.62222991227816,193.51039239480835,193.39858219809526,193.28670369949043,193.17500278580405,193.0634111551444,192.93091914562447,192.79841347572622,192.66631761717818,192.53435836241354,192.40254937181064,192.2855072501933,192.1688612795478,192.05246119571245,191.93625235717386,191.8200571790136])
        expected['rhoNH'] = np.array([6371.196202468872,6371.196202468872,6371.195822715759,6371.195822715759,6371.196961975097,6371.195822715759,6371.196202468872,6371.195822715759,6371.196961975097,6371.196202468872,6371.1965822219845,6371.196202468872,6371.197341728211,6371.198101234436,6371.197721481323,6371.1984809875485,6371.198101234436,6371.1984809875485,6371.2,6371.199620246887,6371.198860740661,6371.198860740661,6371.1984809875485,6371.196961975097,6371.196961975097,6371.1965822219845,6371.196961975097,6371.195822715759,6371.195822715759,6371.196202468872,6371.1965822219845,6371.1965822219845,6371.196202468872,6371.196202468872,6371.1965822219845,6371.196961975097,6371.196961975097,6371.197341728211,6371.198101234436,6371.199240493775,6371.199620246887])
        expected['latSH'] = np.array([-54.8410598411821,-54.828396670460904,-54.81548761292956,-54.80257855539824,-54.78961485635355,-54.77684240260564,-54.76650149620224,-54.75629719358224,-54.746092890962245,-54.73569734304547,-54.72545205929046,-54.71389537921479,-54.70194254816727,-54.69029024544324,-54.6785013389358,-54.66669877205001,-54.663229035951645,-54.659540733799844,-54.65611197883649,-54.65257394084642,-54.64889929907295,-54.65799711104742,-54.66704028150852,-54.6760424708346,-54.68519492432242,-54.694074170243425,-54.708526850527164,-54.72308881383765,-54.737240965797895,-54.75169364608166,-54.76625560939212,-54.78401410123416,-54.80175893269785,-54.819790632106674,-54.83748082205702,-54.85540323843912,-54.873271013307885,-54.891097807041604,-54.90910218569377,-54.927106564345905,-54.944824075052935])
        expected['lonSH'] = np.array([158.01907656164295,157.99469278630602,157.97041829399578,157.94610282055055,157.92395934726136,157.8995345907894,157.88893413719754,157.87822440057894,157.86965934335976,157.85904522938955,157.84832183239263,157.82587783077997,157.80583805575517,157.78338039376416,157.7610046940432,157.7386153339439,157.74022725858802,157.73976280572447,157.73914808869915,157.73860167356557,157.7403228812364,157.7389568434024,157.7376591074601,157.73633405076112,157.7371536734615,157.73593789978926,157.74433903246836,157.7526445424991,157.7634908829011,157.77190567595855,157.78023850674595,157.7949643945965,157.8119579052515,157.82654718931863,157.84132771868255,157.85597164426306,157.86215979565108,157.86606666385634,157.86986424903486,157.87359353232168,157.87986364597975])
        expected['rhoSH'] = np.array([6371.197341728211,6371.199240493775,6371.198101234436,6371.196961975097,6371.198101234436,6371.199240493775,6371.1965822219845,6371.197341728211,6371.199240493775,6371.196961975097,6371.197341728211,6371.198860740661,6371.197341728211,6371.198860740661,6371.198101234436,6371.197721481323,6371.2,6371.197341728211,6371.198860740661,6371.198101234436,6371.197341728211,6371.1984809875485,6371.1984809875485,6371.197721481323,6371.199620246887,6371.197341728211,6371.197721481323,6371.199240493775,6371.197341728211,6371.197721481323,6371.199240493775,6371.198101234436,6371.197721481323,6371.199240493775,6371.196961975097,6371.198101234436,6371.198860740661,6371.198101234436,6371.197721481323,6371.199240493775,6371.196961975097])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_60N_180_30000(self):
        """Test for latitude = 60, longitude = 180, rho = 30000"""
        lat = 60
        lon = 180
        rho = 30000

        expected = {}
        expected['latNH'] = np.array([76.69098537390018,76.69528839307728,76.69957177546053,76.70385601161742,76.70862689875267,76.71289918207852,76.71666944650036,76.72043544205397,76.72468211217043,76.72843188602477,76.73218080610546,76.73113920225703,76.73055607485664,76.72946409836308,76.72835077752838,76.72720159820052,76.72452416404587,76.72130799872045,76.71803463056071,76.71470918220857,76.71181318200048,76.7066948089912,76.70146629918156,76.69614985068635,76.69123296825758,76.68575174144866,76.6805710429632,76.6752750850355,76.6703539337385,76.66483172579454,76.65919596595563,76.657940064922,76.65701030542124,76.65544277700671,76.65371047027847,76.65181423901015,76.65186119656069,76.65129343708594,76.65058565873319,76.6497421303707,76.64922986618295])
        expected['lonNH'] = np.array([197.2279960581546,197.21631643467387,197.20456850930145,197.19288888582074,197.1788869980222,197.16715273302813,197.14425793893025,197.1215134089941,197.09631001095676,197.07344253761553,197.05067068692273,196.96926849239452,196.88555769392684,196.80416915977696,196.72288990865383,196.64158333677398,196.52869397017201,196.41816784902286,196.3076280674954,196.19708828596788,196.08404865520419,195.95166592871098,195.81925588146112,195.68683217383293,195.5519086169685,195.41948490934027,195.2656007473399,195.1118122079879,194.95555114015633,194.8019538461011,194.64837021242417,194.4569473307454,194.2631612036138,194.07231205782531,193.8816678177119,193.69137874743535,193.509695715513,193.33097698569046,193.15258610494806,192.97456405442085,192.79421973957585])
        expected['rhoNH'] = np.array([6371.199240493775,6371.199240493775,6371.1984809875485,6371.199620246887,6371.199620246887,6371.198860740661,6371.199240493775,6371.198860740661,6371.199240493775,6371.198860740661,6371.1984809875485,6371.1984809875485,6371.199620246887,6371.199620246887,6371.199240493775,6371.199620246887,6371.198860740661,6371.199240493775,6371.2,6371.2,6371.2,6371.200759506225,6371.200759506225,6371.199620246887,6371.199240493775,6371.2,6371.199620246887,6371.199620246887,6371.199620246887,6371.199620246887,6371.199240493775,6371.199620246887,6371.198860740661,6371.199240493775,6371.199620246887,6371.199240493775,6371.199240493775,6371.198860740661,6371.198860740661,6371.198860740661,6371.198860740661])
        expected['latSH'] = np.array([55.85952141483929,55.86439133971751,56.38346522607097,56.43102041816718,56.54406346402548,56.59243144863292,56.65493792482229,56.71550804238197,56.842761296808476,56.905083357890256,56.580891844030184,57.039279499608085,57.17476654707904,57.229674437816776,57.318927934795916,57.393155015601025,57.541540875319555,57.62674748521546,57.71160917055829,57.800377724106355,57.95560060318407,58.05195749690002,58.148321220805144,58.24848936007797,58.32903436586534,58.520648492840884,58.63294704807964,58.747383452528624,58.935807881161764,59.05411017268098,59.173761426561256,59.285260849667125,59.47420095758261,59.58746598458893,59.700949577648686,59.81611339724428,60.00970486398453,60.12301770231504,60.23772389923624,60.35157973760576,60.55191601615141])
        expected['lonSH'] = np.array([189.60281384988738,189.51829708909764,190.2801090683642,190.26668091645595,190.30893246666164,190.29580484307687,190.27901623809697,190.25647661383593,190.29005382379572,190.26883925623366,189.5619283375157,190.2204541961533,190.24129993350016,190.17969162718666,190.1752656646045,190.14101909610605,190.15204302142644,190.11740030195614,190.0790966010907,190.04613410815622,190.05464452386207,190.01567146445797,189.97290081987535,189.93491130771173,189.74708110553638,189.89563771998417,189.84835915054933,189.8021597510034,189.79246088238196,189.7465756715378,189.70019868707342,189.65526970271307,189.64364472074573,189.59881135903376,189.5540462992135,189.5128192773833,189.4946236534344,189.44951708415562,189.40725187357157,189.363921153477,189.34218749153803])
        expected['rhoSH'] = np.array([247480.18200683594,246251.24017333984,258929.57430419922,258844.16934814453,258816.85142822264,258746.6365966797,258722.74556884766,258617.4354736328,258584.3817626953,258519.51385498047,247187.87540283203,258426.57459716796,258360.4914794922,257786.7908569336,258228.6898071289,258161.4157836914,258064.66076660156,258027.47534179688,257924.81440429686,257904.83635253905,257812.16444091796,257765.01429443358,257646.1424560547,257601.9817260742,254362.25627441405,257433.26197509764,257343.7739135742,257262.1118041992,257178.01927490233,257106.97810058593,257017.29560546874,256943.02197265625,256904.74285888672,256825.6569946289,256729.16932373046,256675.14108886718,256622.76553955078,256535.68359375,256480.51306152344,256390.07713623045,256353.76666259766])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_90N_180_30000(self):
        """Test for latitude = 90, longitude = 180, rho = 30000"""
        lat = 90
        lon = 180
        rho = 30000

        expected = {}
        expected['latNH'] = np.array([85.85865951139581,85.86528650243801,85.87190196753599,85.87851871329444,85.88420015002342,85.8908100655927,85.90044148609607,85.91007376037308,85.91877072562062,85.92836287253625,85.9379588614333,85.96213773109514,85.98538257238799,86.00949442081861,86.03358236358713,86.05763700918344,86.08356654170693,86.1103968054272,86.13721853141102,86.1640359885266,86.18989380406381,86.21774176597042,86.2455671028754,86.27336896100512,86.30023209501078,86.32797290832478,86.3591271086765,86.39022794817534,86.4203657310012,86.45135792780354,86.48229420243206,86.52514318074671,86.56698299861151,86.60962258893943,86.65214841392898,86.694575414619,86.73572773125514,86.77764396186127,86.81943212642047,86.86104868247676,86.90162747666605])
        expected['lonNH'] = np.array([264.32083499216316,264.29329566942965,264.2659749127496,264.2384082692594,264.21455724867775,264.1870998882143,264.14551769654724,264.104126750177,264.06604161536495,264.0240769331044,263.98205760933047,263.83900612735374,263.69863207953165,263.5525753143201,263.40509786976116,263.2560904628282,263.09041739432035,262.91824198572266,262.7439901996173,262.5673068661674,262.39215349509163,262.2075744629612,262.0200447891093,261.829564473536,261.6406960826068,261.4440412760238,261.226103599987,261.0038765651515,260.7826877190698,260.55292015539055,260.3186719876158,260.0591247991553,259.79821157286085,259.5255777419506,259.24644157095054,258.96017468245697,258.6797817566496,258.3867119997427,258.0864295630723,257.77827874847793,257.4688984998331])
        expected['rhoNH'] = np.array([6371.2,6371.2,6371.199240493775,6371.199240493775,6371.2,6371.2,6371.199240493775,6371.199240493775,6371.2,6371.199240493775,6371.199620246887,6371.198860740661,6371.199620246887,6371.2,6371.199620246887,6371.199620246887,6371.198860740661,6371.199620246887,6371.2,6371.199240493775,6371.199620246887,6371.2,6371.2,6371.2,6371.2,6371.2,6371.2,6371.2,6371.199620246887,6371.199240493775,6371.2,6371.199620246887,6371.2,6371.199240493775,6371.2,6371.199620246887,6371.2,6371.199620246887,6371.199620246887,6371.199620246887,6371.2])
        expected['latSH'] = np.array([48.18526771248012,48.19166076954325,48.19770890205329,48.20333014774022,48.14152376594077,48.1477802192205,48.15184076668208,48.155423200901744,48.09146872460833,48.09570002679916,48.099562498774795,48.10218870651067,48.03728141882804,48.040600890764665,48.04341151360812,48.04581915529055,47.979409225990516,47.9809630940267,47.98201494315888,47.98257501867082,47.91573820254766,47.91704276867913,47.91777018382574,47.918009240446686,47.8512475564044,47.852056933821046,47.85141831113365,47.8502230280289,47.78217385332806,47.78152498535691,47.78046972113014,47.77903196630985,47.71076422555558,47.709855810395965,47.70833609330564,47.706375829013844,47.63893795624372,47.63846667319099,47.63764022030142,47.636236616426984,47.56866213987346])
        expected['lonSH'] = np.array([10.431394457070926,10.388850062504563,10.34621260661076,10.303371952589146,10.3727837500294,10.330283751692642,10.279889762222643,10.229336117080793,10.29091197999575,10.240718627332619,10.19039720862255,10.133042402614661,10.187670255596423,10.130707331692163,10.073583898342408,10.016304224415387,10.06012415680925,9.992278180236221,9.92441000554839,9.856370222357661,9.900196131167048,9.834417140591594,9.768539112273174,9.702519357529479,9.74821417685051,9.682528247602496,9.613475888867315,9.544244237666419,9.586760457702455,9.517892514074864,9.448996395916945,9.37154461204994,9.405763006018057,9.328597236322546,9.251353773225224,9.174047130878082,9.212407180804165,9.139271222718962,9.066014882549636,8.992694509356841,9.031144205515782])
        expected['rhoSH'] = np.array([327573.64975585934,327586.94415283203,327599.7767700195,327612.51217041013,327580.94101562497,327594.11389160156,327606.21738281247,327618.0292236328,327585.5102050781,327597.8081298828,327609.7414916992,327621.0429443359,327587.4302368164,327598.82890625,327609.93592529296,327620.8728149414,327584.87829589844,327593.8951538086,327602.32871093747,327610.2518798828,327573.4553222656,327582.3992675781,327590.71130371094,327598.5858642578,327561.9108276367,327570.1742553711,327577.3439941406,327583.9790405273,327546.30753173825,327553.3314453125,327559.9907958984,327562.98021240236,327521.7116821289,327525.2357910156,327527.98216552736,327530.1452392578,327488.8037963867,327492.2549926758,327495.12288818357,327497.6262207031,327455.6042602539])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_90S_270_30000(self):
        """Test for latitude = -90, longitude = 270, rho = 30000"""
        lat = -90
        lon = 270
        rho = 30000

        expected = {}
        expected['latNH'] = np.array([-6.744793819298252,-6.730306988068648,-6.716284609702612,-6.702590080416741,-6.756207065401341,-6.741672422847557,-6.732478988224713,-6.723674874384571,-6.782387180490005,-6.772749783571115,-6.763576839515778,-6.757067669236761,-6.818191032119202,-6.810957861788168,-6.804045710348106,-6.797638992906641,-6.864390431665171,-6.862655563615988,-6.861200733322775,-6.860292318163161,-6.9274535682719005,-6.925110813386581,-6.923253001932338,-6.921893794287513,-6.9886657236135505,-6.986562025349187,-6.987593383913861,-6.989034553828731,-7.058839087146268,-7.059563087198285,-7.060758370303034,-7.066352295233273,-7.1403915458362235,-7.145329772606132,-7.150609508834549,-7.156456150764086,-7.22965528809911,-7.233452873277642,-7.23769442075222,-7.242420911657874,-7.3159615584513915])
        expected['lonNH'] = np.array([350.3510837397057,350.3288719645248,350.3067148308573,350.28447573491974,350.37703845855174,350.3548813248842,350.34234109756807,350.329882832522,350.43236299082884,350.4199047257827,350.40755574376334,350.39758366757513,350.50271393928,350.49290578763186,350.48304299447034,350.47315288055216,350.5912878324367,350.5943204364282,350.59729839890633,350.6003856444112,350.7186572000791,350.7172365207317,350.71581584138437,350.7144498035504,350.82832271739284,350.82703864182884,350.8279402267993,350.8287598494997,350.94522823522675,350.9461844617106,350.9471133674377,350.9554461982251,351.07931850901247,351.0877333020699,351.0959022083172,351.10423503910465,351.2237633495799,351.2274516517317,351.2310853123701,351.2348009352786,351.3544385287806])
        expected['rhoNH'] = np.array([292487.15989990236,292480.06307373045,292473.2822021484,292466.9145019531,292520.0434814453,292513.0438720703,292511.29396972654,292510.2731933594,292569.08935546875,292566.9748901367,292565.41942138673,292564.8847290039,292624.673059082,292623.40924072266,292622.8259399414,292622.4856811523,292690.14857177733,292696.9537475586,292703.8561401367,292711.5119628906,292779.73385009763,292782.7961791992,292786.49041748047,292790.50061035156,292855.12547607423,292858.69819335936,292862.73269042966,292867.4720092773,292933.06904296874,292937.0306274414,292941.5512084961,292950.68958740233,293021.0502441406,293029.7268432617,293038.8166137695,293048.7327270508,293116.1768798828,293121.66962890624,293127.55124511715,293134.1619873047,293201.970703125])
        expected['latSH'] = np.array([-78.96699553695964,-78.94655961096296,-78.92606904345291,-78.90552383442952,-78.88586654999821,-78.8652120579481,-78.84998073609898,-78.83470843311483,-78.82033771510112,-78.80494246871191,-78.78951990156602,-78.77495793825557,-78.76129755991553,-78.74663997395669,-78.73194140686283,-78.7171881982556,-78.70512608418136,-78.69208042286661,-78.67899378041687,-78.66585249645377,-78.65366743897448,-78.64256155138403,-78.6314283430369,-78.62028147431144,-78.6100908320698,-78.5989029822093,-78.588766981481,-78.5786309807527,-78.56947852726489,-78.55930154540158,-78.54911090315991,-78.53948033643019,-78.5308469773193,-78.52118908983292,-78.51151754196817,-78.50181867334675,-78.49710584281945,-78.4913548235383,-78.48557648350047,-78.47978448308427,-78.47498969028695])
        expected['lonSH'] = np.array([136.90631979935156,136.89591059105646,136.88546040162635,136.87499655181787,136.86887670232156,136.85839919213475,136.88402606190064,136.9095709693965,136.93966478287956,136.96531897340213,136.99089120165465,136.99653293790908,137.00670991977242,137.01241995791855,137.0180070526596,137.02373075118408,137.04441256399087,137.0606274330805,137.07686962292678,137.09311181277306,137.11379362557986,137.1020593605858,137.09040705786174,137.0787547551377,137.07139181121244,137.0596712065967,137.03825173335954,137.01668199596062,136.99959286265727,136.97811874790673,136.9567402558046,136.91794478131894,136.88354794865873,136.8447934553081,136.8060662827141,136.7672161667151,136.70970597390357,136.64772883737487,136.58575170084617,136.5236379605341,136.46601848469587])
        expected['rhoSH'] = np.array([6371.198860740661,6371.1984809875485,6371.198860740661,6371.1984809875485,6371.198860740661,6371.1984809875485,6371.198101234436,6371.198860740661,6371.199240493775,6371.1984809875485,6371.1984809875485,6371.1984809875485,6371.199240493775,6371.198860740661,6371.198860740661,6371.199240493775,6371.198101234436,6371.1984809875485,6371.199620246887,6371.198860740661,6371.198860740661,6371.199620246887,6371.199240493775,6371.199240493775,6371.199240493775,6371.199240493775,6371.199620246887,6371.199240493775,6371.199240493775,6371.199240493775,6371.198860740661,6371.199620246887,6371.199620246887,6371.199240493775,6371.199620246887,6371.1984809875485,6371.198860740661,6371.199240493775,6371.199240493775,6371.199240493775,6371.199240493775])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_60S_270_30000(self):
        """Test for latitude = -60, longitude = 270, rho = 30000"""
        lat = -60
        lon = 270
        rho = 30000

        expected = {}
        expected['latNH'] = np.array([59.90018961083255,59.946252406595114,59.99165267400819,60.03737396031225,60.07443798184333,60.12002607945858,60.17876912141527,60.23736189921023,60.28777894056868,60.346180473066866,60.40450004329502,60.472525312333765,60.53203333547751,60.59998688752996,60.66804972260914,60.73571982181104,60.80167212843668,60.87594019037681,60.950413157992045,61.024633408608,61.09069499826036,61.16052343723998,61.23010598940948,61.29992759819994,61.36123366864268,61.43109796611545,61.50729214140153,61.58347094876197,61.650953217761696,61.72742743080374,61.80366770986672,61.89959600921226,61.98699340228445,62.08306855069714,62.17939812365641,62.27604188531751,62.36234303302791,62.45783761536116,62.55374713168648,62.64934587440456,62.73621222026878])
        expected['lonNH'] = np.array([289.81694761658025,289.7720322925982,289.7267891195361,289.6813000596638,289.60108631805116,289.5556792204489,289.50620133010136,289.45636826991694,289.3712367921019,289.32132176964745,289.27096961508613,289.20979844087947,289.11270047163856,289.0511741275951,288.9891560099314,288.92650951486405,288.84211569747936,288.7937852789123,288.74501772823845,288.6956218001609,288.6092062467819,288.5672962060347,288.5249763539373,288.48194616216625,288.4017050997969,288.3584563419724,288.3159725653349,288.27277844902375,288.1916904431974,288.1481411570494,288.1039908142544,288.0731730007193,288.00394220329207,287.97252333311,287.94074929309113,287.90842883793863,287.83712166300364,287.8045826417977,287.7712239978914,287.73731893885144,287.66390806565215])
        expected['rhoNH'] = np.array([6371.1984809875485,6371.2,6371.197721481323,6371.199620246887,6371.1984809875485,6371.198860740661,6371.198860740661,6371.1984809875485,6371.198860740661,6371.198101234436,6371.1984809875485,6371.1984809875485,6371.198101234436,6371.1984809875485,6371.199240493775,6371.1984809875485,6371.199240493775,6371.199240493775,6371.199620246887,6371.1984809875485,6371.199240493775,6371.2,6371.199240493775,6371.198101234436,6371.198860740661,6371.1984809875485,6371.1984809875485,6371.198101234436,6371.197721481323,6371.198860740661,6371.198101234436,6371.199240493775,6371.2,6371.198101234436,6371.1984809875485,6371.199620246887,6371.1984809875485,6371.1984809875485,6371.199240493775,6371.199240493775,6371.1984809875485])
        expected['latSH'] = np.array([-80.59676063519473,-80.59717044654491,-80.59756659751679,-80.59793542773195,-80.59916486178255,-80.59946539010605,-80.59486184260547,-80.59020365359152,-80.58646070992634,-80.58178886053406,-80.57710335076342,-80.57654327525148,-80.5768574639533,-80.57628372806303,-80.5756963317944,-80.57508161476909,-80.5705053880252,-80.5650139159325,-80.5595224438398,-80.55398999061211,-80.54935912235484,-80.54817066943926,-80.546995876902,-80.54579376360809,-80.5454932352846,-80.54427746161235,-80.54420915972065,-80.54411353707226,-80.54494682015101,-80.5448375371243,-80.54478289561092,-80.54496048052934,-80.54610795230991,-80.54631285798501,-80.54651776366009,-80.5467226693352,-80.55422221704387,-80.5608884816738,-80.5675410859254,-80.57423467131201,-80.58180252091239])
        expected['lonSH'] = np.array([214.7157938430018,214.62085421353862,214.52555941423861,214.42990944510174,214.34846626943852,214.25198301722293,214.19885780585855,214.1456233114675,214.1068961388735,214.05330647464558,213.9995938670126,213.95507469400246,213.92514480505946,213.88028412259084,213.83545076087887,213.7902758897084,213.7616847178427,213.71842229963985,213.67485935311353,213.6311734631821,213.60225444223627,213.55026304227414,213.4981350385286,213.4459114121347,213.40824974905124,213.35572559433385,213.3082421192239,213.26047177616886,213.2275229436127,213.1795340345042,213.1313538800989,213.07262791361515,213.02872345763032,212.96961500055303,212.9106021661241,212.85086533164318,212.8189000463275,212.7716214768927,212.72413800178276,212.67640863986273,212.643637392225])
        expected['rhoSH'] = np.array([6371.196961975097,6371.196961975097,6371.1965822219845,6371.196961975097,6371.197341728211,6371.197341728211,6371.1965822219845,6371.196961975097,6371.197341728211,6371.196961975097,6371.197341728211,6371.196961975097,6371.1965822219845,6371.196961975097,6371.196961975097,6371.197721481323,6371.1965822219845,6371.1965822219845,6371.197341728211,6371.1965822219845,6371.196961975097,6371.1965822219845,6371.1965822219845,6371.1965822219845,6371.1965822219845,6371.1965822219845,6371.196961975097,6371.196961975097,6371.195822715759,6371.196202468872,6371.196202468872,6371.1965822219845,6371.195822715759,6371.196202468872,6371.195442962647,6371.195063209533,6371.195442962647,6371.195822715759,6371.195063209533,6371.195063209533,6371.195822715759])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_30S_270_30000(self):
        """Test for latitude = -30, longitude = 270, rho = 30000"""
        lat = -30
        lon = 270
        rho = 30000

        expected = {}
        expected['latNH'] = np.array([50.89242002020384,50.93156383433718,50.97049591260626,51.00919576444355,51.047574597389854,51.08660912849648,51.13598115091191,51.18597130544723,51.234854969337015,51.284746086129374,51.33397125947766,51.382994942245425,51.43111362494816,51.48010998695925,51.5287955753631,51.577696314725806,51.63101618648151,51.684520473344804,51.738171609275255,51.7919593489891,51.845405579244456,51.89650222442532,51.947393963931084,51.99828570343685,52.04886325424079,52.10016480509676,52.15624065818257,52.212459945240944,52.26806451527401,52.3243725947916,52.38075922148464,52.456161094826996,52.53117023229208,52.60667455847198,52.68242477146201,52.7584789278701,52.83517170696559,52.91269776913982,52.99048679359709,53.0684977992024,53.14607167270081])
        expected['lonNH'] = np.array([275.25501162686976,275.20577962333226,275.15649297828145,275.10709705020395,275.05483244267504,275.0055457976242,274.9517785484779,274.89801129933153,274.8411294839236,274.7873349140206,274.7333217780642,274.66335332020657,274.59005173003396,274.5197281023395,274.44913126707826,274.37837050727694,274.3169261255035,274.25840506469484,274.1997200793461,274.14089849021394,274.07879841028017,274.0276812745318,273.97640021424337,273.9249825501715,273.87023175378465,273.81862284441604,273.7704563503891,273.7221805733355,273.67054434321017,273.6220773208598,273.57350101548263,273.52896818209416,273.48093829185063,273.43613225089535,273.39121692691333,273.34613767839124,273.29600408988335,273.2491489921771,273.20210264917404,273.15483774011756,273.1039664911793])
        expected['rhoNH'] = np.array([6371.196961975097,6371.198101234436,6371.197721481323,6371.197721481323,6371.197721481323,6371.199620246887,6371.1965822219845,6371.2,6371.196961975097,6371.199620246887,6371.196961975097,6371.1984809875485,6371.196961975097,6371.198860740661,6371.197341728211,6371.1984809875485,6371.2,6371.1984809875485,6371.197341728211,6371.197341728211,6371.197341728211,6371.199620246887,6371.198860740661,6371.196961975097,6371.196961975097,6371.198101234436,6371.198860740661,6371.199620246887,6371.199240493775,6371.1984809875485,6371.197721481323,6371.198860740661,6371.200759506225,6371.198101234436,6371.197341728211,6371.1965822219845,6371.196202468872,6371.196961975097,6371.197341728211,6371.198101234436,6371.1984809875485])
        expected['latSH'] = np.array([-73.33450735866529,-73.34420622728672,-73.35391875628648,-73.36369958717793,-73.37348041806939,-73.3832749093392,-73.38573377744041,-73.38824728705495,-73.39080177780454,-73.39336992893246,-73.39589709892539,-73.40110170307292,-73.40637460911216,-73.41162019439474,-73.41689310043401,-73.42213868571656,-73.42148298755623,-73.42079996863924,-73.42011694972223,-73.41946125156193,-73.4188055534016,-73.42200208193316,-73.4252259312214,-73.42844978050965,-73.43171461093291,-73.43500676211286,-73.43611325275842,-73.4372334037823,-73.43836721518451,-73.43952834734341,-73.440716800259,-73.4431073664685,-73.44552525343468,-73.44795680077922,-73.45044298963711,-73.45291551811664,-73.46011453750182,-73.46736819840038,-73.47467650081231,-73.48198480322421,-73.48929310563614])
        expected['lonSH'] = np.array([236.97087242322115,236.94652962901924,236.9221595140606,236.89762547456192,236.87483996349076,236.85008735793863,236.84470516887268,236.83926833829335,236.8357712814383,236.83030713010228,236.82492494103633,236.8427653951484,236.8626002644981,236.8806866054203,236.8987729463425,236.91707785331812,236.933142458246,236.94745853474635,236.96171996973334,236.97603604623367,236.992319217215,237.00297431232022,237.01357476591207,237.0242025402606,237.03687937136016,237.0476164287354,237.07021069450983,237.09294156406762,237.1176122073497,237.14039771842087,237.16329251251875,237.18394700456886,237.20684179866674,237.22763289450026,237.24864255638724,237.26973418054422,237.30585222087527,237.34011244975204,237.37459124468225,237.40923396415258,237.44592574037387])
        expected['rhoSH'] = np.array([6371.193544197083,6371.193923950195,6371.193544197083,6371.193544197083,6371.193923950195,6371.193544197083,6371.193923950195,6371.194303703308,6371.1946834564205,6371.195063209533,6371.195822715759,6371.195822715759,6371.197341728211,6371.198101234436,6371.199240493775,6371.2,6371.197721481323,6371.196202468872,6371.195822715759,6371.193923950195,6371.193164443969,6371.193164443969,6371.193164443969,6371.192784690857,6371.192784690857,6371.193164443969,6371.1946834564205,6371.1946834564205,6371.196202468872,6371.197721481323,6371.199620246887,6371.198860740661,6371.1965822219845,6371.194303703308,6371.193544197083,6371.192404937744,6371.192025184631,6371.192784690857,6371.192404937744,6371.193923950195,6371.195063209533])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_0N_270_30000(self):
        """Test for latitude = 0, longitude = 270, rho = 30000"""
        lat = 0
        lon = 270
        rho = 30000

        expected = {}
        expected['latNH'] = np.array([49.91934004462505,49.95241865077542,49.98547676635828,50.01850073099529,50.05155543148357,50.08451450932347,50.125867889653314,50.1669378171326,50.20809312197651,50.249163049455795,50.29024322221884,50.329089923123284,50.36801858629777,50.40695407966143,50.44592030887635,50.48490019846962,50.525857427827596,50.566602921321305,50.60748843369301,50.64845932342933,50.68961462827324,50.728502310312706,50.76748219990597,50.80644159893172,50.845360016822454,50.884268189429434,50.92669390945897,50.96929038421775,51.01209517974622,51.05504340924726,51.09772867646525,51.15686103920464,51.216420288767154,51.27618444400476,51.336273033227954,51.396040603560145,51.458212400480186,51.5206642351562,51.583423428344865,51.64627482908732,51.70909207888393])
        expected['lonNH'] = np.array([272.8881871549202,272.84687817082,272.8055145452064,272.7641782403495,272.7222135580889,272.6808499324753,272.63440464611926,272.5878773974931,272.5406398091933,272.49405791905383,272.447421387401,272.38638681697773,272.3245872653675,272.26325216662076,272.20178046409063,272.1401721577771,272.0871152483045,272.0345774332087,271.9819030143296,271.9291193124237,271.8755159878175,271.8295624750816,271.7835543208324,271.7374095627998,271.69041786131015,271.64405453722406,271.6009150624263,271.55766630460175,271.5136798863469,271.4702672039823,271.42671791783425,271.3842068204401,271.3408214588322,271.29803715387123,271.25508892437017,271.21197677032904,271.1674166161839,271.1233755564157,271.07917057210733,271.03477434250226,270.9895038486834])
        expected['rhoNH'] = np.array([6371.196961975097,6371.1965822219845,6371.196961975097,6371.197721481323,6371.1984809875485,6371.198860740661,6371.199620246887,6371.198101234436,6371.198101234436,6371.197341728211,6371.196961975097,6371.196202468872,6371.1965822219845,6371.197341728211,6371.197721481323,6371.199240493775,6371.198860740661,6371.197721481323,6371.197341728211,6371.196202468872,6371.1965822219845,6371.197341728211,6371.199240493775,6371.198860740661,6371.197721481323,6371.196961975097,6371.196961975097,6371.1965822219845,6371.197341728211,6371.2,6371.1984809875485,6371.196961975097,6371.1965822219845,6371.196961975097,6371.2,6371.1984809875485,6371.1965822219845,6371.1965822219845,6371.198101234436,6371.199240493775,6371.196961975097])
        expected['latSH'] = np.array([-71.59306866750052,-71.60457070606282,-71.61611372576013,-71.62772504734914,-71.64025161428697,-71.6519722189027,-71.65462233230068,-71.65734074759033,-71.66113833276887,-71.66407531411195,-71.66691667280668,-71.67337803176153,-71.68089123984853,-71.68758482523515,-71.69423742948675,-71.70069878844157,-71.69888195812234,-71.69617720321102,-71.69325388224627,-71.69068573111832,-71.68865033474566,-71.6895792404728,-71.69061742922662,-71.69136875003534,-71.69337682565131,-71.69425108986508,-71.69169659911549,-71.6892787121493,-71.68751652334345,-71.68515327789063,-71.68236656070926,-71.6794432397445,-71.67701169239996,-71.67400640916517,-71.67074157874188,-71.66762701248038,-71.67102844668705,-71.67358293743663,-71.67609644705118,-71.67862361704408,-71.68206603238579])
        expected['lonSH'] = np.array([235.36162521325278,235.3558605335933,235.35017781620385,235.34441313654435,235.34138053255288,235.33542460759662,235.35329238246538,235.37110551582077,235.3915687625741,235.40902672609266,235.42700378398814,235.47120876829646,235.51820046978617,235.56235081258112,235.60671972142953,235.65207217751842,235.69821693555102,235.74146569337555,235.78567067768387,235.82911068080514,235.8765668351584,235.91563551721086,235.95467687850666,235.99456518325954,236.0366664693035,236.07669137783975,236.13007613639257,236.1834608949454,236.24047931413668,236.29386407268947,236.34858754831964,236.40246408049268,236.46062997146453,236.51508023952786,236.57040477180496,236.62551073802862,236.69616221480322,236.76410893666653,236.83238350760996,236.90087664460685,236.97251166862196])
        expected['rhoSH'] = np.array([6371.193544197083,6371.192784690857,6371.193923950195,6371.195063209533,6371.196961975097,6371.198101234436,6371.195442962647,6371.192784690857,6371.194303703308,6371.196961975097,6371.1965822219845,6371.192784690857,6371.192784690857,6371.196961975097,6371.197721481323,6371.193923950195,6371.193544197083,6371.196961975097,6371.193164443969,6371.197721481323,6371.193164443969,6371.194303703308,6371.197341728211,6371.192404937744,6371.1965822219845,6371.194303703308,6371.193923950195,6371.195822715759,6371.192784690857,6371.198860740661,6371.192404937744,6371.199620246887,6371.192784690857,6371.1965822219845,6371.192784690857,6371.193923950195,6371.193923950195,6371.193923950195,6371.193923950195,6371.193544197083,6371.194303703308])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_30N_270_30000(self):
        """Test for latitude = 30, longitude = 270, rho = 30000"""
        lat = 30
        lon = 270
        rho = 30000

        expected = {}
        expected['latNH'] = np.array([57.0215312530498,57.048175821002026,57.07480331348132,57.10140007010935,57.127768015400186,57.15430330032568,57.187504849881115,57.22070298434196,57.25369962822229,57.28680897022393,57.319911482036396,57.35587925820568,57.39170018530781,57.427630395436665,57.46350254895757,57.499436174181014,57.535356139026106,57.571457103884214,57.60760246497192,57.64380588266757,57.67986586639066,57.71490473683282,57.75006313558546,57.78525910037853,57.82033895195572,57.8556476148701,57.895399315839576,57.9352534696466,57.97499834042691,58.015033494246936,58.05511304429657,58.10933108592813,58.163351052073764,58.2176203201241,58.2720569278091,58.32659598833165,58.383570011293315,58.44089237390264,58.49835475538996,58.55598789160653,58.61356297121515])
        expected['lonNH'] = np.array([272.28857850806315,272.26052009095275,272.2323797115723,272.2043486152186,272.1752246885976,272.14713895073055,272.1133158539606,272.0794654364341,272.0444948678836,272.010644450357,271.97673939131704,271.92649651978246,271.8750515349539,271.8245627766092,271.7739647352377,271.7232300900829,271.67847869064093,271.63473815919616,271.59086102396805,271.54690192646984,271.501713394921,271.46463912810617,271.4274828990213,271.3902447076664,271.3517497615042,271.31426568333916,271.2801147374891,271.24582718785564,271.210364845685,271.1759133715114,271.14135261431113,271.10725630997445,271.0718486093171,271.03750641817027,271.0030003024834,270.96841222452645,270.9325947125189,270.8978153892652,270.8628994622281,270.8277922898942,270.7914010419964])
        expected['rhoNH'] = np.array([6371.198860740661,6371.198860740661,6371.198101234436,6371.198860740661,6371.199240493775,6371.198860740661,6371.1984809875485,6371.198860740661,6371.199620246887,6371.198860740661,6371.198860740661,6371.199240493775,6371.199620246887,6371.2,6371.2,6371.199620246887,6371.1984809875485,6371.198860740661,6371.2,6371.199240493775,6371.198860740661,6371.198860740661,6371.198860740661,6371.1984809875485,6371.198101234436,6371.198860740661,6371.198860740661,6371.198860740661,6371.198860740661,6371.199240493775,6371.199240493775,6371.200759506225,6371.199620246887,6371.198860740661,6371.1984809875485,6371.1984809875485,6371.198860740661,6371.1984809875485,6371.198101234436,6371.198860740661,6371.1984809875485])
        expected['latSH'] = np.array([-73.66996526956132,-73.67299787355279,-73.67616708132769,-73.67924066645418,-73.69410315808813,-73.69725870548467,-73.6963161393792,-73.6953872336521,-73.70627455518908,-73.70541395135368,-73.70455334751824,-73.71104202722975,-73.72933327382705,-73.73587659505193,-73.74248821816849,-73.7491818035551,-73.75914021936501,-73.75725508715408,-73.75546557759154,-73.75370338878565,-73.76383938951398,-73.7672681444773,-73.77077886171071,-73.77433056007911,-73.78958920268491,-73.7930725991616,-73.79797667498568,-73.80283976967473,-73.81939614822284,-73.8241636202635,-73.82899939419588,-73.83259207369932,-73.84763215025168,-73.85103358445835,-73.85451698093505,-73.85806867930347,-73.88056732242947,-73.89144098358815,-73.90242392777353,-73.9134068719589,-73.93583721319322])
        expected['lonSH'] = np.array([207.05028619787484,207.01711879926526,206.9837191742239,206.95064739826267,206.9550597004665,206.92094973575146,206.94051139753438,206.96019600272237,207.01777449742556,207.03734981958684,207.0571027266665,207.08878114403703,207.15847639432783,207.19012749094168,207.22205179512233,207.25429028800477,207.3633820694282,207.43414282922956,207.505149475841,207.57666155645103,207.68619046998137,207.75331756914426,207.82086814003569,207.8887328996289,207.9955160771129,208.063736006543,208.15064333354223,208.23871179270037,208.36516591499398,208.4537671289074,208.54268253152262,208.65222510543128,208.80097296517582,208.91118489762314,209.02186128293403,209.132701592785,209.2803702826407,209.39033632827787,209.50079414753532,209.6118393630614,209.76151612853306])
        expected['rhoSH'] = np.array([6371.197341728211,6371.1965822219845,6371.198860740661,6371.198101234436,6371.197341728211,6371.199240493775,6371.199240493775,6371.198860740661,6371.198101234436,6371.198101234436,6371.198860740661,6371.197341728211,6371.196961975097,6371.197721481323,6371.197341728211,6371.199240493775,6371.196961975097,6371.1965822219845,6371.196961975097,6371.196202468872,6371.199240493775,6371.199240493775,6371.198860740661,6371.197721481323,6371.196961975097,6371.1965822219845,6371.198101234436,6371.197341728211,6371.1984809875485,6371.196961975097,6371.196961975097,6371.197721481323,6371.1965822219845,6371.196202468872,6371.196202468872,6371.197721481323,6371.199240493775,6371.197341728211,6371.196961975097,6371.1965822219845,6371.197341728211])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_60N_270_30000(self):
        """Test for latitude = 60, longitude = 270, rho = 30000"""
        lat = 60
        lon = 270
        rho = 30000

        expected = {}
        expected['latNH'] = np.array([70.11249208989697,70.1292499590256,70.14596855456651,70.16268202746552,70.17847513237388,70.19514933168517,70.2164629369902,70.23772360832916,70.25806391167745,70.27929213961787,70.30047938642323,70.33132110562043,70.36125270211072,70.39206710055123,70.42285247068777,70.45363442572972,70.48399803168502,70.51523419430677,70.54650450787439,70.577774821442,70.60817770098501,70.6406142693534,70.67310206414058,70.70561376458983,70.7372358328997,70.76979192957856,70.80753213983748,70.84529967085305,70.88217586218195,70.91999291206903,70.9578321600709,71.00929592791965,71.0598956768384,71.11144311450448,71.16304519368393,71.21470020682945,71.26786469178153,71.32199052585929,71.37614026559916,71.43031220345382,71.48360816954744])
        expected['lonNH'] = np.array([269.5050032137162,269.48669830674055,269.46844804127824,269.4501431343026,269.4296525667926,269.41134765981695,269.3864857712381,269.3616238826593,269.33452169203264,269.3096324826971,269.28479791487496,269.2333529300464,269.1796130016568,269.12797677153145,269.0762039376228,269.02432182068736,268.9747892888264,268.9273877759865,268.8797676970932,268.83203833517314,268.7818227843952,268.7410602154286,268.70005175965184,268.6589067000917,268.61538473470034,268.57391182606005,268.53418744584724,268.4942718203377,268.45184268521353,268.41157188986716,268.3711644907374,268.3304019217707,268.28709852243287,268.24589882135933,268.2045625165024,268.16278907953864,268.11716341588294,268.0735321674649,268.0297096737501,267.98564129322517,267.9387588747622])
        expected['rhoNH'] = np.array([6371.2,6371.2,6371.2,6371.2,6371.2,6371.199620246887,6371.198860740661,6371.2,6371.2,6371.199240493775,6371.199620246887,6371.199620246887,6371.2,6371.2,6371.199620246887,6371.2,6371.2,6371.199620246887,6371.2,6371.199620246887,6371.199240493775,6371.2,6371.2,6371.199240493775,6371.199240493775,6371.2,6371.199620246887,6371.199620246887,6371.199620246887,6371.199620246887,6371.2,6371.2,6371.2,6371.199620246887,6371.199620246887,6371.2,6371.199620246887,6371.199620246887,6371.199240493775,6371.2,6371.2])
        expected['latSH'] = np.array([32.93367727698967,32.929780654068175,32.925675710377,32.921229257227324,32.86978427239879,32.866167687233265,32.85057778045271,32.83462587364615,32.77128269928345,32.75613333970436,32.74036584800538,32.7171534501111,32.645829199703236,32.6231529716588,32.60021036623672,32.57663255322184,32.489233452602356,32.450847789466884,32.411977182900344,32.37253967063269,32.28407506050268,32.24699396349868,32.209216187199345,32.171083241063165,32.083240178147626,32.045530703739985,32.000779304298064,31.95524926329076,31.85940121866797,31.814492724875137,31.76888072159779,31.708023736092976,31.59583104878635,31.534871610443986,31.47326330413047,31.410828544927384,31.30202363144908,31.245025702825323,31.187474528878795,31.129308637906966,31.018441007299323])
        expected['lonSH'] = np.array([329.53433371566433,329.5098816384357,329.48540224045036,329.4611960500318,329.5619003591545,329.53753024419586,329.510619298866,329.4838449573196,329.58209039834105,329.55515213225453,329.5283777907081,329.5001281283009,329.59684360694826,329.5684846615144,329.5403442821339,329.5122858650235,329.60370111687496,329.570479076752,329.53739364041246,329.5044448078563,329.5958600597078,329.56307515169175,329.5303722059457,329.49788782625313,329.5893850403746,329.55687333992535,329.52283167710203,329.48879001427866,329.57867530375603,329.54471560320275,329.5108378649195,329.4720697111905,329.5567094153853,329.5179139408996,329.4793097117107,329.44084208630517,329.5269571113607,329.4900194483293,329.4532457098379,329.41660857513,329.50280556245553])
        expected['rhoSH'] = np.array([319819.51651611325,319841.3902954101,319862.7536865234,319884.1656860351,319819.12764892576,319840.9771240234,319853.2264404297,319865.2813232422,319790.6188232422,319802.89244384767,319814.94732666016,319821.55806884763,319741.40281982423,319748.4753417969,319755.11038818356,319761.7697387695,319665.35498046875,319656.28951416013,319647.1025268555,319636.84615478513,319539.19188232423,319531.0256713867,319522.2275512695,319512.724609375,319415.3133789062,319406.3208251953,319390.69322509767,319374.36080322263,319269.4881835937,319253.30158691405,319236.2886474609,319203.3078491211,319080.76607666013,319046.66728515626,319012.15532226564,318976.5982788086,318856.8514892578,318826.3983276367,318794.87578125,318762.81854248047,318640.54411621095])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_90N_270_30000(self):
        """Test for latitude = 90, longitude = 270, rho = 30000"""
        lat = 90
        lon = 270
        rho = 30000

        expected = {}
        expected['latNH'] = np.array([85.85865951139581,85.86528650243801,85.87190196753599,85.87851871329444,85.88420015002342,85.8908100655927,85.90044148609607,85.91007376037308,85.91877072562062,85.92836287253625,85.9379588614333,85.96213773109514,85.98538257238799,86.00949442081861,86.03358236358713,86.05763700918344,86.08356654170693,86.1103968054272,86.13721853141102,86.1640359885266,86.18989380406381,86.21774176597042,86.2455671028754,86.27336896100512,86.30023209501078,86.32797290832478,86.3591271086765,86.39022794817534,86.4203657310012,86.45135792780354,86.48229420243206,86.52514318074671,86.56698299861151,86.60962258893943,86.65214841392898,86.694575414619,86.73572773125514,86.77764396186127,86.81943212642047,86.86104868247676,86.90162747666605])
        expected['lonNH'] = np.array([264.32083499216316,264.29329566942965,264.2659749127496,264.2384082692594,264.21455724867775,264.1870998882143,264.14551769654724,264.104126750177,264.06604161536495,264.0240769331044,263.98205760933047,263.83900612735374,263.69863207953165,263.5525753143201,263.40509786976116,263.2560904628282,263.09041739432035,262.91824198572266,262.7439901996173,262.5673068661674,262.39215349509163,262.2075744629612,262.0200447891093,261.829564473536,261.6406960826068,261.4440412760238,261.226103599987,261.0038765651515,260.7826877190698,260.55292015539055,260.3186719876158,260.0591247991553,259.79821157286085,259.5255777419506,259.24644157095054,258.96017468245697,258.6797817566496,258.3867119997427,258.0864295630723,257.77827874847793,257.4688984998331])
        expected['rhoNH'] = np.array([6371.2,6371.2,6371.199240493775,6371.199240493775,6371.2,6371.2,6371.199240493775,6371.199240493775,6371.2,6371.199240493775,6371.199620246887,6371.198860740661,6371.199620246887,6371.2,6371.199620246887,6371.199620246887,6371.198860740661,6371.199620246887,6371.2,6371.199240493775,6371.199620246887,6371.2,6371.2,6371.2,6371.2,6371.2,6371.2,6371.2,6371.199620246887,6371.199240493775,6371.2,6371.199620246887,6371.2,6371.199240493775,6371.2,6371.199620246887,6371.2,6371.199620246887,6371.199620246887,6371.199620246887,6371.2])
        expected['latSH'] = np.array([48.18526771248012,48.19166076954325,48.19770890205329,48.20333014774022,48.14152376594077,48.1477802192205,48.15184076668208,48.155423200901744,48.09146872460833,48.09570002679916,48.099562498774795,48.10218870651067,48.03728141882804,48.040600890764665,48.04341151360812,48.04581915529055,47.979409225990516,47.9809630940267,47.98201494315888,47.98257501867082,47.91573820254766,47.91704276867913,47.91777018382574,47.918009240446686,47.8512475564044,47.852056933821046,47.85141831113365,47.8502230280289,47.78217385332806,47.78152498535691,47.78046972113014,47.77903196630985,47.71076422555558,47.709855810395965,47.70833609330564,47.706375829013844,47.63893795624372,47.63846667319099,47.63764022030142,47.636236616426984,47.56866213987346])
        expected['lonSH'] = np.array([10.431394457070926,10.388850062504563,10.34621260661076,10.303371952589146,10.3727837500294,10.330283751692642,10.279889762222643,10.229336117080793,10.29091197999575,10.240718627332619,10.19039720862255,10.133042402614661,10.187670255596423,10.130707331692163,10.073583898342408,10.016304224415387,10.06012415680925,9.992278180236221,9.92441000554839,9.856370222357661,9.900196131167048,9.834417140591594,9.768539112273174,9.702519357529479,9.74821417685051,9.682528247602496,9.613475888867315,9.544244237666419,9.586760457702455,9.517892514074864,9.448996395916945,9.37154461204994,9.405763006018057,9.328597236322546,9.251353773225224,9.174047130878082,9.212407180804165,9.139271222718962,9.066014882549636,8.992694509356841,9.031144205515782])
        expected['rhoSH'] = np.array([327573.64975585934,327586.94415283203,327599.7767700195,327612.51217041013,327580.94101562497,327594.11389160156,327606.21738281247,327618.0292236328,327585.5102050781,327597.8081298828,327609.7414916992,327621.0429443359,327587.4302368164,327598.82890625,327609.93592529296,327620.8728149414,327584.87829589844,327593.8951538086,327602.32871093747,327610.2518798828,327573.4553222656,327582.3992675781,327590.71130371094,327598.5858642578,327561.9108276367,327570.1742553711,327577.3439941406,327583.9790405273,327546.30753173825,327553.3314453125,327559.9907958984,327562.98021240236,327521.7116821289,327525.2357910156,327527.98216552736,327530.1452392578,327488.8037963867,327492.2549926758,327495.12288818357,327497.6262207031,327455.6042602539])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_90S_0_60000(self):
        """Test for latitude = -90, longitude = 0, rho = 60000"""
        lat = -90
        lon = 0
        rho = 60000

        expected = {}
        expected['latNH'] = np.array([-12.808027877599443,-12.979076304984062,-13.164181261680582,-13.315866102768226,-12.416473623050123,-12.579223370593184,-13.213433755785545,-13.839345461136347,-13.452483546546816,-14.051245249946817,-14.629290989594168,-15.416087800844622,-15.348646512979911,-16.122042493078794,-16.846800696098015,-17.581127994144424,-17.88578858207285,-18.93506273293771,-19.853873440466174,-20.77461026134057,-21.030571600486795,-21.85780996181289,-22.639682206671765,-23.337713879468723,-23.54028362987296,-24.203331073741126,-24.965375279439442,-25.693582727989522,-25.94321248177515,-26.604374793432385,-27.240101480620496,-27.98644991160613,-28.32595129449078,-29.00697579625441,-29.66934022120556,-30.26980947189807,-30.52061401822094,-31.027072545177376,-31.534514619374306,-32.009103483663466,-32.2034770070637])
        expected['lonNH'] = np.array([355.49011807122326,355.4970029019067,355.5121112803507,355.51664652595963,355.44370010562386,355.44809874744936,355.5440765656664,355.64040955372025,355.6633863100882,355.75354480713236,355.8394139453777,355.96459765248574,356.04688777160607,356.171306497527,356.288293977631,356.4136962507924,356.56565429944686,356.7546046526461,356.9154692679782,357.08761735581925,357.2337560833008,357.3851130753083,357.52977648192916,357.6531296983396,357.78782102877227,357.90784111286774,358.05132972695134,358.1929058880674,358.3341542001032,358.46073126580194,358.5843030482658,358.7336109835223,358.8964700140921,359.0332650427891,359.17115290175326,359.2920472500625,359.43769420392385,359.5337539844109,359.635359878504,359.72912471543,359.8586251020934])
        expected['rhoNH'] = np.array([312165.0061889648,311824.7717041015,311692.6297729492,311433.15814208984,312780.4128173828,312417.08934326173,311539.70775146486,310755.4841552734,311410.6767578125,310614.34967041016,309826.0672729492,308792.7013305664,309079.7096191406,308128.07869873045,307290.410168457,306703.4151489258,306440.5895385742,305490.87864990236,304513.6311035156,303960.7591796875,303928.26446533203,303400.2557373047,302979.9389160156,302423.25123291014,302508.2187133789,302104.16140136716,301739.938671875,301588.3047729492,301536.58543701173,301349.32158203126,301264.9860107422,301117.0949584961,301077.308984375,300993.5810180664,301119.2580322265,301120.81350097654,301296.5328613281,301194.8927001953,301314.71240234375,301428.1887084961,301517.7496826172])
        expected['latSH'] = np.array([-75.09847201371281,-75.07509910637302,-75.05167155751985,-75.02817570677502,-75.01167396974029,-74.98808249634706,-74.96914921196776,-74.95016128607514,-74.93819479464926,-74.91911124610826,-74.89997305605388,-74.88188671513169,-74.8708627898113,-74.85269448661904,-74.83447154191347,-74.81620761607286,-74.80798406831215,-74.79260248230128,-74.77715259439873,-74.76167538573947,-74.75336987570873,-74.74229130887497,-74.73119908166288,-74.72012051482912,-74.71622730700221,-74.70508043827675,-74.69661100370593,-74.68816888989178,-74.68693945584118,-74.6784427005137,-74.66993228480786,-74.66355288812306,-74.66444081271516,-74.65802043489535,-74.65158639669721,-74.64516601887738,-74.64975590599963,-74.64702383033162,-74.64427809428528,-74.64153235823895,-74.64613590573953])
        expected['lonSH'] = np.array([142.56377914925147,142.54589771400438,142.52800261837893,142.51013484351017,142.51064027750877,142.49274518188332,142.50681537157357,142.52081725937208,142.5532469975513,142.56735816837656,142.58144201844513,142.57862798050706,142.59409152878797,142.59127749084993,142.58849077366858,142.58564941497386,142.61641258699558,142.628843531285,142.6414384001145,142.6538966651606,142.68463251642567,142.67400474207713,142.6632130431885,142.65239402354322,142.65993455238691,142.64926579690334,142.63264111646353,142.61582519072695,142.61739613423606,142.60083975568796,142.58417409411314,142.55827401678044,142.55061054453168,142.5247787690907,142.49889235213635,142.47296495404697,142.4479254805497,142.4047450246169,142.36135966300895,142.31798796177938,142.29262063920197])
        expected['rhoSH'] = np.array([6371.199620246887,6371.199620246887,6371.199620246887,6371.199620246887,6371.2,6371.199620246887,6371.199240493775,6371.199240493775,6371.2,6371.199240493775,6371.199620246887,6371.198860740661,6371.2,6371.2,6371.199620246887,6371.199240493775,6371.198860740661,6371.199240493775,6371.2,6371.199240493775,6371.199240493775,6371.2,6371.199620246887,6371.199240493775,6371.199620246887,6371.199620246887,6371.2,6371.1984809875485,6371.198860740661,6371.199240493775,6371.199620246887,6371.198860740661,6371.199620246887,6371.199240493775,6371.198860740661,6371.199240493775,6371.199620246887,6371.199240493775,6371.1984809875485,6371.199240493775,6371.199240493775])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_60S_0_60000(self):
        """Test for latitude = -60, longitude = 0, rho = 60000"""
        lat = -60
        lon = 0
        rho = 60000

        expected = {}
        expected['latNH'] = np.array([-0.7024942908031448,-0.6976926678166251,-0.6933145165586581,-0.6893393464617077,-0.7245489716331264,-0.7196995373224127,-0.7178075749223183,-0.716284442737404,-0.7541646718742925,-0.7518833886915104,-0.749868482886356,-0.749438180968653,-0.7887049385070526,-0.7875438063481539,-0.7867036930802414,-0.7861914288924794,-0.8284429790981847,-0.8300549037423082,-0.8318512434940146,-0.8340300738392585,-0.8764933599092188,-0.8771968693937282,-0.8782418883367455,-0.8794918129548535,-0.9213198914320202,-0.9218458159981111,-0.9237924199115639,-0.926025891770152,-0.9691107250545912,-0.9705177440236241,-0.9723140837753306,-0.9761458198997133,-1.0210748042600528,-1.0240322761706722,-1.027303936783099,-1.0308078238273168,-1.0749786571897886,-1.0769252611032414,-1.0791314122051574,-1.081624431252223,-1.1258430759388744])
        expected['lonNH'] = np.array([357.02349553989114,357.00934338793087,356.99516391521394,356.98101176325366,357.04048905054617,357.0263368985859,357.01559984121064,357.004808142322,357.0677551657128,357.05701810833756,357.046308371719,357.03704663520443,357.1016055832394,357.09239848823825,357.0831640724804,357.07390233596584,357.14305117112303,357.13840664248744,357.1336801515818,357.1288990191628,357.19812981659004,357.19195532558035,357.18575351381395,357.17944241902086,357.2472252163441,357.240996083821,357.23564121551175,357.2302317056891,357.2989980502528,357.2935885404301,357.2881517098508,357.2856655209929,357.3573278657647,357.35478703539343,357.3521369219955,357.34948680859753,357.41964651175186,357.4154117944665,357.41120439793775,357.406915039139,357.47702010078])
        expected['rhoNH'] = np.array([339794.8705078125,339791.58944091795,339788.84306640626,339786.704296875,339825.0563232422,339821.5808227539,339822.72312011715,339824.27858886716,339866.5678955078,339867.22410888673,339868.0504516601,339870.94265136716,339915.0061645508,339917.144934082,339919.5753540039,339922.5647705078,339971.5377319336,339978.4158203125,339985.48834228516,339993.14416503906,340042.38447265624,340047.73139648436,340053.27275390626,340059.1786743164,340106.8635131836,340111.96739501954,340118.48092041013,340125.50483398436,340174.52640380856,340180.40802001953,340186.8729370117,340196.5460083008,340248.48408203124,340256.9176391601,340266.03171386715,340275.41313476564,340325.35826416017,340332.09052734374,340339.33317871095,340346.8188720703,340396.8612182617])
        expected['latSH'] = np.array([-80.41959918850293,-80.4022231872544,-80.38479254449254,-80.36726627908229,-80.35598280657342,-80.33831993737977,-80.33164001237151,-80.32491910622821,-80.32449563449967,-80.31769276608634,-80.31083525615963,-80.30395042547627,-80.30345865185603,-80.29650551928097,-80.28953872632755,-80.28253095223911,-80.28463465050348,-80.28024966905633,-80.27585102723083,-80.27139774389198,-80.27346046102133,-80.26511396985558,-80.25674015793314,-80.24833902525404,-80.2464812137998,-80.23803909998566,-80.22947404276644,-80.22090898554725,-80.21888724955292,-80.21026755082039,-80.20164785208783,-80.19066490790243,-80.18626626607696,-80.17524234075654,-80.16420475505782,-80.1531398486024,-80.14947886720725,-80.13920626269555,-80.1289063374272,-80.1185654310238,-80.11482248735862])
        expected['lonSH'] = np.array([98.17487150695884,98.23977879464147,98.30455630872987,98.3691903888457,98.40939971248956,98.47430016998302,98.55294979827572,98.63153112467673,98.68594724179421,98.76532087013894,98.8446808381053,98.90475235185558,98.94060401480897,99.00129024558453,99.06194915560341,99.12234168824466,99.16773512546857,99.23799045127133,99.30818430537154,99.37827570663421,99.42436582315347,99.46292224101818,99.50153330039626,99.53987115220755,99.55401647397865,99.59283926922099,99.61466855380836,99.6364773478282,99.6340867816187,99.65616195301618,99.67812101119777,99.67656372806701,99.65064999035599,99.6493454242245,99.64793157506632,99.64633331080053,99.5763716831321,99.53130609498835,99.48583752568358,99.44036212618963,99.37038683814285])
        expected['rhoSH'] = np.array([6371.196202468872,6371.195822715759,6371.195063209533,6371.195063209533,6371.196202468872,6371.195442962647,6371.195442962647,6371.195822715759,6371.196202468872,6371.195063209533,6371.195063209533,6371.1946834564205,6371.195063209533,6371.196202468872,6371.195063209533,6371.195442962647,6371.195063209533,6371.195063209533,6371.195822715759,6371.195063209533,6371.1946834564205,6371.195442962647,6371.195822715759,6371.195063209533,6371.195442962647,6371.1946834564205,6371.195822715759,6371.195063209533,6371.195442962647,6371.195063209533,6371.195442962647,6371.196202468872,6371.195442962647,6371.195442962647,6371.196202468872,6371.195822715759,6371.196961975097,6371.197341728211,6371.196961975097,6371.197341728211,6371.1984809875485])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_30S_0_60000(self):
        """Test for latitude = -30, longitude = 0, rho = 60000"""
        lat = -30
        lon = 0
        rho = 60000

        expected = {}
        expected['latNH'] = np.array([10.680794602588477,10.684018451876724,10.686941772841493,10.689591886239455,10.649129845596306,10.652483468478778,10.654498374283932,10.656185431008922,10.614487126125994,10.61689135271385,10.619008711356543,10.620934824702488,10.579134066982007,10.581695387920774,10.583935689968527,10.585909614638666,10.5431731210019,10.54510606453701,10.54673847974864,10.548152328906838,10.505142627703265,10.508202552451436,10.510975609254459,10.513482288679853,10.471285379987506,10.474475078329903,10.477514512510567,10.480273908935246,10.437947226648674,10.441451113692892,10.444661302602796,10.447891982080222,10.405708733766218,10.409649752917318,10.413303904123268,10.416794130789157,10.374781637204407,10.379337373380807,10.383606241612057,10.38773167587074,10.345493786043392])
        expected['lonNH'] = np.array([358.17749698129984,358.16471086717354,358.1519247530473,358.13905667665097,358.1903650576961,358.1775516228132,358.1666779616545,358.15574965898253,358.20907977602195,358.1982061148633,358.18733245370464,358.1773876982731,358.23170136255305,358.2218112486349,358.21189381396,358.2019217377718,358.258858194693,358.2515362319028,358.2441596275992,358.23675570253886,358.29371948021674,358.2853046871593,358.2768079318318,358.26828385574765,358.324182123915,358.31568536858754,358.3075437830969,358.29926559382284,358.3555736733404,358.3473774463364,358.339126577819,358.3325969169725,358.3906535249176,358.38412386407106,358.37753956171116,358.3709279385946,358.4281102823259,358.4206243949956,358.41311118690857,358.40551601655153,358.4626983602829])
        expected['rhoNH'] = np.array([360267.14815673826,360263.13796386716,360259.2735961914,360255.50644531247,360287.344946289,360283.3833618164,360280.32103271486,360277.4045288086,360310.5311523437,360307.2500854492,360304.06623535155,360301.0525146484,360334.6895263672,360331.26263427734,360327.68991699215,360324.554675293,360359.2610717773,360356.63621826173,360353.5981933594,360351.11916503904,360386.11721191404,360382.447277832,360378.77734375,360375.5205810547,360409.9839355469,360406.0466552734,360402.5225463867,360398.7553955078,360433.437487793,360429.4029907226,360425.5872314453,360422.0631225586,360456.9639526367,360452.5162841797,360448.7734375,360444.8604614258,360479.5182495117,360474.87614746095,360470.4284790039,360466.0051147461,360500.881640625])
        expected['latSH'] = np.array([-75.7407556825041,-75.7348134179262,-75.72883017221326,-75.72279228498698,-75.71641288830219,-75.7103750010759,-75.71389937868761,-75.71742375629935,-75.72067492634429,-75.72430858698272,-75.72792858724284,-75.73190375733978,-75.73559205949158,-75.7396628522369,-75.74373364498223,-75.74779077734922,-75.75478489105933,-75.76218881611962,-75.7695927411799,-75.7769966662402,-75.78410006297702,-75.78466013848896,-75.78523387437923,-75.78575296875616,-75.78599885556628,-75.78657259145655,-75.78453719508389,-75.78243349681952,-75.78007025136671,-75.77804851537238,-75.77599945862138,-75.7687321373445,-75.76121892925747,-75.75397892873727,-75.7466842867037,-75.73933500315675,-75.7260707757886,-75.71303877485221,-75.69993847202412,-75.686797188061,-75.67342367766614])
        expected['lonSH'] = np.array([49.84138960010586,49.88885941483745,49.93651364467663,49.98444108208261,50.00603472514361,50.05448467202109,50.0691729938312,50.0838647307359,50.07197678648549,50.08705784417288,50.10218671318446,50.09974492055618,50.07034437127386,50.068069918280244,50.06544371054437,50.06285506884894,50.03859765201164,50.04194102961036,50.045205860033626,50.048590218767366,50.024025443417415,50.04824529421428,50.07276567333463,50.0972587316983,50.09389827862665,50.11863039361126,50.13620788544029,50.15356681121588,50.14312686706951,50.16084779287111,50.17865068094275,50.1924203423095,50.17796766202575,50.191949059256764,50.20593728667695,50.21989477824587,50.18345913411844,50.175583926005416,50.167609680149425,50.15969007580679,50.12335346942233])
        expected['rhoSH'] = np.array([6371.197721481323,6371.195442962647,6371.193923950195,6371.193164443969,6371.191265678405,6371.19050617218,6371.190126419067,6371.189746665955,6371.190885925293,6371.191265678405,6371.192404937744,6371.193164443969,6371.197721481323,6371.199620246887,6371.198101234436,6371.1965822219845,6371.192404937744,6371.191265678405,6371.191265678405,6371.189746665955,6371.189366912841,6371.189366912841,6371.189746665955,6371.188987159729,6371.191645431519,6371.192025184631,6371.194303703308,6371.195063209533,6371.199620246887,6371.197341728211,6371.196202468872,6371.195063209533,6371.191265678405,6371.190126419067,6371.189366912841,6371.188607406616,6371.188987159729,6371.188987159729,6371.189366912841,6371.19050617218,6371.193923950195])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_0N_0_60000(self):
        """Test for latitude = 0, longitude = 0, rho = 60000"""
        lat = 0
        lon = 0
        rho = 60000

        expected = {}
        expected['latNH'] = np.array([64.59375046694545,64.63297965844342,64.67236252919771,64.71158489050651,64.7498954215611,64.78896751870816,64.83363354078547,64.87768484583746,64.92112143386416,64.96540838044253,65.00932308171112,65.06073220804652,65.11130463620859,65.16243030969342,65.21339888882734,65.264406741549,65.30801579185224,65.3523266440927,65.39675190200175,65.44066148062848,65.48360971012951,65.52102548640283,65.55828929096714,65.59521158607294,65.63117423960034,65.66807262904405,65.70747257527127,65.7470757196263,65.785200128026,65.82441565914564,65.86339042609703,65.90616619332152,65.94770740385354,65.98987016160002,66.03200559858983,66.07374829970237,66.11229447228334,66.15214350344849,66.19117632700781,66.23054041474188,66.26792033252207])
        expected['lonNH'] = np.array([339.2212631664132,339.2648670940746,339.3084163802226,339.35204762864066,339.4044215191963,339.4482713336678,339.50856824366065,339.56911104046367,339.63839647940426,339.6991851630174,339.7601104504139,339.8701584583211,339.98952284425627,340.1005817201607,340.2121323696853,340.32401086829015,340.4613796328774,340.5903062836506,340.719724708044,340.84974418908433,340.98957182177287,341.11216005699623,341.23515810356986,341.3585386407369,341.49170000879553,341.615900168663,341.7391714228034,341.86271588451064,341.9962870639194,342.12073311059703,342.2454796855981,342.41309252783026,342.59103261608743,342.75982025085676,342.92909965924633,343.09889816201286,343.27713877859355,343.4457351680661,343.6148506519156,343.7842120225753,343.96428312985347])
        expected['rhoNH'] = np.array([6371.198101234436,6371.195822715759,6371.197341728211,6371.1984809875485,6371.1965822219845,6371.195063209533,6371.199240493775,6371.195442962647,6371.195822715759,6371.197721481323,6371.196202468872,6371.195442962647,6371.197341728211,6371.196961975097,6371.195822715759,6371.198101234436,6371.197341728211,6371.195063209533,6371.198860740661,6371.196961975097,6371.196202468872,6371.1965822219845,6371.197721481323,6371.195822715759,6371.196202468872,6371.1984809875485,6371.195822715759,6371.199240493775,6371.195822715759,6371.1965822219845,6371.1965822219845,6371.196961975097,6371.1984809875485,6371.196202468872,6371.196961975097,6371.196202468872,6371.195442962647,6371.199620246887,6371.195442962647,6371.199620246887,6371.196961975097])
        expected['latSH'] = np.array([-69.12013037660569,-69.1072349794527,-69.09435324267807,-69.08136222287669,-69.07148576933687,-69.05850840991383,-69.05345406992802,-69.04844071107723,-69.04643263546126,-69.04141927661047,-69.03643323851637,-69.03372848360505,-69.03408365344188,-69.03137889853056,-69.02868780399757,-69.02596938870789,-69.03196629479916,-69.03508086106069,-69.0381544461872,-69.04125535207038,-69.04730689967502,-69.04404206925176,-69.04081821996351,-69.03756704991858,-69.03722554046007,-69.03404267230687,-69.02547761508765,-69.01684425597676,-69.01114787820896,-69.00254183985476,-68.99396312225721,-68.98489263103943,-68.97863617775971,-68.96956568654193,-68.96052251608083,-68.95142470410639,-68.93649391058074,-68.9187763998737,-68.90097692689667,-68.88321843505463,-68.86815103774558])
        expected['lonSH'] = np.array([39.29865793692185,39.30270482400508,39.306710729953295,39.31082591892823,39.30287899382892,39.30694637147966,39.27812638827679,39.249057103169214,39.207669571893526,39.17835098488125,39.14894019031517,39.09774109229676,39.033769540530415,38.981849857554565,38.9296364764444,38.8771362273891,38.818359034486555,38.771667861320346,38.72477178247904,38.677640062111365,38.61751732194233,38.60250456614664,38.58738594241882,38.572294639447676,38.544406977066515,38.52912442879861,38.50864752166691,38.48809206735976,38.454651461183374,38.43401745970077,38.41340736388025,38.39415989079916,38.36187700168709,38.34239730217421,38.323016640404305,38.30360865787771,38.25990569247339,38.229296199707974,38.19869353713173,38.16808745946091,38.124254720462346])
        expected['rhoSH'] = np.array([6371.187847900391,6371.198101234436,6371.186328887939,6371.193923950195,6371.192784690857,6371.186328887939,6371.199240493775,6371.186708641052,6371.19050617218,6371.19050617218,6371.187468147277,6371.1946834564205,6371.186328887939,6371.193164443969,6371.188607406616,6371.188607406616,6371.197721481323,6371.185949134827,6371.191645431519,6371.190126419067,6371.185189628601,6371.195063209533,6371.188607406616,6371.186708641052,6371.197341728211,6371.187088394165,6371.188987159729,6371.192784690857,6371.185189628601,6371.193164443969,6371.188227653503,6371.185949134827,6371.1946834564205,6371.188607406616,6371.185189628601,6371.196202468872,6371.188227653503,6371.1844301223755,6371.197721481323,6371.186328887939,6371.185189628601])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_30N_0_60000(self):
        """Test for latitude = 30, longitude = 0, rho = 60000"""
        lat = 30
        lon = 0
        rho = 60000

        expected = {}
        expected['latNH'] = np.array([70.17984629284976,70.20715851179335,70.23443999488568,70.26168391193757,70.28902345163783,70.31617686868321,70.34721666336634,70.37821035427257,70.40928429990154,70.44012089645685,70.47090797414069,70.5095361089917,70.54826328158566,70.58661820886988,70.62486043803277,70.66302070492563,70.69651936770997,70.72962358706972,70.76263730642297,70.79551783708742,70.82853497153526,70.8560623414377,70.88349067359718,70.91078069442597,70.93819195111253,70.96520534927993,70.99490130424385,71.0244538252352,71.05421125190165,71.08354349929228,71.11272719006844,71.14649223023041,71.18035972322991,71.21362103694058,71.24668256761802,71.27951699450557,71.31078901562047,71.34143095178445,71.37182700113829,71.40203180519538,71.4323902885088])
        expected['lonNH'] = np.array([339.06375900415276,339.1053138750631,339.14686874597345,339.1884782583972,339.22374935527114,339.26544082996486,339.3237979662335,339.3822097440154,339.4342831062476,339.4928861293263,339.551571114675,339.6683400287256,339.7790164140365,339.89668691305747,340.014821864942,340.13333930742004,340.2605447505224,340.3949355526315,340.52981812836094,340.66527443998064,340.79458358134735,340.92512215676464,341.05604322277543,341.1874014208931,341.31242120346104,341.44454438276574,341.5792083924417,341.71433685498124,341.843044939701,341.9789110626709,342.11521431774764,342.2993835385279,342.4773782682984,342.66277692312923,342.8487493138503,343.03526811970505,343.2153938684966,343.4028415800784,343.59072642376714,343.77902107880607,343.9609226767818])
        expected['rhoNH'] = np.array([6371.1984809875485,6371.1984809875485,6371.197721481323,6371.196961975097,6371.196961975097,6371.197341728211,6371.1965822219845,6371.1965822219845,6371.197341728211,6371.197341728211,6371.196961975097,6371.196961975097,6371.196961975097,6371.1984809875485,6371.197341728211,6371.198101234436,6371.197721481323,6371.1984809875485,6371.199240493775,6371.198860740661,6371.199240493775,6371.199620246887,6371.199620246887,6371.2,6371.199240493775,6371.199240493775,6371.198860740661,6371.198860740661,6371.198101234436,6371.198101234436,6371.1984809875485,6371.198101234436,6371.198101234436,6371.197721481323,6371.197341728211,6371.197341728211,6371.197721481323,6371.196961975097,6371.1965822219845,6371.196961975097,6371.1965822219845])
        expected['latSH'] = np.array([22.227051809576622,22.24623781095518,22.265095963253586,22.283619436282663,22.237454187682545,22.25668800038531,22.275805699872166,22.294588720089706,22.24852592432714,22.268019284218354,22.287171134651075,22.30546238124836,22.25874388732548,22.277745473596454,22.296398720219756,22.314724117762907,22.268893548432118,22.28890600270026,22.30857694750989,22.327913213050195,22.281987021071032,22.300954456396155,22.319594042641114,22.33789211942758,22.290804795289517,22.309813211749656,22.327510231889164,22.344872572759343,22.296740229678264,22.314799249843773,22.33254408130746,22.34974249763755,22.301343777178843,22.319273023750128,22.336847100484576,22.35408649794968,22.30503207933066,22.322387590011658,22.339415251612493,22.356087743376506,22.30697868324411])
        expected['lonSH'] = np.array([1.5314334260753477,1.5154011578243296,1.4993786012485375,1.4833887015147145,1.5196519900873104,1.503604674075777,1.4865755183710543,1.4695555407330287,1.5048378433860816,1.4877767778913302,1.4707611758432417,1.4527956438919927,1.4871481870442775,1.4691378319766002,1.4511670706617676,1.4332067680741019,1.4662860145547083,1.447015276141752,1.4277938431568666,1.4085664337564576,1.441646320567299,1.423259237878213,1.4048882701667,1.3865430223862805,1.4204549116153937,1.4020700700821294,1.3837547043793286,1.3654270656803629,1.3993548564436378,1.3810074742291025,1.362681329634018,1.3433592580805807,1.3761882421611296,1.356795093951642,1.3374223295879586,1.3180965227748191,1.351348871862203,1.3324160143697508,1.3135283001588443,1.2946591555247435,1.3278519539003013])
        expected['rhoSH'] = np.array([377071.87353515625,377074.2796508789,377076.734375,377079.1890991211,377073.98800048826,377076.6128540039,377079.2134033203,377081.81395263673,377076.5399414062,377079.1890991211,377081.9354736328,377084.5603271484,377079.2377075195,377081.91116943356,377084.6575439453,377087.30670166016,377082.0812988281,377085.1679321289,377088.23026123043,377091.17106933595,377085.9456665039,377088.7406494141,377091.46271972655,377094.2333984375,377088.7892578125,377091.58424072264,377094.0389648437,377096.4936889648,377090.73359375,377093.38275146484,377095.9346923828,377098.4137207031,377092.7022338867,377095.2784790039,377097.80611572263,377100.3094482422,377094.4278320312,377096.8582519531,377099.21575927734,377101.57326660154,377095.52152099606])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_60N_0_60000(self):
        """Test for latitude = 60, longitude = 0, rho = 60000"""
        lat = 60
        lon = 0
        rho = 60000

        expected = {}
        expected['latNH'] = np.array([79.0975367873834,79.1150861046821,79.13261407763964,79.15011558361417,79.16756159430167,79.1849990672527,79.20623241783498,79.22743161747141,79.2485744680472,79.2696848752244,79.29076027768212,79.32463886973903,79.35843293820497,79.39212113873876,79.42572310813429,79.45923030865508,79.49167882985451,79.52400953029077,79.55626339109887,79.58846517171453,79.62063621647894,79.64983356763345,79.67896261689626,79.70798579822694,79.73710545597964,79.76594422220273,79.79774985184653,79.82948461827772,79.86128256395871,79.89276546716424,79.92413737979575,79.96224044385431,80.00034265413923,80.03793516155733,80.07534752273608,80.11248155370615,80.14927236767042,80.18549883725451,80.22142563228878,80.2571483754216,80.29291380723672])
        expected['lonNH'] = np.array([327.0792905203949,327.11182954160086,327.14455980810357,327.17731739536293,327.1929995096973,327.2259210214968,327.2786500818893,327.3315703875785,327.36738789958605,327.4205814128421,327.47385688836823,327.60485991664905,327.7191699625984,327.8517575947667,327.9851375288787,328.1195010102312,328.25886419005616,328.4169694089636,328.57619477889494,328.73651297909345,328.87989231015035,329.0428606237469,329.2067578430705,329.37180253417466,329.5191980164636,329.6862371228054,329.8651061167897,330.04501329952785,330.2073532357207,330.38963732429,330.5730415638832,330.8323428655335,331.0745140527455,331.337558298061,331.6022964302907,331.8689743362447,332.1197515618109,332.3916477322908,332.6653197519548,332.94052173399297,333.1980471864592])
        expected['rhoNH'] = np.array([6371.199620246887,6371.199240493775,6371.199240493775,6371.198860740661,6371.199240493775,6371.198860740661,6371.198860740661,6371.1984809875485,6371.199240493775,6371.1984809875485,6371.198860740661,6371.198860740661,6371.199240493775,6371.199240493775,6371.198860740661,6371.199240493775,6371.1984809875485,6371.198860740661,6371.199620246887,6371.1984809875485,6371.198860740661,6371.198860740661,6371.199240493775,6371.199240493775,6371.198860740661,6371.1984809875485,6371.199240493775,6371.199240493775,6371.1984809875485,6371.199620246887,6371.198860740661,6371.199620246887,6371.199620246887,6371.1984809875485,6371.198860740661,6371.199240493775,6371.199240493775,6371.1984809875485,6371.199240493775,6371.1984809875485,6371.199240493775])
        expected['latSH'] = np.array([34.24096182375177,34.253549862392106,34.26583737270896,34.27775263771604,34.229019237988005,34.24163118229043,34.25304101329894,34.264129825416454,34.214518746380065,34.22627008684707,34.237731144274356,34.248317937487876,34.19807506595326,34.209286821475835,34.220146822256154,34.230767766415525,34.18006044201735,34.190879461662654,34.201377462416964,34.211598840509886,34.16111691235432,34.171864215013336,34.18221536670049,34.1923035561046,34.14176698643568,34.15256210041888,34.162230233189035,34.17160808291946,34.1204875320765,34.13059962714271,34.140377042939576,34.14955681718408,34.098367964449416,34.10831613497554,34.117970607367354,34.12725624954398,34.07637134022739,34.086507340955684,34.09633939826592,34.1058640970635,34.055153357570745])
        expected['lonSH'] = np.array([3.705020320460961,3.6828964839656435,3.6607389234112993,3.6385642873840296,3.6874774064646063,3.6653377751568335,3.640792636600746,3.616186026342129,3.6627090061000245,3.6381540491470057,3.6136165945537346,3.5872576138861865,3.631999194931178,3.6057080892685063,3.579412501294192,3.553049251758412,3.594482246480767,3.5649333540274113,3.535391718650048,3.5057465632180773,3.5471229954363683,3.518494470973671,3.4898300880178317,3.4611232298230914,3.5033502340364606,3.474688839288383,3.445240905568696,3.415699697078156,3.4570865880236137,3.427624140151941,3.3981277547778292,3.366171007198632,3.405032649141889,3.373088921610797,3.341072623319774,3.3090642224349787,3.3490221097400226,3.3181453858233336,3.2872791206338112,3.2563223554377863,3.2961908099533854])
        expected['rhoSH'] = np.array([369627.7646606445,369637.3162109375,369646.60041503905,369655.6415771484,369625.35854492185,369635.00731201173,369643.7811279297,369652.48203124997,369621.54278564453,369630.5839477539,369639.5035888672,369647.7913208008,369616.6333374023,369625.5286743164,369634.1080566406,369642.44439697266,369614.9077392578,369623.8516845703,369632.3581542969,369640.47575683595,369610.94615478517,369619.5741455078,369627.934790039,369635.9794799805,369605.91518554685,369614.4216552734,369622.61217041017,369630.486730957,369600.22800292965,369608.4185180664,369616.4389038086,369624.046118164,369593.3985229492,369601.37030029297,369609.12333984376,369616.5361206055,369585.8642211914,369594.05473632814,369601.75916748046,369609.48790283204,369578.7430908203])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_90N_0_60000(self):
        """Test for latitude = 90, longitude = 0, rho = 60000"""
        lat = 90
        lon = 0
        rho = 60000

        expected = {}
        expected['latNH'] = np.array([84.14229828665555,84.15131029437855,84.16028900492935,84.1692719843484,84.17346273229101,84.18240942633008,84.19517419611519,84.20790609561492,84.21584064099636,84.22851960653003,84.2411878998931,84.26737954092599,84.28869613443877,84.31474562215955,84.34069607213738,84.3666115173957,84.39167148146046,84.4214873916217,84.45127256593165,84.48096638646146,84.50577875616882,84.53655601545572,84.56726369219045,84.59789879816525,84.62357817501038,84.65407795786226,84.68851961363886,84.722848998181,84.7521534979281,84.78626218198268,84.82023212781974,84.86767291424736,84.91000685360991,84.9570519159525,85.0038814004494,85.05049402644015,85.09144570626944,85.13712473077801,85.18255359960823,85.22772334813682,85.26770001846208])
        expected['lonNH'] = np.array([255.73632539421095,255.67977142788322,255.622834970962,255.56548870269057,255.50158545281593,255.4443757883279,255.36555540530597,255.2863525316905,255.20026482739166,255.12073410469603,255.04106677821702,254.8571434442469,254.66532441159626,254.47896953028163,254.290565592216,254.10104150312648,253.88124601563547,253.66573988694324,253.4481573807433,253.2274056667685,252.99916806546335,252.76855355832703,252.5352342962794,252.29890975099696,252.054689507034,251.81317401798233,251.54605897992147,251.27498243214202,250.99609214795206,250.71848593932606,250.43675429644136,250.1120197825423,249.77794156985863,249.44195090420735,249.0993759361962,248.75046255263527,248.40165845210106,248.04957586076523,247.69159198598652,247.3269145258212,246.95466921605552])
        expected['rhoNH'] = np.array([6371.2,6371.199240493775,6371.198860740661,6371.2,6371.200759506225,6371.199240493775,6371.199620246887,6371.2,6371.2,6371.199620246887,6371.199620246887,6371.2,6371.199620246887,6371.199620246887,6371.2,6371.199620246887,6371.199620246887,6371.199620246887,6371.2,6371.2,6371.199620246887,6371.2,6371.200759506225,6371.2,6371.199620246887,6371.199240493775,6371.2,6371.2,6371.199240493775,6371.2,6371.200759506225,6371.200759506225,6371.199620246887,6371.2,6371.199620246887,6371.2,6371.199240493775,6371.2,6371.2,6371.2,6371.2])
        expected['latSH'] = np.array([47.544486685306204,47.55122466692242,47.55758015794512,47.56364878102267,47.510786531941356,47.517585985260105,47.52181045726176,47.52572757075076,47.47063184981086,47.47521149164935,47.47951109573187,47.48260517142589,47.42664543155597,47.43043960163991,47.43391275283287,47.43705463985107,47.37875897528501,47.380323088604946,47.381460315101755,47.38230042836966,47.32409355626282,47.32634410359434,47.32829753769696,47.32985140573314,47.27244366575918,47.27466689233402,47.27610123205972,47.27720772270526,47.21921941665185,47.22109088848444,47.222644756520616,47.2230579829654,47.16460180895385,47.165950771314925,47.166900167609555,47.167610507283236,47.11030863524142,47.112682125978,47.11483363556655,47.116544597953634,47.0595876504649])
        expected['lonSH'] = np.array([5.791035651950549,5.756712243823942,5.722305165880003,5.687765753020894,5.768920780078517,5.734572185629346,5.696477232420422,5.65820213297214,5.735513471074338,5.697460779660904,5.659333809940247,5.618563130123971,5.6932947911540195,5.652742677391185,5.612097075414085,5.571295232859722,5.6405584736855285,5.59470698690041,5.548805981243808,5.502688543967882,5.57183182959639,5.527048413642732,5.482137785415783,5.437168246807242,5.507260074956736,5.462479647210841,5.416120165106202,5.369575414120327,5.438118923762343,5.3917888968485,5.345322693038081,5.294993163478373,5.35955168462651,5.3092379498792575,5.258862316542651,5.208312940269034,5.27469597569921,5.2261760193827325,5.177641548914268,5.128896623242002,5.195070911015671])
        expected['rhoSH'] = np.array([353340.98607177736,353350.90218505857,353360.57525634766,353370.0781982422,353328.6881469726,353338.7014770508,353346.1871704101,353353.08956298826,353309.4635253906,353317.3137817383,353324.9939086914,353330.8755249023,353285.9370605469,353292.5964111328,353298.98841552733,353304.8943359375,353256.6018920898,353260.24752197263,353263.26124267577,353266.177746582,353218.0554321289,353222.3086669922,353225.954296875,353229.405493164,353182.13382568356,353186.21693115233,353189.0362182617,353191.66107177734,353143.4172363281,353146.69830322266,353149.8821533203,353150.31962890626,353099.91271972656,353101.2251464844,353102.1730102539,353103.0479614258,353053.66182861326,353056.1651611328,353058.4254516601,353060.3211791992,353011.39682617184])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_90S_90_60000(self):
        """Test for latitude = -90, longitude = 90, rho = 60000"""
        lat = -90
        lon = 90
        rho = 60000

        expected = {}
        expected['latNH'] = np.array([-12.798697839193196,-12.986719286665306,-13.145022581058697,-13.299494139327706,-12.425680718051296,-12.59521284344018,-13.222688662110912,-13.86089470796773,-13.452770414491965,-14.044394570209292,-14.613540573368113,-15.431619651017229,-15.365858589688344,-16.11273294524007,-16.85565262126235,-17.550562897608614,-17.877373789015394,-18.91091801422172,-19.86222676182109,-20.7710039214588,-21.03585816690439,-21.861307018667944,-22.60960205356703,-23.343000445886318,-23.54028362987296,-24.204464885143338,-25.005960263487665,-25.675810575769148,-25.94310319874843,-26.63597124853287,-27.23284781972194,-27.973158363481275,-28.325937634112435,-29.012139419266944,-29.66957244763735,-30.257419508743666,-30.52786767911948,-31.03877948941478,-31.532615826785047,-32.01389827646082,-32.18509013781802])
        expected['lonNH'] = np.array([355.48719475025854,355.49989890211475,355.50615535539447,355.51178343127054,355.44656878507527,355.4530438044085,355.5469452451178,355.6471851013769,355.66341363084484,355.7514957503813,355.834441567662,355.96951538868814,356.05232460218537,356.16835585580554,356.2911626570824,356.403997382171,356.5628949030222,356.74670895396554,356.91831062667296,357.0863879217686,357.2356138947551,357.3863425093589,357.5194492359041,357.6550967928206,357.78782102877227,357.90830556573127,358.0658916902618,358.1864581894909,358.33412687934657,358.47236990814764,358.58159829335443,358.7286932473199,358.8964700140921,359.0352594580267,359.17126218478,359.2872387968868,359.4405355626186,359.5384258338032,359.6345675765603,359.7310644891542,359.85119385627644])
        expected['rhoNH'] = np.array([312129.32762451173,311874.3522705078,311618.9880493164,311378.91116943356,312815.84833984374,312477.898449707,311575.7022705078,310841.44810791017,311408.7810302734,310591.13916015625,309762.4145751953,308857.05885009764,309151.7229614258,308090.0669311523,307328.73789062497,306577.64091796876,306401.9701660156,305380.87784423825,304555.3128051758,303942.94420166017,303957.38089599606,303419.3588378906,302826.7495483398,302455.94038085936,302508.2187133789,302112.7893920898,301969.151574707,301486.00839843747,301536.60974121094,301538.09229736327,301220.8981933594,301038.47087402345,301077.38189697266,301028.3603271484,301122.32036132814,301039.2,301346.01621093747,301277.74571533204,301300.51875,301462.60345458984,301384.85432128905])
        expected['latSH'] = np.array([-75.09847201371281,-75.07509910637302,-75.05167155751985,-75.02817570677502,-75.01167396974029,-74.98808249634706,-74.96914921196776,-74.95017494645347,-74.93819479464926,-74.91911124610826,-74.89997305605388,-74.88190037551004,-74.8708627898113,-74.85269448661904,-74.83447154191347,-74.81620761607286,-74.80798406831215,-74.79260248230128,-74.77715259439873,-74.76167538573947,-74.75336987570873,-74.74229130887497,-74.73121274204121,-74.72012051482912,-74.71622730700221,-74.70508043827675,-74.69661100370593,-74.68816888989178,-74.68693945584118,-74.6784427005137,-74.66994594518619,-74.66355288812306,-74.66444081271516,-74.65802043489535,-74.65158639669721,-74.64516601887738,-74.64975590599963,-74.64702383033162,-74.64427809428528,-74.64153235823895,-74.6461222453612])
        expected['lonSH'] = np.array([142.5637928096298,142.5459113743827,142.5280162787573,142.51013484351017,142.5106266171304,142.49274518188332,142.50681537157357,142.52083091975044,142.5532469975513,142.5673445079982,142.58145567882346,142.57862798050706,142.59409152878797,142.5912638304716,142.58849077366858,142.58564941497386,142.61642624737394,142.62885719166334,142.6414384001145,142.6538966651606,142.68463251642567,142.67401840245546,142.6632130431885,142.65240768392155,142.65993455238691,142.64926579690334,142.63264111646353,142.6157978699703,142.61740979461442,142.60083975568796,142.58416043373478,142.55827401678044,142.55061054453168,142.52476510871236,142.49890601251468,142.47296495404697,142.4479254805497,142.4047450246169,142.36135966300895,142.31798796177938,142.2926342995803])
        expected['rhoSH'] = np.array([6371.199620246887,6371.199240493775,6371.199240493775,6371.2,6371.199620246887,6371.199620246887,6371.199620246887,6371.199620246887,6371.2,6371.199620246887,6371.199240493775,6371.198860740661,6371.199240493775,6371.2,6371.199240493775,6371.199620246887,6371.198860740661,6371.199620246887,6371.2,6371.199240493775,6371.199240493775,6371.199620246887,6371.199240493775,6371.199240493775,6371.199620246887,6371.199620246887,6371.2,6371.199240493775,6371.198860740661,6371.199240493775,6371.199240493775,6371.199240493775,6371.199240493775,6371.1984809875485,6371.199240493775,6371.198860740661,6371.199240493775,6371.199240493775,6371.199240493775,6371.199240493775,6371.198860740661])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_60S_90_60000(self):
        """Test for latitude = -60, longitude = 90, rho = 60000"""
        lat = -60
        lon = 90
        rho = 60000

        expected = {}
        expected['latNH'] = np.array([2.5221882805216183,2.5478561314225203,2.573189303054093,2.59803070106544,2.5393798666625287,2.5651023590768034,2.5956742858017776,2.625624665312287,2.571925718057642,2.602934776889498,2.6334862130469645,2.6663325927655563,2.615058362666275,2.648799497166138,2.682076178802447,2.715086483061114,2.670287272294999,2.710920067667402,2.7510405988520574,2.790785469632368,2.7458701456503576,2.7851300729995927,2.823891396539409,2.8623931728907763,2.815920565778015,2.85530343653231,2.8963938545791024,2.9369788386273115,2.8923981939146444,2.9338642723657955,2.9752210677902156,3.0204232597173615,2.9801183134251232,3.0263928450519586,3.072298546463614,3.117835417660089,3.0753584712117714,3.11963858760096,3.1636591568016996,3.2072562542738865,3.164656364420523])
        expected['lonNH'] = np.array([25.04666739401006,25.030285185285784,25.013660504845973,24.996933371568613,25.054706526663168,25.038286751898454,25.025848977419862,25.013168731225733,25.074898273397014,25.062653451762475,25.05026007351349,25.04041094073033,25.104840115171058,25.095259067312824,25.085660943981665,25.076018424420898,25.145201410523956,25.140763495110743,25.13619751365059,25.131513711427253,25.200759876780133,25.19666517837271,25.19249022524254,25.18826746078818,25.257657060113633,25.253676767374806,25.252531003141538,25.251192286064214,25.32333274407789,25.322424328918277,25.321413460921118,25.324154074325584,25.400182617524287,25.403283523407474,25.406312712304373,25.40931116535001,25.48403343486995,25.48615420860724,25.488148623844882,25.49007132209624,25.56476456331221])
        expected['rhoNH'] = np.array([313257.04246826173,313225.88448486326,313194.96954345703,313164.5163818359,313265.5732421875,313234.5610839844,313200.87546386715,313168.307836914,313266.73984374997,313233.0056152344,313199.8303833008,313164.9052490234,313261.4415283203,313225.6657470703,313190.3760498047,313155.305090332,313248.7547363281,313209.5763671875,313170.7868652344,313132.43483886716,313225.86018066405,313186.4873779297,313147.6006591797,313108.859765625,313202.3337158203,313162.742175293,313122.29998779297,313081.83349609375,313173.48463134764,313132.24040527345,313091.1177001953,313047.6617919922,313136.71237792965,313092.06556396483,313047.9291381836,313003.98714599607,313093.71824951173,313049.8248657226,313006.24743652344,312963.13178710936,313052.64415283204])
        expected['latSH'] = np.array([-68.65302739964687,-68.63061071879088,-68.60813939642154,-68.58561343253885,-68.56721290291483,-68.54463229751875,-68.52811690010566,-68.51153320080087,-68.49910225651146,-68.48245025531497,-68.46574361260511,-68.44749334714282,-68.4333821763176,-68.4150636089636,-68.39669040009628,-68.37824888933724,-68.36941062455125,-68.3563513028582,-68.34323733965175,-68.33006873493198,-68.3211348474976,-68.31140865811952,-68.30166880836308,-68.29192895860663,-68.28636918462223,-68.27661567448746,-68.27113786277312,-68.2656054095454,-68.26429401322477,-68.25880254113207,-68.25328374828268,-68.24958178575255,-68.25008721975112,-68.24643989873434,-68.24272427582585,-68.23902231329572,-68.24148118139692,-68.23978729448274,-68.23807974719026,-68.23633121876273,-68.23876276610724])
        expected['lonSH'] = np.array([122.78863297363702,122.80088633300804,122.81296210746062,122.82491493850813,122.82726452358263,122.83938127917023,122.8720705645379,122.90470520839223,122.92760000249011,122.96041223126285,122.9931971392789,123.01707548061728,123.03139155711762,123.05550212488777,123.07954439076622,123.10343639248292,123.122642884429,123.15173949029325,123.1807677942658,123.2098780605084,123.22911187321115,123.2352044019508,123.2413105910688,123.24728017640338,123.24344161008983,123.24956145958618,123.24920628974932,123.24875549726411,123.23851021350909,123.23814138329391,123.23778621345707,123.22519134462756,123.20270636187988,123.19024809683378,123.17774885065265,123.16511300068814,123.1300877906243,123.10511661901874,123.07994054173807,123.05472348332239,123.0193704241784])
        expected['rhoSH'] = np.array([6371.199620246887,6371.2,6371.199240493775,6371.199240493775,6371.2,6371.199240493775,6371.199620246887,6371.2,6371.2,6371.199240493775,6371.199240493775,6371.198860740661,6371.199620246887,6371.199620246887,6371.199620246887,6371.199240493775,6371.1984809875485,6371.1984809875485,6371.199620246887,6371.198860740661,6371.199240493775,6371.199620246887,6371.199620246887,6371.198860740661,6371.199620246887,6371.199240493775,6371.198860740661,6371.199240493775,6371.198860740661,6371.199620246887,6371.199620246887,6371.2,6371.199240493775,6371.199240493775,6371.199620246887,6371.199620246887,6371.199240493775,6371.199620246887,6371.199620246887,6371.2,6371.199620246887])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_30S_90_60000(self):
        """Test for latitude = -30, longitude = 90, rho = 60000"""
        lat = -30
        lon = 90
        rho = 60000

        expected = {}
        expected['latNH'] = np.array([82.34395558196809,82.34094005344951,82.33790915700533,82.3348646001828,82.33510109548281,82.33200872733609,82.32079355671893,82.3094648342068,82.30109272983167,82.28965216297189,82.27819195931826,82.24392831534689,82.21271264329265,82.17827568327108,82.14387372796902,82.10915160754962,82.06352679766758,82.01473961019983,81.96556054062845,81.91640964558738,81.87008047244719,81.82330136059541,81.77619525343712,81.72883045286403,81.68461180817737,81.6370685689122,81.58628440488586,81.53547377387649,81.48741229400805,81.43629601203332,81.38502519702863,81.31825497524987,81.25451821123625,81.18766773473475,81.12084116389534,81.0537516307729,80.99524081524798,80.9338399759305,80.8721266554585,80.8104799293309,80.7520783968327])
        expected['lonNH'] = np.array([68.67164399084615,68.76435014845073,68.85819011745754,68.95168174681667,69.1171020983252,69.20870176528425,69.3278134342201,69.44649480123825,69.63721417343251,69.75407187994226,69.87061539775019,70.04646544812134,70.29154629591973,70.46189804400902,70.63019390515814,70.79821655874045,71.05858336990134,71.24294383597832,71.42788486813475,71.60859118300579,71.85843950284485,72.05982080033351,72.25942624863796,72.4566889420571,72.72216473471715,72.91438674852883,73.13388853788553,73.35075387422259,73.63611234755656,73.8463797211554,74.05544498146033,74.24643073103222,74.50524708925151,74.68842593260209,74.8692961720132,75.0460204865981,75.2753372577921,75.43032108024887,75.58372712900736,75.73380004545088,75.95153281581254])
        expected['rhoNH'] = np.array([6371.199620246887,6371.199240493775,6371.199240493775,6371.199240493775,6371.199620246887,6371.199620246887,6371.199620246887,6371.199240493775,6371.199620246887,6371.199620246887,6371.199240493775,6371.1984809875485,6371.1984809875485,6371.2,6371.2,6371.199240493775,6371.199240493775,6371.199620246887,6371.2,6371.199240493775,6371.199240493775,6371.2,6371.2,6371.199240493775,6371.2,6371.2,6371.199620246887,6371.199620246887,6371.199240493775,6371.2,6371.2,6371.2,6371.2,6371.199240493775,6371.199620246887,6371.199240493775,6371.199240493775,6371.199620246887,6371.199620246887,6371.199620246887,6371.199620246887])
        expected['latSH'] = np.array([-61.25029079226863,-61.230141734217085,-61.2099380346522,-61.18970701433062,-61.166388748504176,-61.14614406780427,-61.131841651682265,-61.11753923556026,-61.10014957393341,-61.085806176676385,-61.07139447752766,-61.05442828762935,-61.03434753146951,-61.01736768119284,-61.000319529024495,-60.983244056099466,-60.97064918726997,-60.96119620545866,-60.951674921755654,-60.94212631729599,-60.92944948619643,-60.92272858005316,-60.91600767390986,-60.90920480549653,-60.89928737082167,-60.89253914392168,-60.890776955115825,-60.888973785174954,-60.88398774708085,-60.882239218653325,-60.88040872795574,-60.88161084124968,-60.87973936941708,-60.881023444981054,-60.88218457713995,-60.88337303005554,-60.88286759605697,-60.88555869058993,-60.88818148323122,-60.89074963435914,-60.890216879603884])
        expected['lonSH'] = np.array([113.19831654869793,113.2020390017956,113.20577511527159,113.20934047401833,113.20338454906208,113.20707968140306,113.22334236181686,113.2394616082581,113.24608689175301,113.26238372311265,113.27867372428314,113.29189697051628,113.295421348128,113.30884950003625,113.32213421797192,113.33537795477258,113.33703086055172,113.34853289911402,113.35993931502794,113.37127742905017,113.37296448577516,113.36293776807358,113.35282225791279,113.34258380434694,113.32272844442971,113.31257878332308,113.29268244227083,113.27258119554348,113.24287670284309,113.222946210845,113.20281764336097,113.17110507504461,113.12965948716096,113.09795374903376,113.06607725617732,113.0341051406725,112.98550834472785,112.94656260608043,112.90751441459547,112.86830229857043,112.81951425732903])
        expected['rhoSH'] = np.array([6371.199240493775,6371.199240493775,6371.198860740661,6371.199240493775,6371.199240493775,6371.198860740661,6371.1984809875485,6371.198860740661,6371.198860740661,6371.198101234436,6371.1984809875485,6371.1984809875485,6371.198860740661,6371.199240493775,6371.199240493775,6371.199240493775,6371.198860740661,6371.1984809875485,6371.199620246887,6371.199240493775,6371.199620246887,6371.199240493775,6371.2,6371.199620246887,6371.198860740661,6371.199620246887,6371.2,6371.2,6371.199620246887,6371.2,6371.2,6371.2,6371.2,6371.2,6371.198860740661,6371.199620246887,6371.199620246887,6371.2,6371.199240493775,6371.199240493775,6371.199240493775])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_0N_90_60000(self):
        """Test for latitude = 0, longitude = 90, rho = 60000"""
        lat = 0
        lon = 90
        rho = 60000

        expected = {}
        expected['latNH'] = np.array([75.22989008967126,75.23051334443302,75.2307677689796,75.23110415579623,75.2278529857513,75.22811594803434,75.2221395325106,75.21600089999404,75.2060322389004,75.20018218187629,75.19402647388682,75.1647608208406,75.13174539394005,75.10249681636677,75.07320042746929,75.04393818951766,74.99787197866051,74.95587656054869,74.91386065186936,74.87166545072431,74.82553606061734,74.78577923700598,74.74611803604301,74.70612727845258,74.66212549227207,74.62223889506649,74.58119458079659,74.54042518164079,74.49514615008547,74.45375178862062,74.41264600264819,74.35997670641093,74.3029941457128,74.25038632117807,74.19772897777186,74.14513139852089,74.09336368725407,74.04578458949575,73.99825671815623,73.95081593172861,73.89910286197515])
        expected['lonNH'] = np.array([71.92424837549792,71.93674079148988,71.9504011698299,71.96411618968328,72.03237027005922,72.04561400685988,72.07755197141886,72.11021393602987,72.19736714983922,72.22875186907542,72.260874248742,72.32570640434376,72.44400528076838,72.50736211550942,72.57063698798042,72.63395284158644,72.77631447445701,72.86338572599634,72.95024524167138,73.03717305923814,73.17603763525366,73.27907786907248,73.38168780097358,73.48473486498156,73.63878295152203,73.73975363802234,73.86226674116485,73.98419244803875,74.15658642268987,74.2772280539998,74.3970568927985,74.51641444854448,74.68469664931526,74.80138360109575,74.91731923206756,75.03282456112163,75.17758359039088,75.27220220096308,75.36649979264426,75.4601280257868,75.60067282833816])
        expected['rhoNH'] = np.array([6371.199240493775,6371.199620246887,6371.198860740661,6371.198860740661,6371.2,6371.199240493775,6371.1984809875485,6371.198860740661,6371.199240493775,6371.199240493775,6371.199240493775,6371.1984809875485,6371.2,6371.2,6371.199620246887,6371.199240493775,6371.1984809875485,6371.199240493775,6371.2,6371.1984809875485,6371.199620246887,6371.199240493775,6371.2,6371.198860740661,6371.199240493775,6371.199240493775,6371.199240493775,6371.199240493775,6371.2,6371.198860740661,6371.199620246887,6371.199620246887,6371.198860740661,6371.198860740661,6371.199620246887,6371.199240493775,6371.199240493775,6371.199620246887,6371.198860740661,6371.1984809875485,6371.199620246887])
        expected['latSH'] = np.array([-55.34582448122438,-55.32697315911514,-55.308080855870884,-55.2891748922483,-55.26465451312794,-55.245707568370335,-55.232730208947316,-55.219698208010925,-55.20101081044177,-55.187937828370366,-55.17485118592063,-55.1600979773134,-55.13967571169505,-55.124854201196115,-55.11004635107554,-55.095224840576606,-55.084720009633145,-55.07993887721412,-55.07514408441676,-55.07015804632266,-55.05959857386583,-55.05647034722597,-55.05339676209945,-55.05030951659461,-55.04152589332196,-55.03847962895213,-55.03987298754282,-55.04102045932339,-55.036553515606215,-55.03774196852177,-55.03895774219404,-55.04596551628248,-55.04716762957639,-55.05425736593489,-55.06114219661825,-55.06804068767997,-55.070690801077916,-55.07920121678376,-55.08769797211124,-55.096126425547055,-55.09872189743166])
        expected['lonSH'] = np.array([107.30780431412803,107.31479159764895,107.32175839060237,107.32867054204242,107.32369816432664,107.33064446671256,107.3499260907395,107.36918039400976,107.37651601717836,107.39588643366451,107.41527051052901,107.43990700286524,107.45256334339727,107.47726130743604,107.50197293185315,107.52665723551358,107.53856908542608,107.56259086073702,107.58661946623712,107.6106070906022,107.62255992164972,107.62317463867502,107.62368690286277,107.62424014818555,107.61264931716404,107.61322305305431,107.60208301451803,107.59086784390087,107.5675359176961,107.5563275772681,107.54518070854265,107.52797546202339,107.49854417688981,107.48140723226224,107.4642224763105,107.44701039960206,107.41148658572882,107.38823662179409,107.36499348804854,107.34171620335714,107.3059669932413])
        expected['rhoSH'] = np.array([6371.198101234436,6371.197721481323,6371.197721481323,6371.197721481323,6371.1984809875485,6371.198101234436,6371.198101234436,6371.198101234436,6371.198860740661,6371.198101234436,6371.198101234436,6371.197721481323,6371.198101234436,6371.198101234436,6371.198101234436,6371.1984809875485,6371.198101234436,6371.198860740661,6371.2,6371.198101234436,6371.198860740661,6371.198101234436,6371.1984809875485,6371.198101234436,6371.1984809875485,6371.199240493775,6371.2,6371.1984809875485,6371.1984809875485,6371.198101234436,6371.198101234436,6371.198860740661,6371.1984809875485,6371.2,6371.1984809875485,6371.198101234436,6371.198101234436,6371.198860740661,6371.199240493775,6371.199240493775,6371.198860740661])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_30N_90_60000(self):
        """Test for latitude = 30, longitude = 90, rho = 60000"""
        lat = 30
        lon = 90
        rho = 60000

        expected = {}
        expected['latNH'] = np.array([75.94646657983846,75.94807850448258,75.94962468855594,75.95124344338923,75.95105219809247,75.95266753783118,75.94954187251226,75.94643669776083,75.94163080590609,75.93839841888138,75.93519762148158,75.91045184611862,75.88397803289566,75.85931678112368,75.8346811425611,75.8101138058902,75.77310357209883,75.73769587144149,75.70210631699749,75.66660555501271,75.6294356655495,75.593881115825,75.55836071704634,75.5227259125991,75.48518377782612,75.44938846393337,75.41225784805789,75.37513064727699,75.3363642010953,75.29918748144291,75.26182976177753,75.21664464532331,75.16999103819754,75.12508766704659,75.08029187137505,75.03523140587319,74.99439370482568,74.95537966428657,74.91648173696335,74.87773236625458,74.83720031617243])
        expected['lonNH'] = np.array([85.53947916510964,85.54125501429384,85.54314014650477,85.54509358060739,85.56615105381854,85.56811131811034,85.57546743184643,85.58297380974427,85.60960471731816,85.61698815181094,85.62452185046547,85.64107139882441,85.67626053342832,85.69214755343776,85.70799359231219,85.7238464613758,85.7727711064006,85.80278295761363,85.83288360128587,85.86291594306643,85.9110960974717,85.95998659155065,86.00880195354873,86.05756950422261,86.12468977319634,86.17290407854745,86.23369276216057,86.29437899293613,86.37247537590605,86.43241711606208,86.49224274300222,86.53694633111996,86.5988688261353,86.64242494247247,86.68573517199953,86.72922981663416,86.77383778210351,86.80044136892072,86.82688786138701,86.85310895761069,86.89625526259765])
        expected['rhoNH'] = np.array([6371.199240493775,6371.2,6371.199240493775,6371.199240493775,6371.2,6371.198860740661,6371.199620246887,6371.2,6371.2,6371.199620246887,6371.199620246887,6371.1984809875485,6371.199620246887,6371.199620246887,6371.198860740661,6371.199620246887,6371.199240493775,6371.2,6371.199620246887,6371.199620246887,6371.198860740661,6371.199620246887,6371.2,6371.199620246887,6371.199240493775,6371.199240493775,6371.199240493775,6371.199620246887,6371.199240493775,6371.2,6371.2,6371.2,6371.2,6371.199240493775,6371.2,6371.199620246887,6371.199240493775,6371.199240493775,6371.199240493775,6371.2,6371.2])
        expected['latSH'] = np.array([-55.52002162581638,-55.50324668121485,-55.486376113964894,-55.46936894293157,-55.44916524336668,-55.432144411954994,-55.42274607165706,-55.41327942946742,-55.40043867382781,-55.39109497504322,-55.381601012096894,-55.37078199245161,-55.35671180276137,-55.3458654623594,-55.33495082006573,-55.324077158907045,-55.32329851734167,-55.32598961187466,-55.32854410262425,-55.331276178292256,-55.330552178240225,-55.33691791454669,-55.343502216906586,-55.34988161359138,-55.35300984023124,-55.35947119918606,-55.37309059639108,-55.386682672839385,-55.39695527735108,-55.41042441039437,-55.42415309062608,-55.44570916764664,-55.46375452743382,-55.48532426483271,-55.50690766260996,-55.528532041522226,-55.54655008055272,-55.56803785568158,-55.58940268740537,-55.6108085002642,-55.62882653929469])
        expected['lonSH'] = np.array([114.01606777726688,114.02211249468235,114.02807524982776,114.03394238232481,114.02222177770906,114.02819819323283,114.0505465721971,114.07290861153973,114.07752581941865,114.10007910405804,114.12251627548153,114.14904473021787,114.15785567424717,114.18456854409109,114.21106967807074,114.2375913026179,114.25424330381439,114.28883138177135,114.32341945972829,114.35790508484767,114.37455708604418,114.3835251244244,114.39248633261545,114.40127678607726,114.39202870994106,114.4010377294563,114.40027274826927,114.39935750292048,114.38028078456864,114.37952946375994,114.3786961806812,114.37728916171217,114.3574679527408,114.35623851869019,114.35491346199122,114.3535064430222,114.32587832782949,114.31694444039512,114.30782613785314,114.29862587304113,114.27060160687658])
        expected['rhoSH'] = np.array([6371.1984809875485,6371.199240493775,6371.198860740661,6371.198860740661,6371.2,6371.198860740661,6371.198860740661,6371.1984809875485,6371.198860740661,6371.198860740661,6371.198860740661,6371.1984809875485,6371.199620246887,6371.2,6371.199240493775,6371.198860740661,6371.198860740661,6371.199240493775,6371.199240493775,6371.198860740661,6371.199620246887,6371.198860740661,6371.199620246887,6371.199240493775,6371.198860740661,6371.198860740661,6371.199240493775,6371.199240493775,6371.199240493775,6371.198860740661,6371.199620246887,6371.198860740661,6371.199240493775,6371.198860740661,6371.198860740661,6371.1984809875485,6371.199620246887,6371.2,6371.198860740661,6371.198860740661,6371.198860740661])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_60N_90_60000(self):
        """Test for latitude = 60, longitude = 90, rho = 60000"""
        lat = 60
        lon = 90
        rho = 60000

        expected = {}
        expected['latNH'] = np.array([84.31637718359754,84.31379366454398,84.31121569501913,84.30863132219193,84.30847508161466,84.30589070878746,84.29925219180103,84.29262562764565,84.28844213677901,84.28178995941424,84.27516979856121,84.24898584149113,84.2252129411981,84.19905288979012,84.17287320158829,84.14674815489981,84.11473377759948,84.08026352040572,84.04579070189102,84.01127946356225,83.9792036145594,83.94305996101897,83.90693082163055,83.87075002893653,83.83695937556517,83.80071753805544,83.76149645740712,83.72227537675879,83.68538979391978,83.64605003873461,83.60667442505633,83.55875082963175,83.51333135231164,83.46549654934627,83.41771980298886,83.37001050474949,83.32910578247076,83.28582458124768,83.24263601446522,83.19953367882103,83.15890942118509])
        expected['lonNH'] = np.array([101.87718920694259,101.89099984944436,101.90491294478367,101.91879871936631,101.95982766571058,101.9737612516174,101.99042691319224,102.00716770684794,102.05096970999523,102.06731435267906,102.08397318406473,102.08571488230308,102.11398503527776,102.11505737497745,102.11620484675801,102.1173932996736,102.15456318913681,102.16479481251349,102.17554553026709,102.18579081402211,102.22134194865203,102.25369655475038,102.28572331176856,102.31787301219181,102.37414011057437,102.40496475429865,102.44510577605081,102.48512385439791,102.54876072689493,102.58748789948889,102.62604431735362,102.62146809060971,102.64017597874637,102.6349986953555,102.63018341199064,102.62562767581424,102.63572269540752,102.62290926052458,102.61045782566765,102.59817714553996,102.60748669337869])
        expected['rhoNH'] = np.array([6371.2,6371.199620246887,6371.199620246887,6371.2,6371.2,6371.199620246887,6371.199620246887,6371.199620246887,6371.2,6371.199240493775,6371.199620246887,6371.199240493775,6371.199620246887,6371.199620246887,6371.2,6371.2,6371.199620246887,6371.199620246887,6371.2,6371.199240493775,6371.199620246887,6371.2,6371.200759506225,6371.199240493775,6371.199620246887,6371.2,6371.2,6371.2,6371.199240493775,6371.2,6371.2,6371.200759506225,6371.2,6371.2,6371.2,6371.2,6371.199620246887,6371.199240493775,6371.2,6371.2,6371.199620246887])
        expected['latSH'] = np.array([-39.91846254253824,-39.82292185642811,-39.72897943458375,-39.63283769182664,-39.40970907202066,-39.313020914129964,-39.137990486459216,-38.96022798312046,-38.65329294219845,-38.47253881600321,-38.29144318034949,-38.06331486207108,-37.703336572054724,-37.47089157422084,-37.23695759514791,-37.00056474797377,-36.51671414717006,-36.1607929895207,-35.80164798258309,-35.438541465926875,-34.94004693954267,-34.596119594075844,-34.249774361642835,-33.899986713868145,-33.416245396091156,-33.06201812535596,-32.67231485207171,-32.280207352199625,-31.7535178049216,-31.35684773868394,-30.957855408128466,-30.477693109476576,-29.865025140926434,-29.380887672177593,-28.892856995601832,-28.40339197930038,-27.828508617238754,-27.379915452930646,-26.930652930083895,-26.478671991947465,-25.90209474297167])
        expected['lonSH'] = np.array([103.62412620038924,103.44641833856384,103.27075953348947,103.09141925645244,102.76507964809839,102.58434601247069,102.27727436776526,101.96473857172381,101.50304510458763,101.18534568553366,100.86621192675398,100.47057321908099,99.92374827412978,99.52188726412291,99.11715757466463,98.70852784719027,97.97118843571988,97.3775493741974,96.780338123739,96.17837306161826,95.43205195138931,94.86186775947664,94.29047462408089,93.71736028101428,93.0086052112204,92.43744430225642,91.81098618177202,91.18572334439239,90.43285891293856,89.81320366086749,89.19524912589975,88.46730805472731,87.6247632394712,86.90841299932028,86.19446015556801,85.4859851235301,84.73327778642718,84.09509906132705,83.46212494037445,82.83190338565737,82.11034854135889])
        expected['rhoSH'] = np.array([56833.790100097656,57031.94831237793,57226.284689331056,57423.46465759277,57788.86006469726,57982.93517150879,58336.45190124511,58690.07192382812,59208.510873413084,59557.77436828613,59903.36792907715,60337.30725402832,60932.29835510254,61360.550497436525,61784.54332885742,62206.74372558593,62989.557678222656,63604.660504150386,64213.99108276367,64818.0658782959,65574.19989624023,66126.45813903808,66674.63935241698,67221.42307434081,67919.43967590331,68459.60050354003,69048.36365356445,69635.13385925292,70378.48994445801,70962.37402648925,71545.62619934081,72249.88898010254,73115.21568908691,73819.8308807373,74528.4623413086,75238.57028198242,76054.91795349121,76708.0750793457,77363.78414611817,78025.41736145019,78865.27326965332])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_90N_90_60000(self):
        """Test for latitude = 90, longitude = 90, rho = 60000"""
        lat = 90
        lon = 90
        rho = 60000

        expected = {}
        expected['latNH'] = np.array([84.14229828665555,84.15131029437855,84.16028900492935,84.1692719843484,84.17346273229101,84.18240942633008,84.19517419611519,84.20790609561492,84.21584064099636,84.22851960653003,84.2411878998931,84.26737954092599,84.28869613443877,84.31474562215955,84.34069607213738,84.3666115173957,84.39167148146046,84.4214873916217,84.45127256593165,84.48096638646146,84.50577875616882,84.53655601545572,84.56726369219045,84.59789879816525,84.62357817501038,84.65407795786226,84.68851961363886,84.722848998181,84.7521534979281,84.78626218198268,84.82023212781974,84.86767291424736,84.91000685360991,84.9570519159525,85.0038814004494,85.05049402644015,85.09144570626944,85.13712473077801,85.18255359960823,85.22772334813682,85.26770001846208])
        expected['lonNH'] = np.array([255.73632539421095,255.67977142788322,255.622834970962,255.56548870269057,255.50158545281593,255.4443757883279,255.36555540530597,255.2863525316905,255.20026482739166,255.12073410469603,255.04106677821702,254.8571434442469,254.66532441159626,254.47896953028163,254.290565592216,254.10104150312648,253.88124601563547,253.66573988694324,253.4481573807433,253.2274056667685,252.99916806546335,252.76855355832703,252.5352342962794,252.29890975099696,252.054689507034,251.81317401798233,251.54605897992147,251.27498243214202,250.99609214795206,250.71848593932606,250.43675429644136,250.1120197825423,249.77794156985863,249.44195090420735,249.0993759361962,248.75046255263527,248.40165845210106,248.04957586076523,247.69159198598652,247.3269145258212,246.95466921605552])
        expected['rhoNH'] = np.array([6371.2,6371.199240493775,6371.198860740661,6371.2,6371.200759506225,6371.199240493775,6371.199620246887,6371.2,6371.2,6371.199620246887,6371.199620246887,6371.2,6371.199620246887,6371.199620246887,6371.2,6371.199620246887,6371.199620246887,6371.199620246887,6371.2,6371.2,6371.199620246887,6371.2,6371.200759506225,6371.2,6371.199620246887,6371.199240493775,6371.2,6371.2,6371.199240493775,6371.2,6371.200759506225,6371.200759506225,6371.199620246887,6371.2,6371.199620246887,6371.2,6371.199240493775,6371.2,6371.2,6371.2,6371.2])
        expected['latSH'] = np.array([47.544486685306204,47.55122466692242,47.55758015794512,47.56364878102267,47.510786531941356,47.517585985260105,47.52181045726176,47.52572757075076,47.47063184981086,47.47521149164935,47.47951109573187,47.48260517142589,47.42664543155597,47.43043960163991,47.43391275283287,47.43705463985107,47.37875897528501,47.380323088604946,47.381460315101755,47.38230042836966,47.32409355626282,47.32634410359434,47.32829753769696,47.32985140573314,47.27244366575918,47.27466689233402,47.27610123205972,47.27720772270526,47.21921941665185,47.22109088848444,47.222644756520616,47.2230579829654,47.16460180895385,47.165950771314925,47.166900167609555,47.167610507283236,47.11030863524142,47.112682125978,47.11483363556655,47.116544597953634,47.0595876504649])
        expected['lonSH'] = np.array([5.791035651950549,5.756712243823942,5.722305165880003,5.687765753020894,5.768920780078517,5.734572185629346,5.696477232420422,5.65820213297214,5.735513471074338,5.697460779660904,5.659333809940247,5.618563130123971,5.6932947911540195,5.652742677391185,5.612097075414085,5.571295232859722,5.6405584736855285,5.59470698690041,5.548805981243808,5.502688543967882,5.57183182959639,5.527048413642732,5.482137785415783,5.437168246807242,5.507260074956736,5.462479647210841,5.416120165106202,5.369575414120327,5.438118923762343,5.3917888968485,5.345322693038081,5.294993163478373,5.35955168462651,5.3092379498792575,5.258862316542651,5.208312940269034,5.27469597569921,5.2261760193827325,5.177641548914268,5.128896623242002,5.195070911015671])
        expected['rhoSH'] = np.array([353340.98607177736,353350.90218505857,353360.57525634766,353370.0781982422,353328.6881469726,353338.7014770508,353346.1871704101,353353.08956298826,353309.4635253906,353317.3137817383,353324.9939086914,353330.8755249023,353285.9370605469,353292.5964111328,353298.98841552733,353304.8943359375,353256.6018920898,353260.24752197263,353263.26124267577,353266.177746582,353218.0554321289,353222.3086669922,353225.954296875,353229.405493164,353182.13382568356,353186.21693115233,353189.0362182617,353191.66107177734,353143.4172363281,353146.69830322266,353149.8821533203,353150.31962890626,353099.91271972656,353101.2251464844,353102.1730102539,353103.0479614258,353053.66182861326,353056.1651611328,353058.4254516601,353060.3211791992,353011.39682617184])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_90S_180_60000(self):
        """Test for latitude = -90, longitude = 180, rho = 60000"""
        lat = -90
        lon = 180
        rho = 60000

        expected = {}
        expected['latNH'] = np.array([-12.808034707788607,-12.97745071996161,-13.1326531084718,-13.299528290273557,-12.40710260350886,-12.58209205004458,-13.232114323165533,-13.820924440944822,-13.452483546546816,-14.010694416844458,-14.629284159405003,-15.425451990196706,-15.324467643318059,-16.1064833221495,-16.846568469666238,-17.581127994144424,-17.87736012863705,-18.93476220461423,-19.886125593726973,-20.783195809127278,-21.028303977682356,-21.84793350827306,-22.617955374921948,-23.329135161871193,-23.54028362987296,-24.19739563935238,-25.005960263487665,-25.68560506703895,-25.94308953837009,-26.63593026739784,-27.240101480620496,-27.98644991160613,-28.333150313875976,-29.0145163250981,-29.654914861678492,-30.257419508743666,-30.514220961157804,-31.039107338494944,-31.53956895936011,-32.00232793600682,-32.18511745857471])
        expected['lonNH'] = np.array([355.49011807122326,355.4970029019067,355.5022758079459,355.5117561105139,355.4408041054158,355.4490003324198,355.5499232075959,355.63464487406077,355.6633863100882,355.74089529678946,355.8394139453777,355.96757561496383,356.0392652804923,356.1663887613246,356.2882393361176,356.4136962507924,356.5628949030222,356.7545500111327,356.9261790045968,357.0905133560273,357.2330730643838,357.38180726375003,357.5223452361122,357.6502610188882,357.78782102877227,357.90571009384666,358.0658916902618,358.1900098878593,358.33412687934657,358.4723425873909,358.5843030482658,358.7336109835223,358.89920208976,359.0361337222405,359.16557946739056,359.2872387968868,359.4351806943093,359.5385897583433,359.63738161449834,359.72639263976197,359.8512211770331])
        expected['rhoNH'] = np.array([312165.0061889648,311838.4063598633,311570.6226928711,311377.3557006836,312745.2689453125,312428.0748413086,311612.9606079101,310682.45003662107,311410.6767578125,310455.5217285156,309826.1158813476,308832.2199584961,308981.44774169923,308064.6204345703,307289.6081298828,306703.4151489258,306402.018774414,305491.12169189454,304665.994128418,304002.8783569336,303920.4628173828,303352.74102783203,302870.27836914064,302382.32296142576,302508.2187133789,302070.93756103516,301969.1272705078,301542.41844482423,301536.63404541014,301538.06799316406,301264.9860107422,301117.0949584961,301123.02518310543,301041.9706787109,301024.5931762695,301039.2243041992,301253.2713867187,301280.8323486328,301350.7798339844,301379.19144287106,301384.90292968747])
        expected['latSH'] = np.array([-75.09847201371281,-75.07511276675135,-75.05167155751985,-75.02818936715337,-75.01167396974029,-74.98808249634706,-74.96914921196776,-74.95017494645347,-74.93819479464926,-74.91911124610826,-74.89997305605388,-74.88190037551004,-74.8708627898113,-74.85269448661904,-74.83447154191347,-74.81620761607286,-74.80798406831215,-74.79260248230128,-74.77715259439873,-74.76167538573947,-74.75338353608706,-74.74229130887497,-74.73121274204121,-74.72012051482912,-74.71622730700221,-74.70508043827675,-74.69661100370593,-74.68816888989178,-74.68693945584118,-74.6784427005137,-74.66994594518619,-74.66355288812306,-74.66444081271516,-74.65802043489535,-74.65158639669721,-74.64516601887738,-74.64975590599963,-74.64702383033162,-74.64429175466364,-74.64153235823895,-74.6461222453612])
        expected['lonSH'] = np.array([142.56377914925147,142.54589771400438,142.5280162787573,142.51010752275351,142.51061295675208,142.49274518188332,142.50681537157357,142.52081725937208,142.5532469975513,142.5673445079982,142.58144201844513,142.57862798050706,142.59409152878797,142.5912638304716,142.58847711329022,142.58564941497386,142.61641258699558,142.62882987090666,142.64142473973618,142.65388300478227,142.68460519566898,142.67401840245546,142.6632130431885,142.65240768392155,142.65993455238691,142.64926579690334,142.63264111646353,142.61581153034862,142.61738247385773,142.60083975568796,142.5841331129781,142.55827401678044,142.55061054453168,142.52476510871236,142.49889235213635,142.47295129366864,142.44791182017136,142.40473136423856,142.36134600263063,142.31798796177938,142.2926342995803])
        expected['rhoSH'] = np.array([6371.2,6371.199240493775,6371.199620246887,6371.199240493775,6371.199620246887,6371.199620246887,6371.2,6371.199620246887,6371.2,6371.199620246887,6371.199620246887,6371.198860740661,6371.199240493775,6371.2,6371.198860740661,6371.199240493775,6371.198860740661,6371.199240493775,6371.2,6371.198860740661,6371.199240493775,6371.199620246887,6371.2,6371.198860740661,6371.199620246887,6371.199620246887,6371.2,6371.199240493775,6371.199240493775,6371.199240493775,6371.199620246887,6371.199620246887,6371.199240493775,6371.198860740661,6371.199620246887,6371.198860740661,6371.199240493775,6371.1984809875485,6371.198860740661,6371.199240493775,6371.199620246887])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_60S_180_60000(self):
        """Test for latitude = -60, longitude = 180, rho = 60000"""
        lat = -60
        lon = 180
        rho = 60000

        expected = {}
        expected['latNH'] = np.array([-74.77667448115682,-74.70887802345527,-74.64058979213348,-74.56982903233214,-74.55429718215953,-74.48210208263251,-74.40766668105769,-74.33335422288798,-74.31265874970282,-74.23240402695518,-74.15351534204154,-74.07928484614183,-74.0664031093672,-73.99116174547032,-73.91396694747084,-73.83510558331389,-73.81337192137491,-73.72718859442767,-73.6384644371092,-73.54878405330695,-73.52347137224288,-73.44615363083832,-73.36674585154776,-73.28654577031347,-73.27365037316048,-73.19145587668856,-73.11562711652309,-73.04180643197358,-73.03800884679504,-72.95958461474495,-72.88073691096633,-72.80776316987391,-72.81235305699616,-72.735813957157,-72.66034036682836,-72.58261281407363,-72.59104126750941,-72.51876420571233,-72.44464299283936,-72.3701529497512,-72.37787106351331])
        expected['lonNH'] = np.array([24.58576452127031,24.33370492768745,24.080072683048197,23.8264506836927,23.95628574962547,23.69849562732897,23.416758861802407,23.132143171540683,23.233848103376758,22.94793296962544,22.65741941101541,22.371760409357968,22.467191812441385,22.175407838645732,21.883456525215415,21.589635447499806,21.643250724937115,21.308419483897456,20.972495412590597,20.632970124043847,20.67873068393564,20.37127142599481,20.062137064160034,19.751414683343228,19.829068811564394,19.513223788870082,19.21525337123369,18.911345811661263,18.99966015762953,18.69658758868314,18.389527896808755,18.07793295932548,18.1557800403907,17.84373772551679,17.527074787669367,17.211431255555567,17.310574866452885,17.011240118529784,16.712398851774218,16.411650254692923,16.51108585617726])
        expected['rhoNH'] = np.array([258045.36323242186,258001.66428222656,257949.92064208983,257937.16093749998,257869.98413085938,257836.3228149414,257776.51018066405,257685.51525878906,257635.1326538086,257622.25142822266,257540.68653564452,257534.5618774414,257441.01501464844,257387.13260498046,257356.48500976563,257335.68061523436,257268.86837158204,257212.72567138672,257179.74487304688,257125.6194213867,257063.03610839843,257002.85891113282,256961.2501220703,256907.48923339843,256876.8416381836,256790.3916015625,256805.0713378906,256726.20421142576,256700.2959350586,256683.453125,256638.12579345703,256607.6240234375,256521.90311279296,256527.97916259765,256466.17358398438,256440.87291259764,256423.42249755858,256371.1927734375,256347.90935058592,256304.01596679687,256304.67218017578])
        expected['latSH'] = np.array([-68.23450072806517,-68.21517129271402,-68.19575989509283,-68.17630751633666,-68.15964185476182,-68.14017581562729,-68.12290909740548,-68.10560139804869,-68.09108041587322,-68.07371807500306,-68.05638305488958,-68.03974471407142,-68.02589309043464,-68.00921376848146,-67.99247980501494,-67.97574584154839,-67.96491316152475,-67.95132108507644,-67.93766070673641,-67.92395934726136,-67.91307202572435,-67.90656968563451,-67.90004002478798,-67.8934967035631,-67.88975375989793,-67.8832240990514,-67.87997292900647,-67.87669443820488,-67.87621632496297,-67.87297881529639,-67.86971398487313,-67.86955006033304,-67.87215919259597,-67.8720225888126,-67.87185866427251,-67.87168107935409,-67.87683104198828,-67.87923526857611,-67.88163949516397,-67.88401640099514,-67.88912538249429])
        expected['lonSH'] = np.array([155.09051001159494,155.0595146131414,155.02854653544458,154.99757845774775,154.9884943061516,154.95744426618475,154.9474995107532,154.93754109494333,154.94941196372082,154.9394398875326,154.9293448679393,154.90508403600742,154.90257052639285,154.87822773219094,154.85388493798902,154.82941920038203,154.84198674845484,154.8327250119403,154.82349059618247,154.81424252004626,154.82660516244397,154.80757625541634,154.78850636725366,154.7694091583343,154.7719636490839,154.7528254590295,154.7346025143239,154.71636590923998,154.7197536830683,154.70146243647102,154.68314386911703,154.6623800940402,154.66321337711892,154.6423813001504,154.62152190242517,154.60062152356494,154.59216574937247,154.56197631324102,154.53171857521784,154.50140619568134,154.4927318554354])
        expected['rhoSH'] = np.array([6371.2,6371.2,6371.199620246887,6371.199620246887,6371.2,6371.199620246887,6371.199620246887,6371.199620246887,6371.2,6371.199620246887,6371.199620246887,6371.199620246887,6371.2,6371.2,6371.2,6371.199620246887,6371.199620246887,6371.199620246887,6371.200759506225,6371.2,6371.2,6371.200759506225,6371.2,6371.2,6371.2,6371.199620246887,6371.2,6371.199620246887,6371.2,6371.2,6371.2,6371.2,6371.2,6371.2,6371.2,6371.199620246887,6371.199620246887,6371.2,6371.2,6371.199620246887,6371.199620246887])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_30S_180_60000(self):
        """Test for latitude = -30, longitude = 180, rho = 60000"""
        lat = -30
        lon = 180
        rho = 60000

        expected = {}
        expected['latNH'] = np.array([71.22917167013341,71.23160321747793,71.23408940633581,71.23656022726807,71.24676282234077,71.2494009829077,71.25427773797509,71.25949429495368,71.27215746567488,71.27733816416034,71.2821978437548,71.28533460813114,71.2957967503923,71.29882081664732,71.30143677909943,71.3044266944086,71.32144069563111,71.33092441329367,71.34025103660532,71.34948715991047,71.36636797244417,71.37510036929802,71.38385667181399,71.39247466299923,71.40843681508956,71.41682770248492,71.4299963072047,71.4432093081541,71.46334982846918,71.47603348975788,71.48854639631735,71.51297798297848,71.54439002297137,71.56828031714079,71.59184959241921,71.61508931107018,71.64291037910692,71.66336850321841,71.68364050467501,71.70342414760594,71.73010969669319])
        expected['lonNH'] = np.array([217.348039466098,217.3244206719481,217.3009111608249,217.27744263083676,217.22659870265517,217.20311651228866,217.15682149009433,217.1108133358451,217.03744344378083,216.99123038385653,216.94490804090552,216.8500913548474,216.7279812328659,216.6330279430244,216.53785608712943,216.443066721828,216.28270754049444,216.14916368184234,216.0154012571368,215.88148856826953,215.7201048585605,215.56631631920848,215.4123365345597,215.25813818385748,215.07625024626006,214.92127325399247,214.73864765596466,214.55578983150508,214.34487358993508,214.16096391634332,213.97683567669813,213.75223173603143,213.49915956690413,213.2732578902951,213.04686444006586,212.81997921621638,212.57808123657122,212.3638865041996,212.14950052653126,211.93482768091775,211.6916046445736])
        expected['rhoNH'] = np.array([6371.199620246887,6371.198860740661,6371.198860740661,6371.199240493775,6371.199240493775,6371.199620246887,6371.197721481323,6371.199240493775,6371.1984809875485,6371.199240493775,6371.198101234436,6371.199620246887,6371.198101234436,6371.199240493775,6371.198101234436,6371.2,6371.1984809875485,6371.198101234436,6371.199240493775,6371.198860740661,6371.2,6371.198860740661,6371.199240493775,6371.1984809875485,6371.1984809875485,6371.198860740661,6371.198860740661,6371.199620246887,6371.197721481323,6371.199240493775,6371.198860740661,6371.199240493775,6371.198860740661,6371.198860740661,6371.1984809875485,6371.198101234436,6371.1984809875485,6371.1984809875485,6371.199240493775,6371.198860740661,6371.199240493775])
        expected['latSH'] = np.array([-63.655992700973826,-63.64011934134271,-63.62420500057658,-63.60822235791878,-63.59244462093602,-63.57646197827822,-63.562460090479675,-63.54840356116779,-63.53452461677432,-63.52048174784079,-63.50639789777222,-63.49236868921702,-63.47850340520188,-63.464405894754975,-63.45028106355139,-63.43612891159111,-63.42651200523974,-63.416731174348286,-63.4069366830785,-63.397128531430354,-63.3874843043223,-63.38600898346158,-63.3845200022225,-63.38303102098345,-63.38171962466279,-63.38025796418043,-63.38223871903972,-63.38417849276399,-63.386364153298416,-63.38838588929272,-63.390393964908725,-63.39585811624474,-63.401472531742485,-63.4069366830785,-63.41244181554953,-63.41794694802056,-63.42530989194583,-63.43254989246603,-63.43973525147288,-63.446934270858094,-63.454310875161696])
        expected['lonSH'] = np.array([157.65909827162662,157.62879955246842,157.59848717293193,157.5681747933954,157.54816233912726,157.5177953180774,157.5043944869258,157.49099365577425,157.48796105178278,157.47451923949617,157.46105010645292,157.43468557625667,157.41871659397717,157.39239304491596,157.3660285147197,157.33963666376678,157.34014209776535,157.33023832346882,157.3202935680373,157.31032149184907,157.31079960509098,157.2954863209718,157.2801593764743,157.26477779046343,157.2598873750177,157.24449212862848,157.23322231649797,157.2219661647458,157.22116020242373,157.2098220884015,157.1984566536226,157.18773325662568,157.18756933208562,157.176818614332,157.16598593430837,157.15512593352804,157.14660185744387,157.1274363466328,157.1082571754434,157.08902336274068,157.08041732438645])
        expected['rhoSH'] = np.array([6371.199620246887,6371.199240493775,6371.199620246887,6371.199620246887,6371.199240493775,6371.199620246887,6371.199240493775,6371.199240493775,6371.199620246887,6371.199240493775,6371.199620246887,6371.199240493775,6371.199620246887,6371.199620246887,6371.199240493775,6371.199620246887,6371.198860740661,6371.198860740661,6371.2,6371.198860740661,6371.199240493775,6371.199240493775,6371.2,6371.199240493775,6371.2,6371.2,6371.199620246887,6371.199620246887,6371.199240493775,6371.199240493775,6371.199620246887,6371.199620246887,6371.199240493775,6371.198860740661,6371.199240493775,6371.199620246887,6371.2,6371.199620246887,6371.199620246887,6371.199620246887,6371.198860740661])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_0N_180_60000(self):
        """Test for latitude = 0, longitude = 180, rho = 60000"""
        lat = 0
        lon = 180
        rho = 60000

        expected = {}
        expected['latNH'] = np.array([71.2301996136035,71.2329777930484,71.23582085929041,71.23860928401908,71.24256737864309,71.24523627506127,71.24857111492354,71.25199986988689,71.25676221928568,71.26001168178331,71.26323382352426,71.26216489891915,71.26247738007368,71.26138796490106,71.26008852141148,71.25883518169877,71.26227588949317,71.26441715379796,71.26628008789409,71.26804910688912,71.27114830522501,71.27152567317665,71.27169642790591,71.27164178639255,71.27288658836878,71.27289341855796,71.27528056967287,71.27765918305133,71.2813321172775,71.28321895703571,71.28506140056433,71.29637219382987,71.3084821192283,71.3190518369689,71.32950373394631,71.33977292336343,71.34964596180868,71.35820248129141,71.36673680265935,71.37469226549511,71.38378495482769])
        expected['lonNH'] = np.array([207.5714569523035,207.5530974038145,207.53488811948725,207.5165832125116,207.49516373927443,207.4768178511638,207.44142381088477,207.40619369514584,207.36784901314542,207.33242765210971,207.29697897031735,207.21731164383831,207.13472099639452,207.05502634915882,206.97534536230145,206.89575999809247,206.7761087442122,206.65938081129667,206.54242065194936,206.42543317184538,206.3053447858582,206.16660998343693,206.02771125647556,205.8887169068658,205.7465396891028,205.60738141495295,205.44147612001336,205.27555716469539,205.1064826619809,204.94019487644778,204.7738524494013,204.57155590656384,204.3659125710331,204.1632198772238,203.9605271834145,203.75783448960522,203.56672579662825,203.37885461331788,203.19127029795266,203.00353571842567,202.8127275537722])
        expected['rhoNH'] = np.array([6371.1984809875485,6371.198101234436,6371.198101234436,6371.199620246887,6371.198860740661,6371.197721481323,6371.197341728211,6371.1984809875485,6371.2,6371.1984809875485,6371.197721481323,6371.197721481323,6371.1984809875485,6371.199620246887,6371.1984809875485,6371.197721481323,6371.197721481323,6371.199240493775,6371.199620246887,6371.198101234436,6371.197721481323,6371.198860740661,6371.199240493775,6371.197721481323,6371.198101234436,6371.2,6371.1984809875485,6371.198101234436,6371.199240493775,6371.198101234436,6371.197721481323,6371.199620246887,6371.1984809875485,6371.197721481323,6371.198860740661,6371.2,6371.198101234436,6371.198101234436,6371.2,6371.198101234436,6371.198101234436])
        expected['latSH'] = np.array([-60.879206614661825,-60.86463099097301,-60.850069027662556,-60.835479743595414,-60.82121830860842,-60.80649242075788,-60.794116117981815,-60.78168517369238,-60.76969136150984,-60.75734237949047,-60.744884114444346,-60.7319613965347,-60.71950313148858,-60.70660773433562,-60.69373965793929,-60.68083060040797,-60.6739730904813,-60.66671942958274,-60.65952041019753,-60.65229407005566,-60.64550486202069,-60.647663201798395,-60.64982154157613,-60.6520618436239,-60.65476659853522,-60.65689761755627,-60.663195051971,-60.669560788277465,-60.67632267555578,-60.682606449592186,-60.68894486514196,-60.69897158284354,-60.709353470381956,-60.719284565435146,-60.72928396238004,-60.7393380008383,-60.7509083412923,-60.762109851531136,-60.773366003283314,-60.78463581541382,-60.796260797381194])
        expected['lonSH'] = np.array([157.2090980883495,157.18120359577915,157.15322714093878,157.1252097049634,157.10776540182317,157.07987090925283,157.06810932350209,157.0563067566163,157.05496803953898,157.04309717076148,157.03128094349736,157.0074709040507,156.99407007289915,156.97017807118243,156.94620410719568,156.92220282245228,156.92717520016805,156.92164274694034,156.91601467106423,156.91035927443147,156.91522236912053,156.90530493444567,156.8953191978791,156.8852514990425,156.88567497077105,156.87571655496117,156.87161844145916,156.86739738455208,156.87383142275024,156.86976063000492,156.86558055423288,156.86398228996708,156.87312108307657,156.8716730829725,156.87011579984176,156.86843557330593,156.86873610162942,156.85827225182095,156.84764447747241,156.83700304274552,156.8371942880423])
        expected['rhoSH'] = np.array([6371.198860740661,6371.198860740661,6371.198860740661,6371.2,6371.2,6371.199240493775,6371.1984809875485,6371.198860740661,6371.199240493775,6371.199240493775,6371.2,6371.1984809875485,6371.199240493775,6371.198860740661,6371.199620246887,6371.2,6371.198860740661,6371.198860740661,6371.199620246887,6371.199240493775,6371.2,6371.199620246887,6371.199620246887,6371.199620246887,6371.2,6371.199240493775,6371.199240493775,6371.199240493775,6371.2,6371.198860740661,6371.199240493775,6371.199620246887,6371.2,6371.198860740661,6371.199620246887,6371.199620246887,6371.2,6371.199240493775,6371.199240493775,6371.199620246887,6371.198860740661])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_30N_180_60000(self):
        """Test for latitude = 30, longitude = 180, rho = 60000"""
        lat = 30
        lon = 180
        rho = 60000

        expected = {}
        expected['latNH'] = np.array([73.29961203588125,73.30246705495432,73.30531524383821,73.30815489498565,73.3113975272941,73.31424571617801,73.31705121637958,73.31986696186493,73.32304641492357,73.32575287738219,73.32841323606391,73.32653322649486,73.32504766035038,73.32310447153151,73.32116299025994,73.31919248068439,73.31858971649012,73.31749176358105,73.31633746161131,73.31507387661486,73.31412448032023,73.31104235745727,73.30788510251342,73.30463051737391,73.30176013037521,73.29835869616855,73.29653332811287,73.294520129855,73.29273232783976,73.29027516728584,73.28769677087416,73.29260596934012,73.29783447914976,73.30232020588716,73.30663517789532,73.31057790459371,73.31506533887841,73.31882023537462,73.32236510355386,73.3257733679497,73.32957949086469])
        expected['lonNH'] = np.array([203.7194761472264,203.70031063641537,203.68125440863102,203.66208889781996,203.64851048174998,203.6293996124523,203.59539893076396,203.56142556983232,203.53297100175004,203.49890201817,203.46483303459,203.3815593682292,203.3038181550961,203.22053082835697,203.1374620676713,203.05440696736395,202.94174982719375,202.82345095076911,202.70516573472284,202.58677123564985,202.4737589256428,202.3329340853355,202.1921502261632,202.0512707443425,201.91580077234445,201.77483932825373,201.60856520309895,201.4422364364308,201.28119423618026,201.1147288657287,200.9482498348988,200.74490144292918,200.54700354191723,200.3437234518393,200.14063460705816,199.93762772454704,199.75420982457553,199.56568294310483,199.3773882880659,199.18938050097213,199.00679588407937])
        expected['rhoNH'] = np.array([6371.199240493775,6371.198101234436,6371.198101234436,6371.1984809875485,6371.199240493775,6371.197721481323,6371.1984809875485,6371.199240493775,6371.2,6371.199240493775,6371.198860740661,6371.198101234436,6371.1984809875485,6371.1984809875485,6371.198101234436,6371.1984809875485,6371.197721481323,6371.198860740661,6371.199620246887,6371.199620246887,6371.199240493775,6371.198860740661,6371.199620246887,6371.198101234436,6371.1984809875485,6371.199240493775,6371.2,6371.199240493775,6371.198860740661,6371.1984809875485,6371.198101234436,6371.198860740661,6371.1984809875485,6371.198860740661,6371.2,6371.199240493775,6371.199240493775,6371.1984809875485,6371.198101234436,6371.1984809875485,6371.1984809875485])
        expected['latSH'] = np.array([-62.01245794137199,-61.99874292151861,-61.98506888280025,-61.97117627802845,-61.95758420158012,-61.943828200591724,-61.933309709269906,-61.922914161353134,-61.91253227381472,-61.9020820843846,-61.89157725344111,-61.880799214930846,-61.87032170474404,-61.85951634547709,-61.84877928810181,-61.83785098542981,-61.83423098516968,-61.83014653204603,-61.82626698459745,-61.82212788996043,-61.81842592743027,-61.824204267468104,-61.83007823015433,-61.83596585321888,-61.84205838195854,-61.84787770313139,-61.85901091147849,-61.870144119825625,-61.88152321498285,-61.89258812143828,-61.90373499016374,-61.91877506671611,-61.934238614997014,-61.949319672684396,-61.96437340961512,-61.97942714654582,-61.99579227979717,-62.01193884699509,-62.028003451922956,-62.044109037985834,-62.06039220896716])
        expected['lonSH'] = np.array([153.56601178884807,153.53773480568424,153.50930755835864,153.48101691481645,153.46917336679564,153.44074611947005,153.43108823198367,153.42118445768713,153.42808294874885,153.4183021178574,153.40850762658758,153.3872110967555,153.3822933605531,153.36109245336937,153.33965931975385,153.3183764503001,153.33370339479762,153.33287011171888,153.33170897955998,153.3307937342112,153.34627094287043,153.33761026300286,153.3287856585952,153.3198517711608,153.32772014908468,153.3189501861904,153.31546678971367,153.31191509134527,153.3252066394701,153.3218188656418,153.31829448803006,153.31822618613836,153.33493282884822,153.33493282884822,153.33491916846987,153.33474158355145,153.34150347082976,153.3311762248047,153.32084897877965,153.31038512897118,153.31720165776287])
        expected['rhoSH'] = np.array([6371.199620246887,6371.199240493775,6371.2,6371.2,6371.199620246887,6371.199620246887,6371.198860740661,6371.2,6371.199620246887,6371.199620246887,6371.199620246887,6371.199240493775,6371.199620246887,6371.2,6371.2,6371.199620246887,6371.2,6371.199240493775,6371.2,6371.199240493775,6371.199240493775,6371.199240493775,6371.199620246887,6371.2,6371.199240493775,6371.199620246887,6371.199240493775,6371.199240493775,6371.199620246887,6371.199620246887,6371.199620246887,6371.199240493775,6371.200759506225,6371.199240493775,6371.199240493775,6371.198860740661,6371.199240493775,6371.2,6371.199240493775,6371.199620246887,6371.199620246887])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_60N_180_60000(self):
        """Test for latitude = 60, longitude = 180, rho = 60000"""
        lat = 60
        lon = 180
        rho = 60000

        expected = {}
        expected['latNH'] = np.array([78.05341516047366,78.05619846256045,78.05897920332629,78.06174969880837,78.06122377424228,78.0639763404778,78.06700979824292,78.07002703430878,78.06972821353258,78.0727206901627,78.07569865264082,78.07690418102933,78.07477657710288,78.07588562906936,78.07696309141093,78.07798761978643,78.07629714796686,78.07786126128678,78.0792810868605,78.08061126620136,78.07858867643338,78.07905825193883,78.07939207743452,78.07960808216701,78.07647473288527,78.0764568036387,78.07782113392541,78.07903093118215,78.07687942159359,78.07776136977017,78.07847341699114,78.08631532793197,78.09078397919644,78.09813923915891,78.10521616891269,78.1120352590253,78.11620935838182,78.12322652398036,78.13000463295795,78.13654539286189,78.13985888838299])
        expected['lonNH'] = np.array([208.27085466293445,208.2422361703121,208.21359035693305,208.1849308831757,208.1767756373067,208.14817080506268,208.1011108016813,208.05390053413817,208.02744038129353,207.98040769866884,207.93337501604412,207.81140149784602,207.71027371699483,207.58850510447184,207.4667228315705,207.34480395488578,207.2054680958175,207.04490400880886,206.8842716199085,206.72340700457636,206.58363401340122,206.4007625285633,206.21775443994198,206.03447314375384,205.87250203777617,205.68901583591295,205.47997106617555,205.27044818319624,205.0826179810209,204.87316339993328,204.6635175735489,204.4019213283374,204.16211338657826,203.90028491493499,203.6384427829134,203.376409405595,203.15078093655282,202.9031729187615,202.6554556179435,202.40799786431393,202.1830797349454])
        expected['rhoNH'] = np.array([6371.199620246887,6371.199620246887,6371.198860740661,6371.199240493775,6371.199620246887,6371.199240493775,6371.1984809875485,6371.199620246887,6371.199620246887,6371.198860740661,6371.199620246887,6371.199240493775,6371.199240493775,6371.2,6371.199620246887,6371.199620246887,6371.199240493775,6371.199620246887,6371.2,6371.199620246887,6371.199240493775,6371.2,6371.2,6371.2,6371.199240493775,6371.2,6371.2,6371.198860740661,6371.198860740661,6371.199620246887,6371.2,6371.2,6371.199240493775,6371.199240493775,6371.1984809875485,6371.199620246887,6371.199620246887,6371.199240493775,6371.199620246887,6371.2,6371.199240493775])
        expected['latSH'] = np.array([78.35908149375737,78.4298883573356,78.50169413607993,78.57559251403124,78.72009028856475,78.79297182210337,78.86579786035497,78.94208765828944,79.08744176779012,79.16556547151673,79.24401617054986,79.31065064231885,79.44919505321704,79.52005741208227,79.58882204909867,79.65892881828697,79.79580239415944,79.8653379887784,79.93488297490747,80.00425122989176,80.14139886710468,80.20195617805966,80.26358839003527,80.32433438496608,80.45145103560918,80.51513486565673,80.56785453453912,80.61650938709171,80.73421489083219,80.78655548421564,80.83829416717849,80.86844518349587,80.9629630487778,80.99728048048887,81.02744430341095,81.05850629620886,81.15317613319982,81.18309406931178,81.2133714441288,81.24222387073023,81.33408308487772])
        expected['lonSH'] = np.array([193.71882244752047,193.808393548296,193.8978007245315,193.9839840514787,194.0134358271798,194.1078427018877,194.20533682210046,194.29539969649625,194.3285944158625,194.42085661117105,194.51518152360893,194.61249805890327,194.63764681542727,194.73108380327304,194.8298756594281,194.92705559093903,194.95169891346444,195.04794993924827,195.14570360664948,195.24536972701833,195.27158399305281,195.367206641433,195.46039774246864,195.55891639105693,195.57856001510987,195.67336304078967,195.75462863153447,195.84650833624949,195.84605754376426,195.9332380783303,196.02041861289635,196.08635725914365,196.06499242741984,196.1259996770864,196.18971168166428,196.2545301768877,196.22365772183923,196.28676866977017,196.34892339121728,196.41199335801318,196.38168097847665])
        expected['rhoSH'] = np.array([260249.46245117186,260356.3037109375,260449.3887939453,260506.9168334961,260577.27749023438,260681.68833007812,260818.0591918945,260887.18033447265,260991.51826171874,261063.5316040039,261140.84326171875,261266.78762207032,261336.07889404296,261421.33802490233,261533.25886230468,261621.60462646483,261697.40942382812,261786.36279296875,261875.70502929686,261967.47768554688,262046.39342041014,262156.22409667965,262240.2680175781,262352.6263305664,262433.1704467773,262506.3989990234,262570.19752197264,262703.2873168945,262733.3273071289,262823.884753418,262908.998059082,262989.3477416992,263029.23093261715,263066.7809204101,263136.5582763672,263208.4500976562,263205.2905517578,263278.34897460934,263344.28626708983,263417.0530395508,263436.4477905273])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_90N_180_60000(self):
        """Test for latitude = 90, longitude = 180, rho = 60000"""
        lat = 90
        lon = 180
        rho = 60000

        expected = {}
        expected['latNH'] = np.array([84.14229828665555,84.15131029437855,84.16028900492935,84.1692719843484,84.17346273229101,84.18240942633008,84.19517419611519,84.20790609561492,84.21584064099636,84.22851960653003,84.2411878998931,84.26737954092599,84.28869613443877,84.31474562215955,84.34069607213738,84.3666115173957,84.39167148146046,84.4214873916217,84.45127256593165,84.48096638646146,84.50577875616882,84.53655601545572,84.56726369219045,84.59789879816525,84.62357817501038,84.65407795786226,84.68851961363886,84.722848998181,84.7521534979281,84.78626218198268,84.82023212781974,84.86767291424736,84.91000685360991,84.9570519159525,85.0038814004494,85.05049402644015,85.09144570626944,85.13712473077801,85.18255359960823,85.22772334813682,85.26770001846208])
        expected['lonNH'] = np.array([255.73632539421095,255.67977142788322,255.622834970962,255.56548870269057,255.50158545281593,255.4443757883279,255.36555540530597,255.2863525316905,255.20026482739166,255.12073410469603,255.04106677821702,254.8571434442469,254.66532441159626,254.47896953028163,254.290565592216,254.10104150312648,253.88124601563547,253.66573988694324,253.4481573807433,253.2274056667685,252.99916806546335,252.76855355832703,252.5352342962794,252.29890975099696,252.054689507034,251.81317401798233,251.54605897992147,251.27498243214202,250.99609214795206,250.71848593932606,250.43675429644136,250.1120197825423,249.77794156985863,249.44195090420735,249.0993759361962,248.75046255263527,248.40165845210106,248.04957586076523,247.69159198598652,247.3269145258212,246.95466921605552])
        expected['rhoNH'] = np.array([6371.2,6371.199240493775,6371.198860740661,6371.2,6371.200759506225,6371.199240493775,6371.199620246887,6371.2,6371.2,6371.199620246887,6371.199620246887,6371.2,6371.199620246887,6371.199620246887,6371.2,6371.199620246887,6371.199620246887,6371.199620246887,6371.2,6371.2,6371.199620246887,6371.2,6371.200759506225,6371.2,6371.199620246887,6371.199240493775,6371.2,6371.2,6371.199240493775,6371.2,6371.200759506225,6371.200759506225,6371.199620246887,6371.2,6371.199620246887,6371.2,6371.199240493775,6371.2,6371.2,6371.2,6371.2])
        expected['latSH'] = np.array([47.544486685306204,47.55122466692242,47.55758015794512,47.56364878102267,47.510786531941356,47.517585985260105,47.52181045726176,47.52572757075076,47.47063184981086,47.47521149164935,47.47951109573187,47.48260517142589,47.42664543155597,47.43043960163991,47.43391275283287,47.43705463985107,47.37875897528501,47.380323088604946,47.381460315101755,47.38230042836966,47.32409355626282,47.32634410359434,47.32829753769696,47.32985140573314,47.27244366575918,47.27466689233402,47.27610123205972,47.27720772270526,47.21921941665185,47.22109088848444,47.222644756520616,47.2230579829654,47.16460180895385,47.165950771314925,47.166900167609555,47.167610507283236,47.11030863524142,47.112682125978,47.11483363556655,47.116544597953634,47.0595876504649])
        expected['lonSH'] = np.array([5.791035651950549,5.756712243823942,5.722305165880003,5.687765753020894,5.768920780078517,5.734572185629346,5.696477232420422,5.65820213297214,5.735513471074338,5.697460779660904,5.659333809940247,5.618563130123971,5.6932947911540195,5.652742677391185,5.612097075414085,5.571295232859722,5.6405584736855285,5.59470698690041,5.548805981243808,5.502688543967882,5.57183182959639,5.527048413642732,5.482137785415783,5.437168246807242,5.507260074956736,5.462479647210841,5.416120165106202,5.369575414120327,5.438118923762343,5.3917888968485,5.345322693038081,5.294993163478373,5.35955168462651,5.3092379498792575,5.258862316542651,5.208312940269034,5.27469597569921,5.2261760193827325,5.177641548914268,5.128896623242002,5.195070911015671])
        expected['rhoSH'] = np.array([353340.98607177736,353350.90218505857,353360.57525634766,353370.0781982422,353328.6881469726,353338.7014770508,353346.1871704101,353353.08956298826,353309.4635253906,353317.3137817383,353324.9939086914,353330.8755249023,353285.9370605469,353292.5964111328,353298.98841552733,353304.8943359375,353256.6018920898,353260.24752197263,353263.26124267577,353266.177746582,353218.0554321289,353222.3086669922,353225.954296875,353229.405493164,353182.13382568356,353186.21693115233,353189.0362182617,353191.66107177734,353143.4172363281,353146.69830322266,353149.8821533203,353150.31962890626,353099.91271972656,353101.2251464844,353102.1730102539,353103.0479614258,353053.66182861326,353056.1651611328,353058.4254516601,353060.3211791992,353011.39682617184])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_90S_270_60000(self):
        """Test for latitude = -90, longitude = 270, rho = 60000"""
        lat = -90
        lon = 270
        rho = 60000

        expected = {}
        expected['latNH'] = np.array([-12.77351493172337,-12.991206720950004,-13.139701863695251,-13.299849309164543,-12.40977320747433,-12.595185522683494,-13.245474173182075,-13.86089470796773,-13.454648716513717,-14.035679248828359,-14.61375913942156,-15.431640141584737,-15.340300021814159,-16.11246656786244,-16.846773375341343,-17.54304968952161,-17.885959336802102,-18.932194053486313,-19.886098272970287,-20.77461026134057,-21.005197447720207,-21.874755661143695,-22.612477563207605,-23.329770369464,-23.52932800644426,-24.19538756373639,-24.967902449432344,-25.68560506703895,-25.937447802115656,-26.63593026739784,-27.240101480620496,-27.978800099735707,-28.325937634112435,-29.007016777389424,-29.662414409387168,-30.276612340311402,-30.52055937670758,-31.043751867130553,-31.53956895936011,-32.02082408827921,-32.1852540623581])
        expected['lonNH'] = np.array([355.479381013848,355.5007731663285,355.50429754394025,355.5117561105139,355.44165104887287,355.45307112516514,355.5540759626113,355.6471851013769,355.6640693290052,355.7487090332,355.834523529932,355.9695427094448,356.0442376582081,356.16824657277886,356.288293977631,356.401347268773,356.56570894096023,356.7534845016222,356.9261790045968,357.08761735581925,357.2252320072167,357.3909050757245,357.52032350011785,357.6503156604016,357.78402344359375,357.90502707492965,358.0522313119218,358.1900098878593,358.3320778225956,358.4723425873909,358.5843030482658,358.7307423040709,358.8964700140921,359.0332650427891,359.1684754675986,359.29469736346044,359.43769420392385,359.5403929282842,359.63738161449834,359.733905847849,359.8512484977898])
        expected['rhoNH'] = np.array([312033.56907958986,311869.7344726562,311590.74656982423,311375.4113647461,312755.1364501953,312477.8498413086,311664.2181640625,310841.4967163086,311419.1346191406,310553.5162597656,309762.90065917966,308857.1317626953,309044.3227050781,308087.7823364258,307290.45877685543,306534.5495727539,306441.8776611328,305470.3659057617,304666.0427368164,303960.7591796875,303804.385961914,303486.0738647461,302835.83931884763,302378.92037353513,302451.128149414,302060.8027099609,301753.1115478515,301542.39414062497,301503.21577148436,301538.09229736327,301264.9860107422,301069.48303222656,301077.35759277345,300993.6053222656,301073.4446166992,301167.04008789064,301296.5328613281,301311.6986816406,301350.7555297851,301513.18049316405,301384.90292968747])
        expected['latSH'] = np.array([-75.09847201371281,-75.07509910637302,-75.05167155751985,-75.02817570677502,-75.01167396974029,-74.98808249634706,-74.96914921196776,-74.95017494645347,-74.93819479464926,-74.91911124610826,-74.89997305605388,-74.88190037551004,-74.8708627898113,-74.85269448661904,-74.83447154191347,-74.81620761607286,-74.80798406831215,-74.79260248230128,-74.77715259439873,-74.76167538573947,-74.75336987570873,-74.74229130887497,-74.73119908166288,-74.72012051482912,-74.71622730700221,-74.70508043827675,-74.69661100370593,-74.68816888989178,-74.68693945584118,-74.6784427005137,-74.66993228480786,-74.66355288812306,-74.66444081271516,-74.65802043489535,-74.65158639669721,-74.64516601887738,-74.64975590599963,-74.64702383033162,-74.64427809428528,-74.64153235823895,-74.6461222453612])
        expected['lonSH'] = np.array([142.56376548887312,142.54589771400438,142.52800261837893,142.51012118313184,142.51064027750877,142.492731521505,142.5068017111952,142.52081725937208,142.55321967679464,142.5673445079982,142.58144201844513,142.57862798050706,142.59407786840964,142.59127749084993,142.5884634529119,142.5856357545955,142.61641258699558,142.628843531285,142.64142473973618,142.65388300478227,142.68463251642567,142.6739910816988,142.6632130431885,142.65240768392155,142.65993455238691,142.64926579690334,142.63265477684186,142.61581153034862,142.61739613423606,142.60083975568796,142.58416043373478,142.5582603564021,142.55059688415335,142.524751448334,142.498878691758,142.47295129366864,142.44791182017136,142.40473136423856,142.36134600263063,142.31798796177938,142.2926342995803])
        expected['rhoSH'] = np.array([6371.199240493775,6371.199620246887,6371.199620246887,6371.199240493775,6371.199620246887,6371.2,6371.199620246887,6371.2,6371.2,6371.199620246887,6371.199620246887,6371.199240493775,6371.198860740661,6371.2,6371.198860740661,6371.199620246887,6371.199620246887,6371.199620246887,6371.200759506225,6371.198860740661,6371.199240493775,6371.199620246887,6371.199240493775,6371.198860740661,6371.199620246887,6371.199240493775,6371.2,6371.199240493775,6371.198860740661,6371.199240493775,6371.199620246887,6371.198860740661,6371.199240493775,6371.198860740661,6371.199620246887,6371.198860740661,6371.199240493775,6371.199240493775,6371.198860740661,6371.198860740661,6371.199620246887])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_60S_270_60000(self):
        """Test for latitude = -60, longitude = 270, rho = 60000"""
        lat = -60
        lon = 270
        rho = 60000

        expected = {}
        expected['latNH'] = np.array([36.98854885136197,36.933815130448075,36.87923167369592,36.82472676411921,36.905719147297226,36.851835784935,36.7711131942292,36.69145611303392,36.74359094696863,36.664777394135854,36.5870976527053,36.50156319372923,36.54357227221939,36.459554115239065,36.37687126024148,36.295356367591964,36.29596425442809,36.17790443462442,36.063044558446904,35.95075283339731,35.95210521085297,35.85638010963524,35.76321632935627,35.67217673790917,35.68642451251782,35.598332147697576,35.51000414135097,35.42416573895684,35.4356541171408,35.35298492252155,35.27269263373346,35.17638013624711,35.169806079170975,35.078274714103635,34.99033261344513,34.90552215452109,34.91048770204769,34.83911564031564,34.76998388063135,34.703208536210724,34.70843704602037])
        expected['lonNH'] = np.array([282.52828882871955,282.5432879241369,282.5580957742575,282.5735866432951,282.4513808986652,282.46624339029916,282.51307116724877,282.5601721517652,282.46763674888984,282.51561199762,282.56473471813075,282.6258785715807,282.5457467922381,282.60814740049534,282.6717774428032,282.7372652965653,282.7213099746641,282.85228568218827,282.9852284841934,283.1211765694334,283.11289838015927,283.23291846425474,283.35534277493804,283.4802805952359,283.4581234615684,283.58573871602096,283.72277963152806,283.8625799434599,283.8528264333251,283.9968614625423,284.1427543032138,284.3420045816814,284.39235673624273,284.5978634679901,284.80610227540546,285.01868508313294,285.05146999114896,285.23968268391786,285.4306547731114,285.6244135794863,285.66659682780033])
        expected['rhoNH'] = np.array([63359.418981933595,63642.64189147949,63928.49573059082,64215.87465820312,63915.59627685547,64200.514404296875,64645.33593444824,65091.92559509277,64952.000244140625,65399.20358581543,65846.82009887695,66360.48934936523,66282.78274841308,66796.03275146484,67311.13594970702,67828.64526367188,68001.53318481446,68768.05117187499,69538.11757202148,70315.16535339355,70493.25437316894,71193.51911315917,71896.12920837403,72603.19912414551,72706.18209228515,73415.69458007812,74168.21334838867,74925.04003601075,75073.14375,75832.15173950195,76596.3425994873,77540.96175842285,77868.98338317871,78819.18035583496,79773.94651794434,80734.81303405762,80974.38560180664,81841.14018249512,82713.96473693848,83589.77263183593,83835.56707458496])
        expected['latSH'] = np.array([-77.6142355907036,-77.59998781609494,-77.5856717395946,-77.5713010215809,-77.5572718130257,-77.54276449122858,-77.52909045251022,-77.51536177227848,-77.50202924301863,-77.48820494013853,-77.47432599574506,-77.46487301393375,-77.45577520195928,-77.4461856163646,-77.43656871001323,-77.42692448290515,-77.41650161423172,-77.40547768891133,-77.39449474472593,-77.38349814016223,-77.37293866770537,-77.36726961069428,-77.36158689330483,-77.35593149667204,-77.35075421328119,-77.34501685437837,-77.34156077865833,-77.33818666520835,-77.33524968386524,-77.33179360814523,-77.32832387204687,-77.32634311718755,-77.32493609821853,-77.32292802260255,-77.32097458849992,-77.31903481477565,-77.32350175849282,-77.32743594745475,-77.3313701364167,-77.3353316461353,-77.3398395709875])
        expected['lonSH'] = np.array([175.56199397309217,175.48391125050057,175.4058968298007,175.3281556166676,175.2855898777601,175.2074661740335,175.17403922823544,175.14063960319407,175.1426886599451,175.1090431480936,175.07554790040385,175.02878842534597,175.01775083964722,174.9709230626976,174.9239586819646,174.87710358425832,174.8915699249204,174.87021875357493,174.8487719595811,174.8275437316407,174.84203739305946,174.80630184332196,174.77049799169276,174.73494002687366,174.73500832876536,174.69923179789285,174.6611330027025,174.6230751886472,174.62099881113951,174.58272243103076,174.54441873016532,174.50738544448552,174.5062516330833,174.46886317756665,174.43157034469837,174.39422287031675,174.3817509448923,174.3324642998415,174.28304105100727,174.2337270851998,174.22106391447858])
        expected['rhoSH'] = np.array([6371.199240493775,6371.198860740661,6371.198101234436,6371.1984809875485,6371.1984809875485,6371.198101234436,6371.198101234436,6371.198860740661,6371.198860740661,6371.198101234436,6371.1984809875485,6371.197721481323,6371.198101234436,6371.198860740661,6371.198101234436,6371.198101234436,6371.197721481323,6371.197341728211,6371.198860740661,6371.1984809875485,6371.1984809875485,6371.198101234436,6371.198101234436,6371.197721481323,6371.198860740661,6371.197721481323,6371.198101234436,6371.1984809875485,6371.1984809875485,6371.1984809875485,6371.1984809875485,6371.199240493775,6371.199620246887,6371.198860740661,6371.199620246887,6371.198860740661,6371.199240493775,6371.198860740661,6371.199240493775,6371.199240493775,6371.1984809875485])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_30S_270_60000(self):
        """Test for latitude = -30, longitude = 270, rho = 60000"""
        lat = -30
        lon = 270
        rho = 60000

        expected = {}
        expected['latNH'] = np.array([58.39521548382818,58.43501841121643,58.47464716878085,58.51403003953514,58.54821172123647,58.587529705193646,58.63858536923949,58.68910486343549,58.73434803649766,58.785120247692944,58.835475817348865,58.893214821497565,58.94540429694564,59.00324575393189,59.06113843733692,59.11905161130946,59.17533578516495,59.23787641230017,59.30064585077258,59.3633708930154,59.419798500843456,59.47963778816194,59.53910483017066,59.59891338163787,59.65233570623113,59.712427710548894,59.77856784737672,59.84452356909694,59.90415795074033,59.970666917783326,60.03705635651585,60.12191462676409,60.20029104748998,60.28584258193898,60.371206286185796,60.45707200933661,60.53601533576362,60.622389908007605,60.708784970819096,60.7952210147656,60.874895171433806])
        expected['lonNH'] = np.array([282.85408885212917,282.8253747368584,282.79649669704764,282.7674820534534,282.6873502741108,282.6584722343,282.62956687373253,282.6002790225715,282.5195461865819,282.49058618450107,282.4613529748534,282.4195248963763,282.32545953112685,282.2836587734064,282.24153016660574,282.1991283522383,282.1226029127775,282.0990524205193,282.07539264523433,282.0513777001126,281.97386871341126,281.95556380643563,281.93709497491994,281.9182982943241,281.84546115701505,281.826937683986,281.8116380602451,281.7960652289375,281.72563231821636,281.71033269447554,281.69475986316786,281.6939129197108,281.63744091565314,281.6370584250596,281.63645736841266,281.6358836325224,281.5767615150667,281.5746304960457,281.57225359021453,281.56979472211333,281.5097163781739])
        expected['rhoNH'] = np.array([6371.199240493775,6371.199620246887,6371.199240493775,6371.199240493775,6371.199620246887,6371.198860740661,6371.199620246887,6371.1984809875485,6371.199620246887,6371.199620246887,6371.1984809875485,6371.1984809875485,6371.199240493775,6371.199620246887,6371.198860740661,6371.200759506225,6371.1984809875485,6371.198101234436,6371.2,6371.199240493775,6371.198860740661,6371.2,6371.199240493775,6371.1984809875485,6371.198860740661,6371.198860740661,6371.2,6371.198860740661,6371.1984809875485,6371.199620246887,6371.199620246887,6371.199240493775,6371.1984809875485,6371.199240493775,6371.198860740661,6371.199240493775,6371.198101234436,6371.199240493775,6371.199240493775,6371.1984809875485,6371.1984809875485])
        expected['latSH'] = np.array([-77.27189284912421,-77.27340915111995,-77.27495277387237,-77.27645541548978,-77.27689254759667,-77.2783678684574,-77.27556749089769,-77.27279443409466,-77.26892854702442,-77.26614182984306,-77.26330047114834,-77.26652432043659,-77.26866899983597,-77.2718518679892,-77.27510303803413,-77.27834054770071,-77.27469322668392,-77.27213873593433,-77.26957058480642,-77.26702975443516,-77.26343707493174,-77.26570469773617,-77.26806794318901,-77.2704175282635,-77.27159232080072,-77.27388726436186,-77.27750726462196,-77.28118190639543,-77.28379103865836,-77.2874793408102,-77.29122228447534,-77.29523843570732,-77.29798417175365,-77.30200032298563,-77.30601647421759,-77.31007360658458,-77.31975881482765,-77.33061881560798,-77.34145149563162,-77.35232515679027,-77.36206500654671])
        expected['lonSH'] = np.array([209.5779889455348,209.5149189787389,209.45190365345638,209.38865610174207,209.3329763996281,209.26914145164517,209.24803616710983,209.2270674863579,209.21381691936807,209.19241110650924,209.17096431251542,209.15798695309238,209.15301457537663,209.1397640083868,209.12649978101862,209.11330385554217,209.12619925269516,209.13084378133075,209.13542000807468,209.14007819708863,209.15275502818815,209.1509245374906,209.14901208452298,209.1472089145821,209.15431231131893,209.15294627348493,209.16077367027376,209.16861472744094,209.1848159361522,209.19216521969912,209.1994598617327,209.21018325872961,209.22977224126922,209.2402360910777,209.25063163899443,209.2609588850195,209.28468696219613,209.29978168026184,209.31549111535287,209.33117322968724,209.35567994842924])
        expected['rhoSH'] = np.array([6371.198860740661,6371.1984809875485,6371.1984809875485,6371.197721481323,6371.198101234436,6371.197721481323,6371.196961975097,6371.1965822219845,6371.196961975097,6371.1965822219845,6371.1965822219845,6371.196202468872,6371.197341728211,6371.197721481323,6371.198860740661,6371.2,6371.198101234436,6371.197341728211,6371.196961975097,6371.1965822219845,6371.1965822219845,6371.196961975097,6371.198101234436,6371.199620246887,6371.1984809875485,6371.197341728211,6371.196961975097,6371.196202468872,6371.196202468872,6371.197721481323,6371.199620246887,6371.199240493775,6371.196961975097,6371.195822715759,6371.196202468872,6371.1965822219845,6371.1984809875485,6371.198860740661,6371.196961975097,6371.195822715759,6371.195442962647])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_0N_270_60000(self):
        """Test for latitude = 0, longitude = 270, rho = 60000"""
        lat = 0
        lon = 270
        rho = 60000

        expected = {}
        expected['latNH'] = np.array([56.84624469328518,56.87583307276968,56.90533948998413,56.93483566191483,56.967562513322946,56.99688451542981,57.03482621626923,57.072767917108656,57.114032504979285,57.151950300156614,57.18982711419892,57.23133758887967,57.27627340342919,57.31753457620523,57.35887771125132,57.40021743120282,57.44719205721958,57.49108285282608,57.534953157865075,57.57861514213438,57.625651239853674,57.66806329950487,57.710598302561124,57.75279521125346,57.79837647867954,57.84099002891126,57.889149692749015,57.937042979209146,57.988218171565464,58.03655200522706,58.08506683890166,58.149540409572,58.21759299936741,58.28266079649555,58.34767053701572,58.41314814549405,58.48337273544554,58.55063643839182,58.61833044325582,58.68595273113353,58.75670666074569])
        expected['lonNH'] = np.array([274.55786787866487,274.52221429119743,274.48650606221656,274.4507158709657,274.40000854656756,274.36427299683004,274.32364703164683,274.28288446268016,274.22715011905285,274.18646951235627,274.1457342641463,274.0881147883081,274.0152230094857,273.9574122883507,273.8993283596489,273.8411351479204,273.77892578495994,273.73198872498364,273.6848604197105,273.63748622762733,273.57464848726323,273.5343776919168,273.493970292787,273.45334432760376,273.39695428581615,273.35624635836285,273.3189262047379,273.2813328435462,273.22794808499333,273.1903000822883,273.1525427965564,273.1189929073533,273.06937841322235,273.0358285240192,273.00200542724934,272.9681003682094,272.9167646664076,272.88157553180366,272.8463317556864,272.810760130489,272.7585774852301])
        expected['rhoNH'] = np.array([6371.199240493775,6371.199240493775,6371.198860740661,6371.199620246887,6371.2,6371.199240493775,6371.199240493775,6371.199240493775,6371.198860740661,6371.1984809875485,6371.198860740661,6371.198860740661,6371.199620246887,6371.199620246887,6371.198860740661,6371.198860740661,6371.1984809875485,6371.199240493775,6371.2,6371.198860740661,6371.1984809875485,6371.199620246887,6371.2,6371.1984809875485,6371.1984809875485,6371.198860740661,6371.2,6371.198860740661,6371.1984809875485,6371.199240493775,6371.199620246887,6371.198860740661,6371.198860740661,6371.199620246887,6371.198860740661,6371.198860740661,6371.198860740661,6371.1984809875485,6371.198860740661,6371.199620246887,6371.198101234436])
        expected['latSH'] = np.array([-74.48199279960579,-74.48352276197986,-74.48502540359726,-74.48643242256628,-74.49438276276018,-74.4958580836209,-74.49271619660271,-74.4895060076928,-74.49286646076445,-74.48954698882781,-74.48643242256628,-74.48982019639462,-74.49979227258282,-74.50313906527614,-74.50658148061783,-74.51017416012127,-74.51237348103399,-74.50815242412693,-74.50398600873322,-74.49983325371787,-74.50219649917068,-74.50318004641116,-74.50420457478666,-74.50524276354051,-74.51260570746578,-74.51363023584128,-74.51573393410564,-74.51786495312669,-74.52645733110256,-74.52853370861024,-74.53066472763129,-74.53198978433028,-74.5396805773357,-74.54099197365636,-74.5423716718687,-74.54381967197273,-74.55853189944494,-74.5670149943941,-74.57544344782991,-74.58395386353573,-74.59880269479135])
        expected['lonSH'] = np.array([209.84513130435235,209.8045326599258,209.76382473247253,209.72396374847634,209.68721733074165,209.64635913912664,209.64891362987623,209.65182329046266,209.65810706449906,209.66160412135412,209.66398102718526,209.67794193384879,209.69485348223373,209.7090739360857,209.7228709182091,209.7364766550358,209.78044941291233,209.82014647236844,209.8597888903112,209.89993674225252,209.9436772736973,209.9787707856528,210.01430142971523,210.05026920588452,210.09058098236594,210.1262618905901,210.17572612055932,210.22555918074372,210.2787936751348,210.3285857541842,210.37886960685384,210.43894795079325,210.5026462949928,210.5626153559055,210.62252977530486,210.6825807984876,210.7487106900317,210.81027801521017,210.8728835291425,210.93585787329002,211.0019194629424])
        expected['rhoSH'] = np.array([6371.196961975097,6371.197721481323,6371.1984809875485,6371.196202468872,6371.1965822219845,6371.1965822219845,6371.196961975097,6371.197341728211,6371.200759506225,6371.1965822219845,6371.198101234436,6371.1965822219845,6371.199240493775,6371.196961975097,6371.196961975097,6371.198860740661,6371.195822715759,6371.196202468872,6371.196961975097,6371.196202468872,6371.198101234436,6371.198860740661,6371.2,6371.198860740661,6371.195822715759,6371.1965822219845,6371.196202468872,6371.196202468872,6371.198101234436,6371.198101234436,6371.198101234436,6371.1965822219845,6371.196961975097,6371.195822715759,6371.197721481323,6371.198860740661,6371.1965822219845,6371.199240493775,6371.1984809875485,6371.196961975097,6371.199620246887])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_30N_270_60000(self):
        """Test for latitude = 30, longitude = 270, rho = 60000"""
        lat = 30
        lon = 270
        rho = 60000

        expected = {}
        expected['latNH'] = np.array([62.750024570317834,62.773450411623685,62.7968625925512,62.82024745272203,62.84369719968998,62.8669932674016,62.89672678840596,62.92644664903197,62.9562570096645,62.98588124764213,63.01547987241038,63.0511898089385,63.0869509718854,63.12260797444745,63.15825302417845,63.19386050786902,63.23079987844774,63.26762825845245,63.30447883657196,63.341401131677756,63.37843953999945,63.41562479738829,63.45291763025656,63.490213878219414,63.52771161676279,63.56507958171193,63.60846152822526,63.65181786152921,63.69533470427865,63.73875763192701,63.782209587879336,63.84050866753998,63.89911510571328,63.95767885520425,64.01633993489091,64.07512737307721,64.1367390944853,64.19830471211651,64.25997449013255,64.32156572097315,64.38347114051555])
        expected['lonNH'] = np.array([270.5059810969599,270.47330547197055,270.4404659224411,270.4076263729117,270.37139904955393,270.3386141415379,270.3009388180761,270.26320885310093,270.2220091520274,270.18430650780897,270.1465765428338,270.0887931424555,270.02734876068206,269.9693467942503,269.9111809032785,269.85285108776657,269.80244429169187,269.75547991095885,269.7084335679558,269.6611686588993,269.61024276844773,269.56841468997055,269.52639536619665,269.48423943863935,269.4383952089302,269.3961573191028,269.35640561813335,269.3165446341372,269.2728314234491,269.23272455264276,269.1924537572964,269.1546691508079,269.1131416006542,269.0750837865989,269.03691668951683,268.998476384868,268.95323321180587,268.9114870955987,268.8693858095548,268.82706595745736,268.78083923715474])
        expected['rhoNH'] = np.array([6371.199620246887,6371.199240493775,6371.199240493775,6371.199620246887,6371.2,6371.199240493775,6371.199240493775,6371.199620246887,6371.2,6371.2,6371.199620246887,6371.198860740661,6371.199620246887,6371.199620246887,6371.199240493775,6371.199620246887,6371.199240493775,6371.199240493775,6371.2,6371.199240493775,6371.199620246887,6371.199620246887,6371.199620246887,6371.199240493775,6371.2,6371.199620246887,6371.2,6371.199620246887,6371.2,6371.199620246887,6371.199620246887,6371.2,6371.199620246887,6371.198860740661,6371.199620246887,6371.199620246887,6371.199240493775,6371.199620246887,6371.199620246887,6371.2,6371.199620246887])
        expected['latSH'] = np.array([-74.59704050598549,-74.59186322259461,-74.58668593920373,-74.58138571240781,-74.58197310867644,-74.57670020263717,-74.57088088146432,-74.56521182445323,-74.56533476785827,-74.55954276744211,-74.55387371043099,-74.55213884238182,-74.55648284269395,-74.55482993691481,-74.55324533302735,-74.55163340838322,-74.5512509177897,-74.5448305399699,-74.53825989798835,-74.53177121827684,-74.53151167108837,-74.53157997298007,-74.53171657676347,-74.53181219941186,-74.53836918101507,-74.53850578479847,-74.5412105397098,-74.54388797386443,-74.55313605000063,-74.55586812566864,-74.55861386171497,-74.55996623917065,-74.56801220201294,-74.56922797568518,-74.57068963616757,-74.57202835324489,-74.58710941093227,-74.59540126058468,-74.60363846872372,-74.61202594102448,-74.62743484779205])
        expected['lonSH'] = np.array([182.23734275462073,182.19655286489743,182.15643233371276,182.1156287836111,182.08629995131506,182.04512757099823,182.05565972269838,182.06601428948014,182.0883626684444,182.09858063144276,182.10868931141437,182.11281474567306,182.12898863362764,182.1334419169665,182.13782689841364,182.14212991759075,182.20045973310266,182.24604441562332,182.29217551327758,182.33745966747477,182.3969915962806,182.4319075233177,182.46782065797365,182.50339228317108,182.5520368904399,182.5881549307709,182.63113048102863,182.6751032389052,182.7326544128517,182.77619003862137,182.81983494741775,182.87946249887196,182.95346076833988,183.01296537638905,183.07357647508374,183.13357285675312,183.19630131409053,183.24408531752394,183.2923064530642,183.3400767961193,183.4042805743174])
        expected['rhoSH'] = np.array([6371.198860740661,6371.2,6371.1984809875485,6371.1984809875485,6371.199620246887,6371.199240493775,6371.1984809875485,6371.198860740661,6371.199240493775,6371.197721481323,6371.199620246887,6371.198860740661,6371.1984809875485,6371.199620246887,6371.1984809875485,6371.1984809875485,6371.1984809875485,6371.198860740661,6371.198101234436,6371.2,6371.199240493775,6371.2,6371.1984809875485,6371.1984809875485,6371.2,6371.1984809875485,6371.199620246887,6371.1984809875485,6371.197721481323,6371.198860740661,6371.198860740661,6371.199620246887,6371.198860740661,6371.199240493775,6371.199240493775,6371.2,6371.198101234436,6371.1984809875485,6371.197721481323,6371.2,6371.1984809875485])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_60N_270_60000(self):
        """Test for latitude = 60, longitude = 270, rho = 60000"""
        lat = 60
        lon = 270
        rho = 60000

        expected = {}
        expected['latNH'] = np.array([72.69767941715907,72.71418115419382,72.73068118368128,72.74718121316874,72.76026956316578,72.776709828498,72.79826590551856,72.81976904857305,72.83788441779922,72.85934145707681,72.88074897748292,72.91282866846718,72.94150521769748,72.97350636150628,73.00548359965299,73.03744546987406,73.06855698154348,73.10304260666287,73.13750944876205,73.17196775312476,73.20299730252412,73.23898215416634,73.27498237373419,73.31099625368037,73.34356942583216,73.37960379634586,73.42146773331615,73.46334191557021,73.50175831455695,73.54362395907454,73.58550667906506,73.6427573246881,73.69654164930736,73.75380595530876,73.811104412256,73.86841994467616,73.92368471279802,73.98243629249117,74.04116225897495,74.0998933481006,74.155079569047])
        expected['lonNH'] = np.array([265.5183310782065,265.4906824724462,265.46303386668603,265.43516669487235,265.3952510693628,265.36754782208925,265.3307467628412,265.29397302434984,265.24479566232577,265.2079672823211,265.1710569400463,265.0993672745179,265.01500077788984,264.94287398025455,264.87052861656576,264.7978554037968,264.71594777527,264.6461432419525,264.57603818031146,264.50557794883366,264.42214035793273,264.35725356081764,264.29195695235234,264.22625053253677,264.1474847910282,264.08114999380905,264.0139955738895,263.9462947388363,263.8653160160366,263.79693216206647,263.72816581750277,263.6560936613808,263.5703338061621,263.497250782043,263.42351205976354,263.34925424310717,263.2595055574132,263.1824883443321,263.1049520368741,263.0267873520125,262.93447051519064])
        expected['rhoNH'] = np.array([6371.2,6371.2,6371.199620246887,6371.199620246887,6371.2,6371.199240493775,6371.199620246887,6371.199620246887,6371.200759506225,6371.199620246887,6371.199620246887,6371.199240493775,6371.199620246887,6371.2,6371.2,6371.2,6371.199620246887,6371.2,6371.200759506225,6371.2,6371.2,6371.200759506225,6371.200759506225,6371.2,6371.2,6371.199620246887,6371.2,6371.2,6371.199620246887,6371.199620246887,6371.2,6371.2,6371.2,6371.199620246887,6371.2,6371.2,6371.199620246887,6371.2,6371.199620246887,6371.2,6371.2])
        expected['latSH'] = np.array([40.18340740167587,40.18683615663922,40.189971213468255,40.192641817433724,40.15182460695373,40.15529775814668,40.154973324161105,40.15443715431126,40.109911151111945,40.1100580001791,40.10983601903108,40.107237132051885,40.06028299660264,40.058367128540446,40.05614048687102,40.053401581013844,40.00219906790085,39.99634218068756,39.989973029286524,39.98328627408908,39.9315339307479,39.92605270393896,39.92007287332061,39.9137890992842,39.86208115217262,39.85643258572902,39.84850615119722,39.8401289241802,39.786102127845396,39.77839767446162,39.77038244747062,39.75875405040867,39.70101163116538,39.689984290750395,39.678530063512284,39.66656698718101,39.609528077422226,39.59966186916615,39.58937218918152,39.57853267896871,39.52087905218463])
        expected['lonSH'] = np.array([335.23814272927194,335.2094012932445,335.1807691402438,335.1521916287565,335.2543985794965,335.2256844642258,335.19464808463727,335.1635570635354,335.26327782541756,335.23207752128894,335.20109578321376,335.16831087519773,335.26614650486897,335.23327963458286,335.20041276429674,335.1676551770374,335.26142001396335,335.2245369924453,335.1877632539539,335.1510441569759,335.24472703163184,335.2080625761672,335.17150740372927,335.13497955204804,335.22877170973067,335.19218921653606,335.1540494402107,335.1159369846421,335.2080352554105,335.16992279984186,335.1317557027598,335.0898729827693,335.17784581927907,335.1357445332351,335.0936705679478,335.05167856493057,335.14085351473426,335.09992702122753,335.0591371315042,335.0183745625376,335.10733094628785])
        expected['rhoSH'] = np.array([350859.2356811523,350880.7448974609,350902.1325927734,350923.2529418945,350851.53125,350873.2835083008,350892.3866088867,350911.00362548826,350836.87581787107,350856.29487304686,350875.3493652344,350892.5567382812,350816.751940918,350834.5669189453,350852.11455078126,350869.419140625,350790.06593017577,350804.7456665039,350818.7691894531,350832.7197998047,350752.97772216797,350767.51163330075,350781.8511108398,350795.534375,350715.6950805664,350730.20468749997,350742.429699707,350754.533190918,350672.871081543,350685.38774414064,350697.6856689453,350706.43518066406,350621.03022460936,350630.2415161133,350639.0882446289,350647.5704101562,350562.55432128906,350572.78638916014,350582.21641845704,350591.3791015625,350505.9498413086])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_90N_270_60000(self):
        """Test for latitude = 90, longitude = 270, rho = 60000"""
        lat = 90
        lon = 270
        rho = 60000

        expected = {}
        expected['latNH'] = np.array([84.14229828665555,84.15131029437855,84.16028900492935,84.1692719843484,84.17346273229101,84.18240942633008,84.19517419611519,84.20790609561492,84.21584064099636,84.22851960653003,84.2411878998931,84.26737954092599,84.28869613443877,84.31474562215955,84.34069607213738,84.3666115173957,84.39167148146046,84.4214873916217,84.45127256593165,84.48096638646146,84.50577875616882,84.53655601545572,84.56726369219045,84.59789879816525,84.62357817501038,84.65407795786226,84.68851961363886,84.722848998181,84.7521534979281,84.78626218198268,84.82023212781974,84.86767291424736,84.91000685360991,84.9570519159525,85.0038814004494,85.05049402644015,85.09144570626944,85.13712473077801,85.18255359960823,85.22772334813682,85.26770001846208])
        expected['lonNH'] = np.array([255.73632539421095,255.67977142788322,255.622834970962,255.56548870269057,255.50158545281593,255.4443757883279,255.36555540530597,255.2863525316905,255.20026482739166,255.12073410469603,255.04106677821702,254.8571434442469,254.66532441159626,254.47896953028163,254.290565592216,254.10104150312648,253.88124601563547,253.66573988694324,253.4481573807433,253.2274056667685,252.99916806546335,252.76855355832703,252.5352342962794,252.29890975099696,252.054689507034,251.81317401798233,251.54605897992147,251.27498243214202,250.99609214795206,250.71848593932606,250.43675429644136,250.1120197825423,249.77794156985863,249.44195090420735,249.0993759361962,248.75046255263527,248.40165845210106,248.04957586076523,247.69159198598652,247.3269145258212,246.95466921605552])
        expected['rhoNH'] = np.array([6371.2,6371.199240493775,6371.198860740661,6371.2,6371.200759506225,6371.199240493775,6371.199620246887,6371.2,6371.2,6371.199620246887,6371.199620246887,6371.2,6371.199620246887,6371.199620246887,6371.2,6371.199620246887,6371.199620246887,6371.199620246887,6371.2,6371.2,6371.199620246887,6371.2,6371.200759506225,6371.2,6371.199620246887,6371.199240493775,6371.2,6371.2,6371.199240493775,6371.2,6371.200759506225,6371.200759506225,6371.199620246887,6371.2,6371.199620246887,6371.2,6371.199240493775,6371.2,6371.2,6371.2,6371.2])
        expected['latSH'] = np.array([47.544486685306204,47.55122466692242,47.55758015794512,47.56364878102267,47.510786531941356,47.517585985260105,47.52181045726176,47.52572757075076,47.47063184981086,47.47521149164935,47.47951109573187,47.48260517142589,47.42664543155597,47.43043960163991,47.43391275283287,47.43705463985107,47.37875897528501,47.380323088604946,47.381460315101755,47.38230042836966,47.32409355626282,47.32634410359434,47.32829753769696,47.32985140573314,47.27244366575918,47.27466689233402,47.27610123205972,47.27720772270526,47.21921941665185,47.22109088848444,47.222644756520616,47.2230579829654,47.16460180895385,47.165950771314925,47.166900167609555,47.167610507283236,47.11030863524142,47.112682125978,47.11483363556655,47.116544597953634,47.0595876504649])
        expected['lonSH'] = np.array([5.791035651950549,5.756712243823942,5.722305165880003,5.687765753020894,5.768920780078517,5.734572185629346,5.696477232420422,5.65820213297214,5.735513471074338,5.697460779660904,5.659333809940247,5.618563130123971,5.6932947911540195,5.652742677391185,5.612097075414085,5.571295232859722,5.6405584736855285,5.59470698690041,5.548805981243808,5.502688543967882,5.57183182959639,5.527048413642732,5.482137785415783,5.437168246807242,5.507260074956736,5.462479647210841,5.416120165106202,5.369575414120327,5.438118923762343,5.3917888968485,5.345322693038081,5.294993163478373,5.35955168462651,5.3092379498792575,5.258862316542651,5.208312940269034,5.27469597569921,5.2261760193827325,5.177641548914268,5.128896623242002,5.195070911015671])
        expected['rhoSH'] = np.array([353340.98607177736,353350.90218505857,353360.57525634766,353370.0781982422,353328.6881469726,353338.7014770508,353346.1871704101,353353.08956298826,353309.4635253906,353317.3137817383,353324.9939086914,353330.8755249023,353285.9370605469,353292.5964111328,353298.98841552733,353304.8943359375,353256.6018920898,353260.24752197263,353263.26124267577,353266.177746582,353218.0554321289,353222.3086669922,353225.954296875,353229.405493164,353182.13382568356,353186.21693115233,353189.0362182617,353191.66107177734,353143.4172363281,353146.69830322266,353149.8821533203,353150.31962890626,353099.91271972656,353101.2251464844,353102.1730102539,353103.0479614258,353053.66182861326,353056.1651611328,353058.4254516601,353060.3211791992,353011.39682617184])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_90S_0_90000(self):
        """Test for latitude = -90, longitude = 0, rho = 90000"""
        lat = -90
        lon = 0
        rho = 90000

        expected = {}
        expected['latNH'] = np.array([-72.90688287510915,-72.88874189267358,-72.8686747968921,-72.85101192769844,-72.88099645815478,-72.86271887193584,-72.84416807815009,-72.82800785057384,-72.85974090945771,-72.84296596485618,-72.82430588804368,-72.81035864175851,-72.84452324798693,-72.82994762429811,-72.81564520817611,-72.79945765984317,-72.83621773795619,-72.82401902009855,-72.81206618905102,-72.8003865655703,-72.83520686995902,-72.82410098236858,-72.81326830234494,-72.80268150913142,-72.84099887037519,-72.82978369975805,-72.81889637822104,-72.81034498138018,-72.85094362580674,-72.8417501911839,-72.83282996412785,-72.8274477750619,-72.86945343845747,-72.86344287198787,-72.85766453195004,-72.85213207872232,-72.89609117622052,-72.88967079840072,-72.88348264701267,-72.87751306167809,-72.91960068734372])
        expected['lonNH'] = np.array([28.70190289249762,28.64750726594764,28.59361024320707,28.53976103179069,28.673280984780686,28.61871289595416,28.547513296498654,28.476248810246034,28.59222542235285,28.5201703417038,28.448601912033116,28.36504820791635,28.468491422896193,28.384020765883353,28.29983697681565,28.216030555699597,28.2942003632031,28.184700477976747,28.07530475313524,27.96591756603019,28.04308162817841,27.93465408265175,27.82636314090849,27.718179774644657,27.795961968912763,27.68673529125321,27.568448367659638,27.449942878012624,27.517005090378394,27.39750410065985,27.27808507321135,27.13911633681098,27.18515010426957,27.04481703758249,26.904538612408768,26.764360932525303,26.817279530667268,26.68440332300655,26.55180203045992,26.419303190750842,26.47082330766025])
        expected['rhoNH'] = np.array([257214.93735351562,257202.37208251952,257252.87620849608,257240.5782836914,257196.92794189454,257184.0710205078,257235.5230102539,257224.14864501954,257181.5919921875,257169.6829345703,257220.867578125,257210.87855224608,257169.9259765625,257159.45086669922,257149.097277832,257201.91030273438,257162.5375,257153.52064208983,257144.67391357422,257135.87579345703,257159.49947509766,257151.30895996094,257143.19135742186,257135.21958007812,257096.86755371094,257088.45830078123,257144.67391357422,257137.96595458983,257101.09648437498,257093.92674560545,257087.02435302734,257082.57668457032,257111.15842285156,257106.24897460936,257101.4853515625,257096.8432495117,257062.3555908203,257057.1544921875,257052.19643554688,257047.38420410155,257075.91733398437])
        expected['latSH'] = np.array([-68.33946707522992,-68.30527514824485,-68.27094661747634,-68.23646782254613,-68.21161959434562,-68.17694955411864,-68.14398706118416,-68.11077868143954,-68.08737845334309,-68.05406079057175,-68.02046992023364,-67.98901006891657,-67.96737202962595,-67.93565263112043,-67.90385127034483,-67.87180402275914,-67.85184621000437,-67.82172507576462,-67.79142635660642,-67.7609363921515,-67.74043216426313,-67.71996891750976,-67.69928710470296,-67.67850966924777,-67.66795019679094,-67.64703615755238,-67.63134038283968,-67.61552166472194,-67.61003019262924,-67.59411585186311,-67.57811954882695,-67.56609841588772,-67.56439086859521,-67.55228777338596,-67.54008905552831,-67.52780837540061,-67.5294066396664,-67.5205956956371,-67.5116891289594,-67.50270060001165,-67.50417592087237])
        expected['lonSH'] = np.array([152.8373262270561,152.8151690933886,152.79301195972107,152.77086848643188,152.80079837537488,152.77868222284238,152.78021218521647,152.7817967891039,152.83523618917008,152.83653392511238,152.83813218937817,152.82361120720273,152.86101332309772,152.84649234092225,152.83169815118,152.81708154635618,152.87289785225354,152.87672275818875,152.88045204147556,152.88393543795226,152.93976540422796,152.92906932798772,152.91849619515253,152.9078001189123,152.94915008414756,152.93848132866398,152.92726615804682,152.9159963459163,152.95689551866636,152.94569400842752,152.93435589440531,152.92036766698513,152.95880797163395,152.94481974421376,152.93064027149683,152.91644713840154,152.9439181592433,152.91863279893593,152.89316985371013,152.86762494621428,152.8948364198676])
        expected['rhoSH'] = np.array([6371.199620246887,6371.2,6371.199620246887,6371.2,6371.2,6371.199240493775,6371.199620246887,6371.199240493775,6371.2,6371.199620246887,6371.199620246887,6371.199240493775,6371.199620246887,6371.2,6371.2,6371.200759506225,6371.199620246887,6371.199620246887,6371.2,6371.2,6371.2,6371.2,6371.2,6371.2,6371.2,6371.199620246887,6371.2,6371.2,6371.199620246887,6371.199620246887,6371.199620246887,6371.2,6371.199620246887,6371.199620246887,6371.199620246887,6371.199240493775,6371.2,6371.199240493775,6371.199620246887,6371.199620246887,6371.199620246887])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_60S_0_90000(self):
        """Test for latitude = -60, longitude = 0, rho = 90000"""
        lat = -60
        lon = 0
        rho = 90000

        expected = {}
        expected['latNH'] = np.array([-6.292915333999375,-6.303386013996999,-6.31445092045243,-6.326574506229193,-6.321035222812313,-6.331826921700937,-6.349913262623133,-6.368921679083272,-6.3674600186008945,-6.385320963280478,-6.404889455252558,-6.429437155129591,-6.427982324836378,-6.451375722743677,-6.47683183778031,-6.504794632242337,-6.507383273937776,-6.543528635025481,-6.583334977508315,-6.627983924112684,-6.6226495463709085,-6.6649489079007935,-6.713245175521962,-6.768501405907358,-6.747348310047826,-6.802263030974743,-6.8743078663400325,-6.969814401504323,-6.917652246812935,-7.015569838754232,-7.1992746066708975,-9.138399462983372,-7.524835573459555,-9.692204861266347,-11.5460548057912,-13.271162514650499,-11.917043360749616,-13.474374302836708,-14.88247927193737,-16.17211460988416,-15.053363774781914])
        expected['lonNH'] = np.array([358.0126162147357,358.00212504417055,357.99163387360545,357.98133394833707,358.0312216500348,358.02075780022636,358.0143374224066,358.0079716861001,358.0611378785995,358.05466285926633,358.04859765128333,358.0446634623214,358.09889516433134,358.094824371586,358.0912180317042,358.08804882392934,358.14624203565785,358.14823645089547,358.1509958473202,358.15482075325536,358.21099222898954,358.21361502163086,358.2175218898361,358.22293139965876,358.274485667514,358.27992249809336,358.29008581957834,358.30557668861593,358.35046469184124,358.36650197601244,358.4019096766698,358.7047602644681,358.509307571179,358.848658689902,359.1392695787077,359.42031820267533,359.25327909633353,359.4996576800742,359.72532713025146,359.93460412642065,359.79991279598795])
        expected['rhoNH'] = np.array([360389.68992919923,360418.441796875,360448.45748291013,360481.21954345703,360451.42259521486,360481.04941406247,360526.5225708008,360573.7213256836,360551.7989379883,360596.9318359375,360645.7832763672,360705.10982666013,360682.09375,360739.33013916016,360801.7433227539,360869.50343017577,360853.3897460937,360939.2321777344,361033.9213378906,361140.25220947264,361104.403515625,361206.28671874997,361322.24205322267,361454.94298095704,361380.49921875,361513.1029296875,361686.12452392577,361915.6047729492,361765.1131713867,361999.57578124997,362414.6185913086,358358.4907836914,361842.27900390624,357537.9081054687,354082.23984374997,351651.0178833008,353886.3723022461,351446.08487548825,349508.3110717773,347971.50794677733,349560.273449707])
        expected['latSH'] = np.array([-76.24000152969703,-76.20893782935181,-76.17792877051994,-76.14690605130974,-76.14458378699194,-76.11327419983661,-76.08802982066425,-76.06286740376191,-76.06652838515703,-76.0410517795529,-76.01552053243537,-75.99123237974683,-75.99612279519255,-75.9714931330455,-75.94695909354681,-75.92242505404812,-75.93033441310698,-75.90854610965465,-75.88677146658065,-75.86507878577669,-75.87294716370053,-75.85483350202168,-75.83677448185614,-75.81875644282567,-75.83058633046812,-75.81237704614088,-75.79720036580511,-75.7821876100094,-75.79713206391341,-75.78183244017256,-75.76669674097181,-75.75348715511703,-75.77031674123194,-75.75691591008035,-75.74354239968548,-75.73030549307398,-75.75112390966419,-75.74158896558285,-75.73205402150151,-75.72265568120358,-75.74354239968548])
        expected['lonSH'] = np.array([135.10354600944007,135.11696050096995,135.13014276606808,135.1426420122492,135.13653582313123,135.14988201276944,135.19817145020141,135.2460510762832,135.2752023236608,135.32398353471305,135.3722593117667,135.4018886723862,135.41307652224668,135.44363478859333,135.47382422472478,135.50339894383094,135.5322906440201,135.58097623242395,135.62892416039745,135.67663986193915,135.7057637885601,135.72297586526852,135.73981911176176,135.7559110374463,135.7538209995603,135.77095111399868,135.7779179069521,135.78458417158203,135.77230349145435,135.77972107689297,135.7868654547648,135.7820433412108,135.75817866025076,135.75446303734228,135.75014635778683,135.7452969234761,135.69816861820303,135.6710254464414,135.64349978408626,135.61578287643434,135.56773932581245])
        expected['rhoSH'] = np.array([6371.1984809875485,6371.199240493775,6371.198101234436,6371.198860740661,6371.198860740661,6371.1984809875485,6371.199240493775,6371.198860740661,6371.199620246887,6371.198101234436,6371.1984809875485,6371.199240493775,6371.1984809875485,6371.2,6371.198860740661,6371.1984809875485,6371.1984809875485,6371.1984809875485,6371.2,6371.1984809875485,6371.198860740661,6371.199240493775,6371.199240493775,6371.198860740661,6371.1984809875485,6371.198860740661,6371.2,6371.198101234436,6371.1984809875485,6371.199620246887,6371.1984809875485,6371.198860740661,6371.2,6371.197721481323,6371.198860740661,6371.2,6371.1984809875485,6371.198101234436,6371.199240493775,6371.199240493775,6371.1984809875485])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_30S_0_90000(self):
        """Test for latitude = -30, longitude = 0, rho = 90000"""
        lat = -30
        lon = 0
        rho = 90000

        expected = {}
        expected['latNH'] = np.array([5.965430075097615,5.969022754601042,5.972349056726827,5.975497773934208,5.9476784134447485,5.951394036353236,5.953647998779331,5.955697055530337,5.923615656998791,5.926245279829246,5.928615355471237,5.930432185790465,5.900795994981777,5.903213881947963,5.905392712293192,5.907318825639138,5.873208860924095,5.874445125163874,5.875435502593518,5.87624146491558,5.844836255111858,5.846837500538683,5.848674821425405,5.850238934745349,5.816313385137889,5.81851270605064,5.820247574099824,5.821818517608918,5.7903859870485235,5.792598968339604,5.794566062820564,5.795904779897896,5.760790777374851,5.762682739774945,5.764472249337501,5.7661046645491325,5.731222888457879,5.736844134144789,5.739316662624333,5.741618436374637,5.706538584797443])
        expected['lonNH'] = np.array([358.5262464403207,358.51411602435473,358.50195828763214,358.4897459093961,358.535781384402,358.5236236476794,358.5131871186276,358.5027232688191,358.5504526307392,358.5400161016874,358.52957957263567,358.5199353455276,358.56859361317476,358.5589767068234,358.5493871212287,358.5397428941206,358.5907234260856,358.58342878405205,358.57616146277513,358.56878485847153,358.61984735270653,358.61186969175594,358.6038647100487,358.5958324075848,358.6461845621461,358.6381795804389,358.6306936931085,358.62309852275143,358.67407905471646,358.6665112051161,358.65897067627236,358.6529327890461,358.70544328338514,358.69940539615885,358.6932582259058,358.6871383764095,358.7389112103182,358.73199905887816,358.72511422819474,358.7181201144847,358.7699202691501])
        expected['rhoNH'] = np.array([382312.39357910154,382307.3383056641,382302.50177001953,382298.0784057617,382331.9341552734,382326.660144043,382323.37907714845,382320.2681396484,382295.3077270508,382291.443359375,382287.9921630859,382285.14857177733,382321.67778320314,382318.22658691404,382315.0670410156,382312.17484130856,382290.0580200195,382288.38103027345,382286.97138671874,382285.6589599609,382324.3026367187,382321.75069580076,382319.3202758789,382317.2301147461,382294.9431640625,382292.002355957,382289.8635864258,382287.773425293,382326.5629272461,382323.93807373045,382321.48334960936,382320.14661865233,382299.2693115234,382297.227758789,382295.2105102539,382293.4606079101,382272.2430419922,382329.86829833983,382326.90318603517,382324.2540283203,382303.2308959961])
        expected['latSH'] = np.array([-78.73579363355469,-78.72479702899099,-78.71369114140055,-78.70250329154007,-78.69713476285244,-78.68590593185692,-78.68645234699054,-78.68693046023245,-78.69336449843058,-78.69395189469921,-78.69448464945447,-78.69524963064151,-78.70207981981153,-78.7029540840253,-78.70378736710401,-78.70456600866942,-78.71464736788434,-78.71878646252136,-78.72285725526669,-78.726887066877,-78.73702306760532,-78.73385385983042,-78.73061635016384,-78.72731053860554,-78.73023385957032,-78.72701001028207,-78.72213325521469,-78.71721551901226,-78.71856789646793,-78.71370480177887,-78.70878706557647,-78.69949800830526,-78.69646540431378,-78.68723098855591,-78.67792827090636,-78.66854359098676,-78.6623827603554,-78.64999279720101,-78.63749355101987,-78.62498064446041,-78.61871053080236])
        expected['lonSH'] = np.array([69.88347664395732,69.96303468740963,70.04221024026842,70.12122869877629,70.11741062303025,70.1973033457519,70.25665085945013,70.31607350522926,70.29194927708076,70.35245109274874,70.4127275121741,70.45689834553657,70.41625188978583,70.46128332698372,70.50612351888485,70.55054023905745,70.5152691421835,70.56614722131093,70.61675892306071,70.66730232291881,70.63205171661238,70.68047775782777,70.7286237612872,70.77655802888233,70.738097233666,70.78687844471823,70.82264814540159,70.85811048757229,70.80676795558131,70.84302942988491,70.87925675324266,70.90053962269641,70.83515422177187,70.85729086487189,70.87920211172928,70.90058743402061,70.79844878517223,70.78423516150943,70.769393160443,70.75473557448414,70.65230322750146])
        expected['rhoSH'] = np.array([6371.193164443969,6371.192784690857,6371.192404937744,6371.193544197083,6371.195442962647,6371.1946834564205,6371.194303703308,6371.195063209533,6371.1984809875485,6371.197721481323,6371.197721481323,6371.197721481323,6371.193164443969,6371.193544197083,6371.193164443969,6371.192784690857,6371.193164443969,6371.193164443969,6371.193923950195,6371.193164443969,6371.198860740661,6371.197721481323,6371.197721481323,6371.196961975097,6371.194303703308,6371.195063209533,6371.195442962647,6371.1946834564205,6371.192025184631,6371.192404937744,6371.192404937744,6371.192404937744,6371.196202468872,6371.195442962647,6371.1946834564205,6371.1946834564205,6371.195822715759,6371.195822715759,6371.195442962647,6371.1946834564205,6371.192025184631])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_0N_0_90000(self):
        """Test for latitude = 0, longitude = 0, rho = 90000"""
        lat = 0
        lon = 0
        rho = 90000

        expected = {}
        expected['latNH'] = np.array([18.13162940210195,18.214875747706074,18.296394055450165,18.376211646090937,18.271989789545714,18.35315292745298,18.43762870710769,18.52019886398398,18.422520328663623,18.50637456110387,18.58832317076569,18.66919261053863,18.57434177353467,18.656488458682418,18.736743181430057,18.815263036128528,18.724804010760877,18.8067526204227,18.8868365884411,18.965049084626912,18.876516172605207,18.95447595179172,19.030543768578156,19.1048562267479,19.01705414496739,19.092432112647643,19.167325136896835,19.240326198745933,19.155898230415403,19.22997846215337,19.30220771262624,19.371192623243374,19.28744084364068,19.357600546795055,19.425984400765216,19.492619726307865,19.409933456215683,19.476862479892645,19.54212493741211,19.605707168395767,19.52494701164953])
        expected['lonNH'] = np.array([358.42742726340896,358.39827601603133,358.369698504544,358.3417220497036,358.39395933647586,358.3658189570954,358.3384708796587,358.31180582113893,358.36330544748085,358.33661306820443,358.31054906633165,358.2859330645629,358.3372687663648,358.31262544383935,358.2886378194743,358.2652512517561,358.3173792555017,358.2957685369678,358.27486815810755,358.25456883589425,358.3058772169394,358.2851680833759,358.2651146479727,358.2455803069465,358.29552265015764,358.2760975921581,358.2573555530756,358.2391872498834,358.2884465741775,358.2703602332553,358.2528749489801,358.2381763818862,358.2888563855277,358.2742397807039,358.2601149495003,358.24650921267363,358.2958778199945,358.2816710265209,358.2679560066675,358.254678118921,358.3033637073248])
        expected['rhoNH'] = np.array([175750.15377197266,177148.24067993162,178530.93087768555,179897.94486694335,178428.50083007812,179815.55363159179,181283.32067871094,182734.2813720703,181365.88204345704,182838.02384643554,184293.80892333985,185737.32037963867,184386.4322265625,185851.294921875,187301.06470947264,188739.08341674804,187467.0745422363,188989.27084350586,190498.1362915039,191993.41569213866,190730.25354614257,192189.1860168457,193632.9283630371,195065.08975830078,193758.36233520508,195208.41162109375,196650.97521362305,198078.53096313475,196788.13596191406,198235.9249572754,199669.45953979492,201056.31790771484,199746.3094177246,201154.0207885742,202547.5871154785,203926.69244384766,202592.24608154295,203958.16638183594,205310.88950195312,206649.63770751952,205325.61784667967])
        expected['latSH'] = np.array([-70.5732531225259,-70.56082217823649,-70.54829561129867,-70.5357144028475,-70.52660293049473,-70.5140353824219,-70.50980066513648,-70.50555228747274,-70.50470534401566,-70.50053892862195,-70.49637251322824,-70.49429613572056,-70.49555289052785,-70.49357213566853,-70.49160504118757,-70.4895969655716,-70.49563485279788,-70.4986811171677,-70.5017137211592,-70.50471900439399,-70.51072957086362,-70.50764232535877,-70.50451409871889,-70.50138587207903,-70.50120828716061,-70.4982030039258,-70.4907990788655,-70.48338149342689,-70.47887356857467,-70.4715789265411,-70.46422964299416,-70.45511817064136,-70.44879341546994,-70.43980488652221,-70.43078903681777,-70.42169122484333,-70.40744345023467,-70.39066850563313,-70.37381159876153,-70.35687272961991,-70.34247469084951])
        expected['lonSH'] = np.array([41.32556779954191,41.34173144221274,41.357816537708125,41.373942614338524,41.349999386203045,41.36636451945439,41.348882650273744,41.33127442259345,41.27301290897324,41.25528515298248,41.2374242083029,41.19917173385624,41.11985274702488,41.081275838592646,41.04245645844488,41.003343380162804,40.92734386526807,40.89276603259488,40.85789791688197,40.82272927284557,40.745274927657626,40.741760795329654,40.73821251205583,40.73458226651197,40.68857411226276,40.685070225218546,40.676665677444845,40.66822356363071,40.617174729774035,40.60886238955413,40.60057395499632,40.59225136949266,40.540758573339936,40.532442818025444,40.524130477805535,40.5156883639914,40.45196611412977,40.43163605606522,40.41124794139274,40.39078810973396,40.32692242589976])
        expected['rhoSH'] = np.array([6371.189746665955,6371.195822715759,6371.194303703308,6371.188227653503,6371.188987159729,6371.193923950195,6371.195442962647,6371.188227653503,6371.188987159729,6371.195442962647,6371.193544197083,6371.187468147277,6371.188987159729,6371.196961975097,6371.192784690857,6371.187468147277,6371.188607406616,6371.1965822219845,6371.193923950195,6371.187468147277,6371.187468147277,6371.1946834564205,6371.196961975097,6371.189366912841,6371.185949134827,6371.189366912841,6371.196202468872,6371.193544197083,6371.185949134827,6371.186328887939,6371.191645431519,6371.2,6371.188607406616,6371.185189628601,6371.186328887939,6371.189746665955,6371.195442962647,6371.188987159729,6371.185189628601,6371.185569381713,6371.1946834564205])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_30N_0_90000(self):
        """Test for latitude = 30, longitude = 0, rho = 90000"""
        lat = 30
        lon = 0
        rho = 90000

        expected = {}
        expected['latNH'] = np.array([71.4000920314711,71.42573597670992,71.45135260119204,71.47694702755938,71.50546989753335,71.53091576728623,71.56047170337217,71.58999519605955,71.62244371725899,71.6517759646496,71.68103991014853,71.7193094600681,71.7605398969929,71.7984815978323,71.83637890244212,71.87414643345771,71.91057524739597,71.9436658063774,71.97667269554148,72.0095583488478,72.04542196463224,72.07327889116215,72.10102311957073,72.1287041687295,72.15942123697434,72.18674882384356,72.21704754300174,72.24723356403861,72.28052902869513,72.3104196440504,72.34018902354791,72.3752210638009,72.41333010427498,72.44782597467812,72.48205717525094,72.51611591354721,72.55186170856847,72.58387651275561,72.61569494900412,72.64725896070604,72.68208780283123])
        expected['lonNH'] = np.array([336.8606131854734,336.905309943402,336.9500613428439,336.9948673837992,337.01997515918816,337.0649997661969,337.12775554429095,337.1905659638984,337.2335961556695,337.2967071036004,337.3599546553147,337.48328055096846,337.58688086029923,337.71129958622015,337.8361008027347,337.96142111362605,338.0838181035527,338.2272793968796,338.37131442609683,338.51597783271774,338.64072440771884,338.78098917251424,338.92171839017317,339.0628300984256,339.1837517674915,339.3259289852545,339.4713846938191,339.61730485524726,339.74292569446214,339.88988404464413,340.0373068476897,340.2357921449703,340.4141420445776,340.61415730423226,340.81496486583063,341.0163188425626,341.1975374216214,341.4004213607275,341.6037697526971,341.807691880557,341.9911507616635])
        expected['rhoNH'] = np.array([6371.197721481323,6371.196961975097,6371.197341728211,6371.197341728211,6371.198101234436,6371.196961975097,6371.197341728211,6371.196961975097,6371.198101234436,6371.198101234436,6371.197341728211,6371.198101234436,6371.1984809875485,6371.1984809875485,6371.198860740661,6371.199240493775,6371.199240493775,6371.2,6371.200759506225,6371.2,6371.2,6371.199240493775,6371.199620246887,6371.198860740661,6371.198860740661,6371.198860740661,6371.199240493775,6371.198101234436,6371.197721481323,6371.198101234436,6371.198101234436,6371.199240493775,6371.197721481323,6371.197341728211,6371.197721481323,6371.197721481323,6371.197341728211,6371.197341728211,6371.197721481323,6371.198101234436,6371.197721481323])
        expected['latSH'] = np.array([24.06170892253374,24.077438848192287,24.092840924770655,24.107969793782246,24.06526062090215,24.081031527695714,24.096556547679143,24.111781039339107,24.069065036269848,24.084911075144277,24.100456585695227,24.115387379220877,24.072234244044736,24.087793414974016,24.103031567012323,24.117989681294645,24.075335149927923,24.091488547314995,24.10732775600026,24.122859606172867,24.0801231125361,24.095613981573692,24.110783831720283,24.125659983732575,24.082151678719597,24.097649377946354,24.11225232239184,24.12653424794634,24.082342924016345,24.097260057163666,24.11186300160915,24.12615858754198,24.081864810774448,24.096795604300098,24.111398548745584,24.12570779505677,24.080997376749863,24.09559349100617,24.109868586371505,24.123836323224182,24.07908492378226])
        expected['lonSH'] = np.array([1.128565816939547,1.1142530488120794,1.099949458751309,1.0856619836681118,1.1233018755235826,1.1089786486689486,1.0940309931137873,1.0790815232896276,1.116082472292585,1.1011136858396788,1.0861856670783814,1.0707903139674668,1.1073341739045621,1.0919176898959029,1.0765345030594475,1.0611472607981725,1.0967747014477225,1.0804752020454276,1.0642162568913296,1.0479431177503626,1.0835459056858772,1.067705096175031,1.0518758126084091,1.0360629641844774,1.07205742078021,1.0562217339112412,1.0403552044693016,1.024470639059085,1.0603814258374846,1.0444931251675658,1.0286179512674578,1.0121377720172748,1.04734665013675,1.0308111890429723,1.0142902421011808,0.9978028057750048,1.0333002593869132,1.0170958490244695,1.0009325265187516,0.9847731527161476,1.0202029447665906])
        expected['rhoSH'] = np.array([382301.0921264648,382304.13015136716,382307.2896972656,382310.32772216795,382300.31439208984,382303.3767211914,382306.53626708983,382309.64720458986,382299.6581787109,382302.8420288086,382306.00157470704,382309.0395996094,382299.0748779297,382302.18581542966,382305.442578125,382308.50490722654,382298.44296874997,382301.89416503906,382305.1752319336,382308.35908203124,382298.46727294923,382301.6997314453,382304.8349731445,382307.99451904296,382297.98118896486,382301.1650390625,382304.27597656247,382307.3383056641,382297.1791503906,382300.31439208984,382303.4739379883,382306.46335449215,382296.47432861326,382299.6338745117,382302.81772460934,382305.75853271486,382295.7452026367,382298.92905273434,382301.89416503906,382304.9078857422,382294.77303466795])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_60N_0_90000(self):
        """Test for latitude = 60, longitude = 0, rho = 90000"""
        lat = 60
        lon = 0
        rho = 90000

        expected = {}
        expected['latNH'] = np.array([80.52434281443155,80.54199714588874,80.5596822131972,80.57737240314754,80.59574561201487,80.61333164158036,80.63556390732876,80.65782349383383,80.68075414642485,80.70290103480862,80.72497791375339,80.76256615230326,80.80083911731742,80.83822928038137,80.8755656557056,80.91282604517531,80.95157712343138,80.98935660727801,81.0271002326315,81.0648327589276,81.1034608937786,81.13883615103738,81.17418921018137,81.20950470328492,81.24587716816254,81.28099885464839,81.3196346734622,81.35818340736411,81.397931693239,81.43628918184415,81.47459971289875,81.5218620606343,81.5702735876977,81.6170791665325,81.66366447176658,81.71004657887285,81.75747199737484,81.80307290159477,81.84843816428835,81.89354302601983,81.94020346333477])
        expected['lonNH'] = np.array([317.3189775172034,317.34903034955147,317.3788099743327,317.4085349576006,317.3792471064396,317.40940922181437,317.45885979140525,317.5082283987261,317.49803775648445,317.54776153364213,317.59797708442005,317.71687701749164,317.77599913494726,317.89697544552655,318.01888066183295,318.14185138764987,318.22987886567296,318.38161834827395,318.5346145856823,318.6889768609245,318.7812117354764,318.9427320489689,319.1053998342419,319.2692697328088,319.369591551338,319.53663065767984,319.71722085933493,319.899614230931,320.01687491860173,320.2024648187293,320.38939343593427,320.6610163988473,320.86805309296875,321.14549537705466,321.4259429443754,321.70920454963414,321.92700562188753,322.2165783219394,322.5088557769026,322.8042477981273,323.03177505975873])
        expected['rhoNH'] = np.array([6371.199620246887,6371.199620246887,6371.199240493775,6371.199620246887,6371.2,6371.198860740661,6371.199620246887,6371.199240493775,6371.2,6371.198860740661,6371.199240493775,6371.199240493775,6371.199240493775,6371.199240493775,6371.199240493775,6371.2,6371.198860740661,6371.199240493775,6371.199620246887,6371.198860740661,6371.199240493775,6371.199240493775,6371.2,6371.199240493775,6371.199240493775,6371.199620246887,6371.2,6371.199240493775,6371.199620246887,6371.199240493775,6371.199240493775,6371.2,6371.199620246887,6371.199240493775,6371.199620246887,6371.199240493775,6371.199620246887,6371.199620246887,6371.199620246887,6371.199620246887,6371.2])
        expected['latSH'] = np.array([36.22117026792187,36.2327337781867,36.24401725069556,36.255030930732204,36.21303551262038,36.2246468342094,36.23526777836877,36.24559160929925,36.20288585151374,36.21384489003703,36.2244658341964,36.23445498585754,36.19131551105974,36.20191937974619,36.21221588991998,36.22223919252698,36.178587453541425,36.188655152378026,36.198439398364066,36.20799141791833,36.16201741461497,36.17454398155277,36.18434188791716,36.19389390747142,36.147991621154354,36.15818226339601,36.17004630198432,36.17915777433712,36.13295154460198,36.14272554530427,36.15221609315601,36.16351664113779,36.117091845349215,36.126660940376404,36.13593975236386,36.1449521869737,36.10124922156937,36.1110129769879,36.12052060031256,36.12975160097583,36.0861647487874])
        expected['lonSH'] = np.array([2.8552956957267153,2.834491152958268,2.8136018731554304,2.792700213634722,2.8450292810739515,2.824208089719402,2.801594827481371,2.7789655569874725,2.8295375582627162,2.806959514187593,2.7843795491217653,2.76068135402276,2.81016842243703,2.7865310587103194,2.762900738616191,2.739183760496968,2.7862478193031754,2.7602510521050494,2.734232727122355,2.7081382028417327,2.755095966828982,2.729713489769334,2.70426740657304,2.678755582805984,2.726225397537573,2.700788492407976,2.6747469020934216,2.648580233939691,2.6953924295202545,2.669322878118785,2.6432085036008877,2.615420732736337,2.6604777831436186,2.6326684544945,2.60480427088861,2.5769262134609683,2.6227725776042097,2.595783511985727,2.568732974664715,2.54164657885056,2.587412901714465])
        expected['rhoSH'] = np.array([382299.6095703125,382310.9353271484,382321.77499999997,382332.66328125,382295.550769043,382306.9251342773,382317.2787231445,382327.55939941405,382289.9121948242,382300.6789550781,382311.2755859375,382321.1430908203,382283.3257568359,382293.84947509767,382304.00863037107,382313.97335205076,382275.5241088867,382285.44022216793,382295.113293457,382304.61623535154,382327.82674560545,382276.2046264648,382285.7075683594,382295.33203125,382318.6154541015,382328.6044799805,382276.49627685547,382285.6589599609,382308.9180786133,382318.6397583008,382328.21561279293,382275.3782836914,382298.3214477539,382307.6785644531,382316.9384643555,382325.9553222656,382287.5789916992,382297.2034545898,382306.68209228513,382315.96629638673,382277.39553222654])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_90N_0_90000(self):
        """Test for latitude = 90, longitude = 0, rho = 90000"""
        lat = 90
        lon = 0
        rho = 90000

        expected = {}
        expected['latNH'] = np.array([82.34980649276585,82.35883258775402,82.36779123462414,82.37671829186934,82.3705207489712,82.37948793357778,82.3916328636957,82.40375218060426,82.4006760341568,82.41277400672419,82.42483270570385,82.44572881569586,82.45134237741996,82.47210871381773,82.49274869171587,82.51323328281039,82.52234731648412,82.54664912955103,82.57078872562515,82.5948292839563,82.60333969966213,82.62841930052078,82.65333070797111,82.6780534314456,82.68715295096736,82.71162466498987,82.73989311041726,82.76792506054464,82.78009987274018,82.80777665303073,82.83521352292667,82.87523373570788,82.89924099686684,82.93864563884911,82.97768273127667,83.01635825056505,83.03864558471362,83.0763614624236,83.11364874576317,83.15056378379298,83.17138348104365])
        expected['lonNH'] = np.array([239.34851591481595,239.28043258916927,239.21185748990234,239.14295454155524,239.06115619605518,238.99288162511172,238.89602954268094,238.79876764889997,238.68896552780285,238.59211344537206,238.49471494780767,238.287869498983,238.0690302379758,237.8613924872074,237.65249798163174,237.44212815519535,237.18687032553365,236.94062834557633,236.6923919503814,236.44207917767875,236.18225878165148,235.91757529093513,235.65048757363095,235.38099562973895,235.10336210035626,234.83108343928288,234.52913443645494,234.2242347919056,233.91245031667285,233.6039443322417,233.29270627214257,232.91871243394934,232.5390358783667,232.15840309630022,231.77345363467828,231.3842421350143,231.00396452278466,230.62024449521334,230.2324536748967,229.84072866561812,229.44985059979663])
        expected['rhoNH'] = np.array([6371.2,6371.199620246887,6371.2,6371.2,6371.200759506225,6371.199240493775,6371.1984809875485,6371.199620246887,6371.199620246887,6371.2,6371.199240493775,6371.199240493775,6371.199620246887,6371.2,6371.199620246887,6371.2,6371.199240493775,6371.2,6371.2,6371.199240493775,6371.2,6371.2,6371.200759506225,6371.2,6371.2,6371.2,6371.2,6371.2,6371.199620246887,6371.2,6371.2,6371.200759506225,6371.2,6371.199620246887,6371.2,6371.199620246887,6371.199620246887,6371.199620246887,6371.2,6371.199620246887,6371.199620246887])
        expected['latSH'] = np.array([48.517652038249615,48.525165246336634,48.53232328458681,48.53916030394599,48.49639990464713,48.50390969763955,48.5095480187994,48.51500192485165,48.47052714807111,48.47649331831112,48.482288733821875,48.487216715308044,48.44232871208272,48.44792263701296,48.45331848645727,48.45830452455138,48.411500653263865,48.41536654033409,48.41881578586495,48.422087446477384,48.37538944312201,48.380078367987224,48.38436431169141,48.38848974595009,48.342594289822195,48.347385667524954,48.3516818565129,48.355674102082766,48.30976498557653,48.31448806138759,48.31890036359142,48.322499873284016,48.27616728504923,48.28038151176713,48.2843976629991,48.288202078366794,48.24280181095372,48.24802690566878,48.252961717344114,48.25768479315518,48.21248601632262])
        expected['lonSH'] = np.array([3.5521261090034026,3.5211221728134223,3.489967545574878,3.458780048050954,3.5427674691800157,3.511755422140396,3.4786102216456167,3.445244320663281,3.5271468265481967,3.494132039977882,3.4609479927821982,3.4263814726098216,3.5069271187274316,3.472532847388186,3.438059388543251,3.4035411065818875,3.4810074046008794,3.4435687898825122,3.4061756386108084,3.368535746755337,3.4458618124529328,3.409107497312036,3.372313908583412,3.3353341971999053,3.413228449259081,3.3763868357628555,3.3387919804672244,3.300950171144415,3.37792661653387,3.3403176739730758,3.302593898856861,3.2626253393812386,3.3372528400264443,3.297408931503175,3.2573996043359443,3.217312797210316,3.292921710661888,3.2540583611713387,3.215103444457229,3.1759666739564674,3.251479324429424])
        expected['rhoSH'] = np.array([377304.9994140625,377315.9606079101,377326.75167236326,377336.95943603513,377284.7540161133,377295.9339477539,377304.2216796875,377312.72814941406,377258.0923095703,377266.86612548825,377275.5427246094,377282.6395507812,377226.9586303711,377234.93040771486,377242.73205566406,377249.9260986328,377191.3529785156,377196.60268554685,377201.4635253906,377206.25145263673,377147.7755493164,377154.1432495117,377159.87904052733,377165.37178955076,377107.7222290039,377114.3572753906,377119.5583740234,377124.61364746094,377066.623828125,377072.55405273434,377078.1683227539,377082.00838623045,377022.75474853517,377027.34824218747,377031.45565185545,377035.73319091793,376977.743371582,376983.6006835937,376989.2878662109,376994.8292236328,376936.8394042969])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_90S_90_90000(self):
        """Test for latitude = -90, longitude = 90, rho = 90000"""
        lat = -90
        lon = 90
        rho = 90000

        expected = {}
        expected['latNH'] = np.array([-72.90688287510915,-72.88874189267358,-72.8686747968921,-72.85101192769844,-72.88099645815478,-72.86271887193584,-72.84415441777173,-72.82800785057384,-72.85974090945771,-72.84296596485618,-72.82429222766535,-72.81035864175851,-72.84452324798693,-72.82994762429811,-72.81564520817611,-72.79945765984317,-72.83621773795619,-72.82401902009855,-72.81206618905102,-72.8003865655703,-72.83520686995902,-72.82410098236858,-72.81326830234494,-72.80268150913142,-72.84099887037519,-72.82978369975805,-72.81889637822104,-72.81034498138018,-72.85094362580674,-72.8417501911839,-72.83282996412785,-72.82743411468354,-72.86945343845747,-72.86344287198787,-72.85766453195004,-72.85213207872232,-72.89609117622052,-72.88967079840072,-72.88348264701267,-72.87751306167809,-72.91960068734372])
        expected['lonNH'] = np.array([28.70189947740304,28.647503850853056,28.593606828112485,28.539757616696104,28.6732775696861,28.61870606576499,28.547506466309486,28.476245395151448,28.59221176197451,28.52016351151463,28.44859166674936,28.365037962632595,28.46848288515973,28.384010520599595,28.29983526926836,28.216023725510425,28.29418841037205,28.18469535533487,28.07529963049336,27.965905613199144,28.043076505536533,27.934650667557165,27.826358018266614,27.718171236908194,27.795950016081715,27.686730168611334,27.568438122375884,27.449937755370748,27.516998260189226,27.39749556292339,27.278083365664056,27.13910609152722,27.185141566533108,27.04481191494061,26.90453348976689,26.76435068724155,26.817269285383514,26.684396492817378,26.551798615365335,26.419296360561674,26.47081647747108])
        expected['rhoNH'] = np.array([257214.93735351562,257202.37208251952,257252.87620849608,257240.5539794922,257196.92794189454,257184.0710205078,257235.5230102539,257224.14864501954,257181.5919921875,257169.6829345703,257220.8918823242,257210.87855224608,257169.9259765625,257159.45086669922,257149.097277832,257201.91030273438,257162.5375,257153.52064208983,257144.67391357422,257135.87579345703,257159.49947509766,257151.30895996094,257143.19135742186,257135.24388427733,257096.86755371094,257088.45830078123,257144.67391357422,257137.96595458983,257101.07218017578,257093.92674560545,257087.02435302734,257082.57668457032,257111.13411865235,257106.24897460936,257101.4853515625,257096.8432495117,257062.3555908203,257057.17879638672,257052.19643554688,257047.38420410155,257075.91733398437])
        expected['latSH'] = np.array([-68.33948073560825,-68.30527514824485,-68.2709602778547,-68.23646782254613,-68.2116469151023,-68.17694955411864,-68.14394608004912,-68.1107923418179,-68.08739211372142,-68.05406079057175,-68.02046992023364,-67.98901006891657,-67.96737202962595,-67.93569361225545,-67.90381028920982,-67.8717903623808,-67.85184621000437,-67.82172507576462,-67.7914126962281,-67.7609363921515,-67.74050046615483,-67.71996891750976,-67.69928710470296,-67.67850966924777,-67.66796385716927,-67.64703615755238,-67.63134038283968,-67.61556264585695,-67.61001653225088,-67.59411585186311,-67.57810588844859,-67.56609841588772,-67.5644181893519,-67.55228777338596,-67.54008905552831,-67.5277673942656,-67.52944762080142,-67.52062301639376,-67.51167546858105,-67.50270060001165,-67.50417592087237])
        expected['lonSH'] = np.array([152.83727158554274,152.8151690933886,152.79298463896438,152.7708821468102,152.8006754319698,152.77868222284238,152.7802941474865,152.7817967891039,152.83522252879175,152.83653392511238,152.83813218937817,152.82361120720273,152.86101332309772,152.84641037865222,152.83184841534177,152.81708154635618,152.87289785225354,152.8767090978104,152.8804657018539,152.88393543795226,152.93958781930954,152.92906932798772,152.91850985553089,152.9078001189123,152.94912276339087,152.93849498904234,152.9272524976685,152.91583242137622,152.95696382055806,152.94569400842752,152.93436955478364,152.92036766698513,152.9587533301206,152.94481974421376,152.93064027149683,152.91652910067157,152.9438771781083,152.9184825347742,152.89316985371013,152.86762494621428,152.89482275948927])
        expected['rhoSH'] = np.array([6371.2,6371.2,6371.199620246887,6371.199620246887,6371.2,6371.199240493775,6371.199240493775,6371.199620246887,6371.2,6371.199620246887,6371.199620246887,6371.199240493775,6371.199620246887,6371.2,6371.199620246887,6371.2,6371.199620246887,6371.199620246887,6371.2,6371.199240493775,6371.199620246887,6371.2,6371.2,6371.2,6371.2,6371.2,6371.2,6371.199620246887,6371.199240493775,6371.199620246887,6371.199620246887,6371.2,6371.2,6371.2,6371.199620246887,6371.199620246887,6371.199240493775,6371.199620246887,6371.2,6371.2,6371.199620246887])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_60S_90_90000(self):
        """Test for latitude = -60, longitude = 90, rho = 90000"""
        lat = -60
        lon = 90
        rho = 90000

        expected = {}
        expected['latNH'] = np.array([-65.6771139782723,-65.68237322393321,-65.68778273375585,-65.69346545114533,-65.72284892495472,-65.72803986872393,-65.7381348883172,-65.74844847396392,-65.7829136085158,-65.79274908092063,-65.8028031193789,-65.81461934664301,-65.85101059454084,-65.8623623689414,-65.8739327093954,-65.88570795552451,-65.92929822280752,-65.94745286562141,-65.96582607448875,-65.98445883054455,-66.02851355069112,-66.04478306129408,-66.06121649643714,-66.07788215801199,-66.12046155729783,-66.1366627660091,-66.15463982390457,-66.1728081270968,-66.21725899821524,-66.23497650892227,-66.25289892530438,-66.27511070048527,-66.32409681721259,-66.34585779990826,-66.367823688279,-66.39009010497327,-66.43699984419291,-66.4563429399224,-66.47586362057027,-66.49558920689327,-66.54290875746312])
        expected['lonNH'] = np.array([51.260412626594785,51.175871960142956,51.086027651800606,51.00189338160439,51.08624621785405,50.99537055094702,50.89699533633133,50.79308766848793,50.863742560357124,50.75852349619308,50.65899056451307,50.55135702847742,50.61861048613995,50.509556270756946,50.4061574520067,50.29727057625836,50.34546439104197,50.21680070255186,50.08806871217004,49.964688175002934,50.005901536454786,49.89035522626568,49.76925938737594,49.648112322067426,49.70322511848026,49.58047637381137,49.462457535142725,49.338851601733005,49.38638971835629,49.26667016258431,49.14146938000339,49.008133842120984,49.05185729809282,48.91666736385076,48.78141937300075,48.651758476891814,48.697093857507774,48.57421533924466,48.44574289605131,48.31727728304712,48.36703179605608])
        expected['rhoNH'] = np.array([256597.22182617188,256571.67811279296,256608.86353759764,256583.05247802733,256543.92271728514,256580.6463623047,256550.87371826172,256584.02464599608,256540.98190917968,256573.2821899414,256542.5616821289,256573.35510253906,256528.61107177733,256559.015625,256526.6181274414,256557.04698486326,256506.44564208985,256530.6526245117,256554.83530273437,256515.92427978516,256527.42016601562,256490.74512939452,256516.8964477539,256542.92624511718,256494.14771728514,256519.69143066407,256482.11713867186,256507.1747680664,256520.54207763672,256482.1900512695,256506.56716308594,256528.5624633789,256476.13830566406,256497.33156738282,256518.4276123047,256476.50286865234,256489.1653564453,256449.5009033203,256472.5898925781,256495.5087524414,256444.73728027343])
        expected['latSH'] = np.array([-66.53366068132692,-66.50393569805902,-66.47401946949438,-66.444034939038,-66.4233531262312,-66.39325931274814,-66.36548776358288,-66.33767523328257,-66.31912443949682,-66.2911616450348,-66.26307590716769,-66.23534533913744,-66.21712239443187,-66.18936450564493,-66.16145635269626,-66.13335695445082,-66.11897257605878,-66.09490298942364,-66.07066947824845,-66.04627204253316,-66.03164177733098,-66.01641045548186,-66.00108351098436,-65.98570192497348,-65.98015581136744,-65.96476056497823,-65.95467920576328,-65.94455686541332,-65.94433829935988,-65.93422961938828,-65.92401165638992,-65.9178918068936,-65.92171671282881,-65.91561052371082,-65.90936773080941,-65.90312493790802,-65.90947701383615,-65.9058433531977,-65.9020867491542,-65.89833014511069,-65.90465490028211])
        expected['lonSH'] = np.array([145.33638515979143,145.3421498394509,145.34810576440717,145.3539114252017,145.39802078686162,145.404222598628,145.43422078946267,145.46410969727066,145.53250721161916,145.5628195911557,145.59305000842215,145.6062732546553,145.65780020175387,145.6711190706354,145.68450624140863,145.69789341218186,145.76925522863016,145.80242262723974,145.83574029001105,145.86918089618743,145.94115742966102,145.95443531740753,145.96775418628906,145.9810457344139,146.0331873985378,146.0469843806612,146.0580356267383,146.06908687281538,146.1190975179182,146.13055857534547,146.14225185920455,146.14864491626767,146.1942842403017,146.2011007690934,146.20806756204678,146.2151709587836,146.24896673479682,146.24374847027093,146.23870779066345,146.23365345067765,146.26815956636457])
        expected['rhoSH'] = np.array([6371.2,6371.2,6371.2,6371.2,6371.2,6371.2,6371.199620246887,6371.199620246887,6371.200759506225,6371.199620246887,6371.2,6371.2,6371.2,6371.199620246887,6371.199240493775,6371.2,6371.199240493775,6371.199620246887,6371.2,6371.2,6371.2,6371.2,6371.2,6371.2,6371.2,6371.2,6371.2,6371.200759506225,6371.199620246887,6371.199620246887,6371.2,6371.2,6371.2,6371.199620246887,6371.200759506225,6371.199620246887,6371.199620246887,6371.199620246887,6371.2,6371.199620246887,6371.2])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_30S_90_90000(self):
        """Test for latitude = -30, longitude = 90, rho = 90000"""
        lat = -30
        lon = 90
        rho = 90000

        expected = {}
        expected['latNH'] = np.array([-55.84571236619928,-55.93393108951915,-56.02139849203033,-56.108237517137894,-56.206455637402655,-56.29116364348917,-56.3893681033756,-56.48432139321713,-56.594150835070934,-56.68691846437804,-56.78177613157118,-56.86703055279128,-56.968376899695926,-57.05204671702859,-57.137738270355555,-57.22062944612284,-57.33607330347439,-57.43545255589808,-57.534367355458215,-57.630536418971985,-57.746799899023955,-57.82765567841855,-57.9105741749425,-57.99102014298691,-58.09024913124887,-58.17173328804711,-58.24668778399882,-58.32161495919388,-58.418234815192875,-58.49211014125572,-58.56590350504854,-58.642319661482645,-58.73689046073065,-58.81026035279493,-58.88573394312357,-58.95913115594453,-59.046257048997205,-59.111567317840866,-59.1789539641922,-59.24434619530592,-59.33136280533188])
        expected['lonNH'] = np.array([59.66259032465348,59.52550842801133,59.38865875780095,59.25199350269816,59.26092055994337,59.12355179535607,58.96556951985368,58.813201659849035,58.802273357177015,58.64892878012106,58.48967608943304,58.3386742672624,58.330382417610004,58.17806236892955,58.020148395318856,57.867794195692554,57.84056223147171,57.661918633730025,57.4829881680432,57.30924864612559,57.275528002193234,57.12054417973648,56.95977518705271,56.80442253438078,56.79600091113415,56.6332033522669,56.48317483205298,56.33281504766432,56.325226707496434,56.173039847504796,56.020631006365136,55.861224636420786,55.85702748517582,55.70127868153202,55.53952614160777,55.38313188508741,55.388684828882624,55.24145668622842,55.088381901644674,54.9407371174511,54.9451084385199])
        expected['rhoNH'] = np.array([255311.0192993164,255316.4634399414,255321.73745117188,255326.91424560547,255269.70216064452,255274.29565429688,255323.29291992186,255311.0192993164,255297.09299316406,255283.50694580076,255330.29252929686,255320.95971679688,255310.36308593748,255299.15885009765,255347.86446533204,255334.64298095703,255298.59985351562,255323.3172241211,255346.5520385742,255307.15493164063,255328.54262695313,255309.77978515625,255351.14553222657,255330.29252929686,255309.41522216797,255348.30194091797,255333.1604248047,255317.28978271483,255362.42268066405,255344.7292236328,255326.40385742186,255368.54733886718,255349.15258789062,255328.22667236326,255368.13416748046,255345.38543701172,255336.07692871094,255324.96990966797,255374.86643066406,255362.5928100586,255350.34349365233])
        expected['latSH'] = np.array([-64.76846659222883,-64.74839949644732,-64.72826409877413,-64.70814236147928,-64.69501473789452,-64.67500228362638,-64.65867813151004,-64.64238130015039,-64.63291465796075,-64.6167544303845,-64.60063518394327,-64.58345042799152,-64.5733007668849,-64.55632091660823,-64.53934106633159,-64.52236121605492,-64.5189324610916,-64.50860521506652,-64.4982506482848,-64.48799170415143,-64.4848771378899,-64.48236362827532,-64.4798637790391,-64.47735026942453,-64.48210408108687,-64.4797954771474,-64.48243193016702,-64.4850137416733,-64.49499947823986,-64.49785449731291,-64.50057291260259,-64.50703427155742,-64.52099517822091,-64.52759314095917,-64.53415012256238,-64.54066612303058,-64.5560340486631,-64.56395706810031,-64.57168884224077,-64.57942061638121,-64.5950071080672])
        expected['lonSH'] = np.array([143.77774965157286,143.80355410625717,143.82948150434652,143.85565478924602,143.9124683027622,143.9394748707404,143.99190340280944,144.04444121790516,144.1282749597779,144.18194658627587,144.23590508071896,144.27050681905425,144.33628154076146,144.37166192066215,144.40708328169782,144.44253196349018,144.533359819073,144.59364306868756,144.65411756359885,144.7146057188885,144.8077148576541,144.84429735084868,144.8808935044216,144.91763992215627,144.98755373850054,145.02510611855726,145.0580549511134,145.09089450064283,145.15787133564396,145.19140756446873,145.2249437932935,145.25181375748832,145.3136133090986,145.3408521035086,145.36796795451357,145.3947696168167,145.44390599770577,145.456692111832,145.46932796179655,145.4815949815459,145.53178321156716])
        expected['rhoSH'] = np.array([6371.2,6371.2,6371.199620246887,6371.2,6371.199620246887,6371.199620246887,6371.199620246887,6371.2,6371.2,6371.199620246887,6371.2,6371.199620246887,6371.199620246887,6371.2,6371.199620246887,6371.2,6371.199620246887,6371.2,6371.200759506225,6371.199620246887,6371.2,6371.200759506225,6371.2,6371.2,6371.2,6371.2,6371.2,6371.2,6371.199620246887,6371.2,6371.2,6371.2,6371.200759506225,6371.199620246887,6371.2,6371.2,6371.2,6371.200759506225,6371.2,6371.2,6371.2])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_0N_90_90000(self):
        """Test for latitude = 0, longitude = 90, rho = 90000"""
        lat = 0
        lon = 90
        rho = 90000

        expected = {}
        expected['latNH'] = np.array([82.24806826375756,82.24585869756106,82.24379854175267,82.24187669727495,82.22865771991003,82.22668806410813,82.21750828986363,82.20835669014947,82.1886464717521,82.17949487203794,82.17033900345552,82.14180844951873,82.10225055516696,82.07366706726411,82.04497429633453,82.01655217165082,81.9632673046146,81.9214383723638,81.87969481747763,81.83765158804161,81.78398166909093,81.73904329322049,81.69371986543558,81.64838619236691,81.59127727316914,81.54607678878929,81.49561620497488,81.4453186919269,81.38275159780865,81.33243444796682,81.28221462832065,81.22397019017336,81.15305489734206,81.09499231298143,81.03701681353272,80.97898496502334,80.91481533777107,80.86411569733572,80.81347752860289,80.76284789760652,80.69832395429106])
        expected['lonNH'] = np.array([119.96227337432907,120.13641587740771,120.31236155042724,120.48890828009374,120.22254456284158,120.39675536781192,120.54766156733419,120.69923712539511,120.40794321767241,120.55801613411593,120.70729674861572,120.78354898050975,120.41586623710963,120.49062948776458,120.56658119133512,120.64354376290282,120.23785784696075,120.27174924562235,120.30719792741472,120.34434049612125,119.94555307124088,120.00191579227183,120.06061443799892,120.11715474394828,119.74675358525849,119.80517902341877,119.85449298922627,119.90592431367646,119.53477183417797,119.58557478122452,119.63699244529639,119.6087018017542,119.16631044921246,119.14009618317796,119.11504304930234,119.09138327401743,118.67374452702782,118.66237909224893,118.65205184622387,118.64303599651944,118.23677634468709])
        expected['rhoNH'] = np.array([6371.200759506225,6371.199620246887,6371.199620246887,6371.2,6371.200759506225,6371.199620246887,6371.199240493775,6371.199620246887,6371.2,6371.199240493775,6371.199620246887,6371.198860740661,6371.199620246887,6371.2,6371.2,6371.2,6371.199620246887,6371.2,6371.2,6371.199620246887,6371.199620246887,6371.199620246887,6371.200759506225,6371.2,6371.2,6371.2,6371.2,6371.199620246887,6371.199620246887,6371.2,6371.199620246887,6371.200759506225,6371.2,6371.199620246887,6371.2,6371.199620246887,6371.199620246887,6371.2,6371.199240493775,6371.2,6371.2])
        expected['latSH'] = np.array([-61.42179684232764,-61.4097347282534,-61.39765895380083,-61.38552853783489,-61.348140082318224,-61.3360506474873,-61.32900189226385,-61.321871174770365,-61.289373134699446,-61.28229705871931,-61.27520732236084,-61.265262566929295,-61.22980022475858,-61.21989645046207,-61.20999267616554,-61.20000693959898,-61.17321893767419,-61.17198950362359,-61.17074640919466,-61.169503314765706,-61.14257870905752,-61.14741448298989,-61.15225025692226,-61.1570040685846,-61.13599440669762,-61.140871161765006,-61.15205901162551,-61.163274182242674,-61.148507313257085,-61.159831766900965,-61.1711698809232,-61.18638754239399,-61.175500220856975,-61.19077252384113,-61.206099468338635,-61.22133079018778,-61.21098988378438,-61.22698618682054,-61.24290052758667,-61.25880120797447,-61.248432980814385])
        expected['lonSH'] = np.array([127.2410147275149,127.26897752197694,127.29702227870901,127.32514899771111,127.24548167123208,127.27358106947752,127.31782703492087,127.36222326452595,127.29799216557115,127.34234741404121,127.38683926629467,127.4220010801419,127.34781156537721,127.38287775657606,127.41802591004495,127.45324236540554,127.38663436061957,127.42939134482386,127.4724078762166,127.51546538874435,127.44835194995981,127.47034515908724,127.4926798776732,127.51494629436743,127.42654998612913,127.44887104433673,127.46550938515487,127.48236629202647,127.38748130407666,127.40436553170493,127.42135904235991,127.4298831184441,127.32590031851981,127.33445171536067,127.34305775371489,127.35163647131243,127.23888370849386,127.23948476514082,127.23970333119426,127.24031804821956,127.12710083253742])
        expected['rhoSH'] = np.array([6371.199240493775,6371.199620246887,6371.199240493775,6371.199620246887,6371.2,6371.2,6371.199620246887,6371.199620246887,6371.200759506225,6371.2,6371.2,6371.198860740661,6371.199620246887,6371.2,6371.2,6371.2,6371.199620246887,6371.199240493775,6371.199620246887,6371.199620246887,6371.2,6371.2,6371.2,6371.199620246887,6371.199620246887,6371.2,6371.199620246887,6371.199240493775,6371.199620246887,6371.2,6371.2,6371.2,6371.2,6371.199620246887,6371.2,6371.199620246887,6371.2,6371.2,6371.199620246887,6371.2,6371.2])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_30N_90_90000(self):
        """Test for latitude = 30, longitude = 90, rho = 90000"""
        lat = 30
        lon = 90
        rho = 90000

        expected = {}
        expected['latNH'] = np.array([79.80784145634523,79.80767240916327,79.8075750789676,79.80744445159972,79.80357173434032,79.80343171546234,79.79756031409707,79.79174099292422,79.7825569498115,79.77668127957799,79.77082353859106,79.74371281022798,79.71328687879651,79.68639727780783,79.65928654944474,79.63223302391597,79.59015478976046,79.55091279165781,79.51186886904107,79.47305802662976,79.43056656602947,79.39065008674626,79.35074214519953,79.31057465646433,79.26750348355823,79.22720365990787,79.18423408606567,79.14143441317907,79.09525038155874,79.05230556715229,79.00942393199566,78.9576169471411,78.9029993394431,78.85134432629758,78.80005814336725,78.7484355736203,78.70083171642625,78.65585492074172,78.61123244112038,78.56691475869074,78.51937408074652])
        expected['lonNH'] = np.array([94.46967829733451,94.49057184600558,94.51238064002543,94.53452411331462,94.5923143438821,94.61348110011996,94.64391642306154,94.67517819889268,94.74110318476164,94.77085548878622,94.80163915137547,94.8333380593135,94.89962504520848,94.9295276133948,94.96007221936308,94.99085588195233,95.07036611408046,95.11407249457936,95.15780619583495,95.20156721784723,95.27967043100632,95.34586179425291,95.41235368582299,95.47925538874327,95.57929033932727,95.64438887230666,95.7253744252955,95.8061414122309,95.9204377978019,95.99923086006717,96.07840641292596,96.13322551120447,96.22033091368965,96.27303948351464,96.32546801558365,96.3786888495964,96.45138255293284,96.49064248028208,96.5298136151721,96.56923063687223,96.64057196275303])
        expected['rhoNH'] = np.array([6371.2,6371.199620246887,6371.199620246887,6371.199620246887,6371.199620246887,6371.199620246887,6371.199240493775,6371.199620246887,6371.2,6371.199620246887,6371.199620246887,6371.199240493775,6371.199620246887,6371.2,6371.2,6371.199620246887,6371.199620246887,6371.2,6371.2,6371.199240493775,6371.199240493775,6371.2,6371.200759506225,6371.199240493775,6371.199620246887,6371.2,6371.2,6371.199620246887,6371.199620246887,6371.199620246887,6371.2,6371.2,6371.2,6371.199620246887,6371.2,6371.199620246887,6371.199620246887,6371.199620246887,6371.199620246887,6371.2,6371.199620246887])
        expected['latSH'] = np.array([-59.100010637765195,-59.08389139132399,-59.06771750336938,-59.05148897390143,-59.02800678353492,-59.011791914445325,-59.00248919679578,-58.99337772444298,-58.97687598740822,-58.96753228862363,-58.95836617475749,-58.947383230572115,-58.92907832359646,-58.91794511524935,-58.90690752955061,-58.895951906121894,-58.88942224527537,-58.89024186797579,-58.89099318878448,-58.89173084921484,-58.885433414800076,-58.891416660513016,-58.897577491144375,-58.90367001988403,-58.90275477453525,-58.90883364289655,-58.92254866274993,-58.93644126752173,-58.94299824912497,-58.956904514275095,-58.97057855299346,-58.99085055445008,-59.003923536521455,-59.024099915329685,-59.04422165262454,-59.0644116918111,-59.077430032369136,-59.09746980739396,-59.1174139597704,-59.13754935744359,-59.15064966027168])
        expected['lonSH'] = np.array([121.5996336429212,121.60071281281007,121.60173734118557,121.60303507712787,121.58106918875711,121.582189339781,121.60087673735015,121.61960511605433,121.6151245119588,121.63385289066298,121.65269055239386,121.66972504418388,121.6635232324175,121.68053040345085,121.69745561221413,121.71453108513916,121.71862919864117,121.74567674775442,121.77299750443447,121.80016799695278,121.80436173310316,121.80895162022541,121.81376007340111,121.81841826241505,121.80008603468275,121.80477154445337,121.80355577078112,121.80247660089225,121.77832505198708,121.77717758020653,121.77601644804761,121.77262867421929,121.74615486099633,121.74258950224957,121.73902414350283,121.73548610551276,121.7003106312872,121.68796164926782,121.67542142195167,121.66281289274383,121.62752813549154])
        expected['rhoSH'] = np.array([6371.199240493775,6371.199240493775,6371.199620246887,6371.199240493775,6371.199620246887,6371.199620246887,6371.199240493775,6371.199240493775,6371.2,6371.199620246887,6371.2,6371.199620246887,6371.199620246887,6371.199620246887,6371.199240493775,6371.199620246887,6371.199240493775,6371.199620246887,6371.2,6371.199240493775,6371.2,6371.2,6371.2,6371.199620246887,6371.199620246887,6371.199620246887,6371.199620246887,6371.199620246887,6371.199240493775,6371.2,6371.2,6371.2,6371.2,6371.2,6371.199620246887,6371.199240493775,6371.199620246887,6371.2,6371.199620246887,6371.2,6371.199240493775])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_60N_90_90000(self):
        """Test for latitude = 60, longitude = 90, rho = 90000"""
        lat = 60
        lon = 90
        rho = 90000

        expected = {}
        expected['latNH'] = np.array([85.31715699135532,85.31166381171533,85.30616508254666,85.30061598073284,85.29678339083482,85.29130728666776,85.28190040863336,85.27247047871052,85.26485140269136,85.25545989258259,85.24608417728628,85.22163167317082,85.19905704419027,85.17460752828256,85.15010635906927,85.12555865919224,85.09503240935733,85.06244600371403,85.0297225674005,84.99685270890663,84.96618174443869,84.93012304137608,84.89396231236273,84.85762784041239,84.8236591752358,84.78721542025872,84.7472063065349,84.7070499168571,84.66941045188847,84.62918405277168,84.58881507345596,84.54330765745027,84.50047383361783,84.45483322892333,84.40907394969202,84.36318703130058,84.32433520775425,84.28246444059478,84.24056635267863,84.19860551239948,84.15979253555406])
        expected['lonNH'] = np.array([140.1649210900946,140.1379281824947,140.11157731267681,140.08592312215424,140.21381158417356,140.18649082749351,140.13165806883666,140.07840991406724,140.17722909097898,140.12183625681016,140.06817829069055,139.87865420160102,139.84148431213782,139.65219244948008,139.46679379464928,139.28441408343159,139.20235619074305,138.972274438362,138.74592196926778,138.52343538724378,138.44843991015705,138.23524238540426,138.0264161817203,137.82077284618956,137.75961533236125,137.5567313932552,137.34111598153623,137.12935279650915,137.05831882914103,136.85013466323903,136.6460895919741,136.34246036261032,136.17697853939927,135.8811903672027,135.59072974255872,135.30671681649125,135.17167031622176,134.90945935398497,134.65226175059897,134.40024143060384,134.27661500662663])
        expected['rhoNH'] = np.array([6371.2,6371.199620246887,6371.199620246887,6371.2,6371.2,6371.199240493775,6371.199240493775,6371.199620246887,6371.199620246887,6371.199240493775,6371.2,6371.199240493775,6371.199620246887,6371.2,6371.199620246887,6371.2,6371.199620246887,6371.199240493775,6371.200759506225,6371.2,6371.199620246887,6371.2,6371.2,6371.199620246887,6371.2,6371.2,6371.200759506225,6371.199620246887,6371.199620246887,6371.2,6371.2,6371.200759506225,6371.2,6371.199240493775,6371.2,6371.199620246887,6371.199620246887,6371.2,6371.199620246887,6371.199620246887,6371.199620246887])
        expected['latSH'] = np.array([5.186583604041061,5.279897648481764,5.373245843868332,5.466689661903274,5.593621897438794,5.687024734338721,5.850498481933812,6.014641588067548,6.210326507788423,6.373984670491097,6.537424267140324,6.736797489013,6.964837014832213,7.163581859301246,7.361479760313202,7.559459623595188,7.877896703079514,8.16671125213351,8.455553121944178,8.74320653883926,9.054376297046701,9.321511825675074,9.586939807010936,9.85294835442626,10.138190714544336,10.401494507048326,10.689912905130456,10.977129189918656,11.279679249393538,11.563828779244417,11.846455176910368,12.18403727663825,12.532773075280758,12.865246193509478,13.195936632364806,13.524181863497276,13.830126526989659,14.126126435050509,14.420254871278757,14.71126874124549,15.00456389439502])
        expected['lonSH'] = np.array([54.458730667723295,54.35879816997684,54.25847293635311,54.15770032533874,54.08094948963531,53.9810067466051,53.816983168781825,53.65180870408341,53.51173859967937,53.34753743693768,53.183698274221996,52.98666780723464,52.815438379837005,52.61933681857677,52.42345723846456,52.22682975263823,51.97122358332884,51.69173907268109,51.41135639215748,51.1306936738779,50.876088127281925,50.61264773099453,50.349265391315086,50.08419941000523,49.84617756271404,49.58157261917316,49.29073291903026,48.998906256552296,48.73389833185039,48.44162770707637,48.14840427091314,47.7979438495052,47.47291905256639,47.120559838569186,46.76578956779497,46.40893267422931,46.10723980349527,45.77683281749049,45.44431188793758,45.11069129792831,44.800812445474])
        expected['rhoSH'] = np.array([157939.8421508789,158294.3796569824,158651.61492919922,159011.65733642576,159742.31447753907,160102.91588134764,160802.19630126952,161510.4206665039,162597.81484375,163314.18111572266,164036.3682434082,164947.69064941406,166245.59564819335,167171.08740234375,168102.82533569334,169044.9776184082,170878.3648864746,172329.70229492188,173804.3352783203,175296.12702636718,177212.03920288084,178638.03948364258,180076.20401611328,181539.1466796875,183431.15567626953,184921.7929748535,186594.91835327147,188289.54079589844,190430.04807739257,192163.59369506835,193917.12951660156,196076.98294067383,198714.46248779297,200934.26221923827,203189.48532104492,205476.57122802734,208048.66032714842,210191.05118408203,212365.4506713867,214562.18571777342,217271.2532836914])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_90N_90_90000(self):
        """Test for latitude = 90, longitude = 90, rho = 90000"""
        lat = 90
        lon = 90
        rho = 90000

        expected = {}
        expected['latNH'] = np.array([82.34980649276585,82.35883258775402,82.36779123462414,82.37671829186934,82.3705207489712,82.37948793357778,82.3916328636957,82.40375218060426,82.4006760341568,82.41277400672419,82.42483270570385,82.44572881569586,82.45134237741996,82.47210871381773,82.49274869171587,82.51323328281039,82.52234731648412,82.54664912955103,82.57078872562515,82.5948292839563,82.60333969966213,82.62841930052078,82.65333070797111,82.6780534314456,82.68715295096736,82.71162466498987,82.73989311041726,82.76792506054464,82.78009987274018,82.80777665303073,82.83521352292667,82.87523373570788,82.89924099686684,82.93864563884911,82.97768273127667,83.01635825056505,83.03864558471362,83.0763614624236,83.11364874576317,83.15056378379298,83.17138348104365])
        expected['lonNH'] = np.array([239.34851591481595,239.28043258916927,239.21185748990234,239.14295454155524,239.06115619605518,238.99288162511172,238.89602954268094,238.79876764889997,238.68896552780285,238.59211344537206,238.49471494780767,238.287869498983,238.0690302379758,237.8613924872074,237.65249798163174,237.44212815519535,237.18687032553365,236.94062834557633,236.6923919503814,236.44207917767875,236.18225878165148,235.91757529093513,235.65048757363095,235.38099562973895,235.10336210035626,234.83108343928288,234.52913443645494,234.2242347919056,233.91245031667285,233.6039443322417,233.29270627214257,232.91871243394934,232.5390358783667,232.15840309630022,231.77345363467828,231.3842421350143,231.00396452278466,230.62024449521334,230.2324536748967,229.84072866561812,229.44985059979663])
        expected['rhoNH'] = np.array([6371.2,6371.199620246887,6371.2,6371.2,6371.200759506225,6371.199240493775,6371.1984809875485,6371.199620246887,6371.199620246887,6371.2,6371.199240493775,6371.199240493775,6371.199620246887,6371.2,6371.199620246887,6371.2,6371.199240493775,6371.2,6371.2,6371.199240493775,6371.2,6371.2,6371.200759506225,6371.2,6371.2,6371.2,6371.2,6371.2,6371.199620246887,6371.2,6371.2,6371.200759506225,6371.2,6371.199620246887,6371.2,6371.199620246887,6371.199620246887,6371.199620246887,6371.2,6371.199620246887,6371.199620246887])
        expected['latSH'] = np.array([48.517652038249615,48.525165246336634,48.53232328458681,48.53916030394599,48.49639990464713,48.50390969763955,48.5095480187994,48.51500192485165,48.47052714807111,48.47649331831112,48.482288733821875,48.487216715308044,48.44232871208272,48.44792263701296,48.45331848645727,48.45830452455138,48.411500653263865,48.41536654033409,48.41881578586495,48.422087446477384,48.37538944312201,48.380078367987224,48.38436431169141,48.38848974595009,48.342594289822195,48.347385667524954,48.3516818565129,48.355674102082766,48.30976498557653,48.31448806138759,48.31890036359142,48.322499873284016,48.27616728504923,48.28038151176713,48.2843976629991,48.288202078366794,48.24280181095372,48.24802690566878,48.252961717344114,48.25768479315518,48.21248601632262])
        expected['lonSH'] = np.array([3.5521261090034026,3.5211221728134223,3.489967545574878,3.458780048050954,3.5427674691800157,3.511755422140396,3.4786102216456167,3.445244320663281,3.5271468265481967,3.494132039977882,3.4609479927821982,3.4263814726098216,3.5069271187274316,3.472532847388186,3.438059388543251,3.4035411065818875,3.4810074046008794,3.4435687898825122,3.4061756386108084,3.368535746755337,3.4458618124529328,3.409107497312036,3.372313908583412,3.3353341971999053,3.413228449259081,3.3763868357628555,3.3387919804672244,3.300950171144415,3.37792661653387,3.3403176739730758,3.302593898856861,3.2626253393812386,3.3372528400264443,3.297408931503175,3.2573996043359443,3.217312797210316,3.292921710661888,3.2540583611713387,3.215103444457229,3.1759666739564674,3.251479324429424])
        expected['rhoSH'] = np.array([377304.9994140625,377315.9606079101,377326.75167236326,377336.95943603513,377284.7540161133,377295.9339477539,377304.2216796875,377312.72814941406,377258.0923095703,377266.86612548825,377275.5427246094,377282.6395507812,377226.9586303711,377234.93040771486,377242.73205566406,377249.9260986328,377191.3529785156,377196.60268554685,377201.4635253906,377206.25145263673,377147.7755493164,377154.1432495117,377159.87904052733,377165.37178955076,377107.7222290039,377114.3572753906,377119.5583740234,377124.61364746094,377066.623828125,377072.55405273434,377078.1683227539,377082.00838623045,377022.75474853517,377027.34824218747,377031.45565185545,377035.73319091793,376977.743371582,376983.6006835937,376989.2878662109,376994.8292236328,376936.8394042969])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_90S_180_90000(self):
        """Test for latitude = -90, longitude = 180, rho = 90000"""
        lat = -90
        lon = 180
        rho = 90000

        expected = {}
        expected['latNH'] = np.array([-72.90688287510915,-72.88874189267358,-72.8686747968921,-72.85101192769844,-72.88099645815478,-72.86270521155751,-72.84415441777173,-72.82800785057384,-72.85974090945771,-72.84296596485618,-72.82429222766535,-72.81035864175851,-72.84452324798693,-72.82994762429811,-72.81564520817611,-72.79945765984317,-72.83621773795619,-72.82401902009855,-72.81206618905102,-72.8003865655703,-72.83520686995902,-72.82410098236858,-72.81326830234494,-72.80268150913142,-72.84099887037519,-72.8297700393797,-72.81889637822104,-72.81034498138018,-72.85094362580674,-72.8417501911839,-72.83282996412785,-72.82743411468354,-72.86945343845747,-72.86344287198787,-72.85766453195004,-72.85213207872232,-72.89609117622052,-72.88967079840072,-72.88348264701267,-72.87751306167809,-72.91960068734372])
        expected['lonNH'] = np.array([28.70189947740304,28.64750043575847,28.59360853565978,28.539755909148813,28.673280984780686,28.6187043582177,28.547506466309486,28.476247102698743,28.592215177069097,28.520161803967337,28.448595081843944,28.365041377727177,28.468491422896193,28.384019058336058,28.29983526926836,28.216022017963134,28.294190117919342,28.18469535533487,28.07530475313524,27.96591073584102,28.043073090441947,27.93465408265175,27.826358018266614,27.718176359550075,27.795950016081715,27.68673187615863,27.568439829923175,27.449941170465333,27.517005090378394,27.39750239311256,27.27808507321135,27.139114629263684,27.185146689174985,27.044815330035195,26.904535197314182,26.76435410233613,26.81727440802539,26.684401615459254,26.55180032291263,26.419303190750842,26.47081647747108])
        expected['rhoNH'] = np.array([257214.93735351562,257202.37208251952,257252.87620849608,257240.5539794922,257196.92794189454,257184.0710205078,257235.5230102539,257224.14864501954,257181.61629638672,257169.6829345703,257220.8918823242,257210.87855224608,257169.9259765625,257159.45086669922,257149.097277832,257201.86169433594,257162.5375,257153.52064208983,257144.649609375,257135.87579345703,257159.49947509766,257151.30895996094,257143.19135742186,257135.1952758789,257096.86755371094,257088.43399658203,257144.67391357422,257137.96595458983,257101.07218017578,257093.92674560545,257087.02435302734,257082.57668457032,257111.13411865235,257106.24897460936,257101.4853515625,257096.89185791014,257062.3555908203,257057.17879638672,257052.19643554688,257047.38420410155,257075.89302978516])
        expected['latSH'] = np.array([-68.3394943959866,-68.30527514824485,-68.2709602778547,-68.23645416216777,-68.21161959434562,-68.17697687487532,-68.14398706118416,-68.1107923418179,-68.08737845334309,-68.05406079057175,-68.020483580612,-67.98901006891657,-67.96737202962595,-67.93569361225545,-67.90382394958817,-67.87180402275914,-67.85184621000437,-67.82172507576462,-67.7914126962281,-67.7609363921515,-67.74045948501981,-67.71996891750976,-67.69928710470296,-67.67850966924777,-67.66795019679094,-67.64704981793071,-67.63134038283968,-67.61552166472194,-67.61000287187255,-67.59411585186311,-67.57810588844859,-67.56609841588772,-67.56437720821688,-67.55228777338596,-67.54008905552831,-67.52782203577897,-67.5294066396664,-67.5205956956371,-67.51170278933773,-67.50270060001165,-67.50417592087237])
        expected['lonSH'] = np.array([152.83729890629942,152.81515543301023,152.7929982993427,152.77086848643188,152.80078471499652,152.778627581329,152.78021218521647,152.7817967891039,152.83523618917008,152.83653392511238,152.83813218937817,152.82361120720273,152.86101332309772,152.84641037865222,152.83182109458508,152.81706788597785,152.87289785225354,152.87669543743206,152.8804657018539,152.88393543795226,152.93973808347127,152.92906932798772,152.91850985553089,152.9078001189123,152.94915008414756,152.93846766828565,152.92726615804682,152.91601000629464,152.95696382055806,152.94569400842752,152.93435589440531,152.92036766698513,152.9588216320123,152.94481974421376,152.93064027149683,152.91644713840154,152.94390449886498,152.91863279893593,152.89308789144008,152.86762494621428,152.89482275948927])
        expected['rhoSH'] = np.array([6371.200759506225,6371.2,6371.199240493775,6371.199620246887,6371.199620246887,6371.199620246887,6371.199620246887,6371.2,6371.2,6371.199620246887,6371.199620246887,6371.199620246887,6371.199620246887,6371.2,6371.2,6371.2,6371.199620246887,6371.2,6371.2,6371.199240493775,6371.199240493775,6371.2,6371.2,6371.2,6371.2,6371.199620246887,6371.2,6371.199240493775,6371.199620246887,6371.199620246887,6371.199620246887,6371.2,6371.199620246887,6371.199620246887,6371.2,6371.2,6371.199240493775,6371.199240493775,6371.199620246887,6371.199620246887,6371.199620246887])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_60S_180_90000(self):
        """Test for latitude = -60, longitude = 180, rho = 90000"""
        lat = -60
        lon = 180
        rho = 90000

        expected = {}
        expected['latNH'] = np.array([-78.5693829046165,-78.55538101681799,-78.53867437410813,-78.52513693917317,-78.53396154358083,-78.52006893880903,-78.50680471144085,-78.49661406919921,-78.51004222110745,-78.49923686184047,-78.48847248370853,-78.47933369059908,-78.50050727702612,-78.49075376689132,-78.4840601815047,-78.47742123763146,-78.5012585978348,-78.49918222032713,-78.49425082374637,-78.49235203115711,-78.51658554233231,-78.51561565547019,-78.51179074953495,-78.51105308910459,-78.53725369476078,-78.5359013173051,-78.53826456275794,-78.53782743065105,-78.57102215001731,-78.5699566405068,-78.57192373498776,-78.57988773555999,-78.6164702287546,-78.6237785311665,-78.62825913526203,-78.63573136221402,-78.67161717611327,-78.67738185577275,-78.68325581845897,-78.68626110169376,-78.72550736866467])
        expected['lonNH'] = np.array([54.00218716322131,53.82215703707811,53.631328381857124,53.455184633351664,53.67256564897107,53.49506610791537,53.2771967337703,53.072926266262726,53.2645335630491,53.05753101987352,52.85143689185755,52.62641972474607,52.821230380253176,52.59333428840653,52.378852688089786,52.16491067271748,52.30811241885597,52.05315511751773,51.78709875877822,51.53363726886822,51.674526995972656,51.434462922119636,51.18332711162202,50.94477250957557,51.100176388666284,50.85855844677709,50.612941429128846,50.356457580511105,50.516751875047554,50.25703393185782,50.00948055557988,49.741764460872055,49.867617526518714,49.596001393794815,49.31356282633103,49.04272533517251,49.18204753386244,48.92363074170959,48.665770609974096,48.39729977936299,48.5455080541631])
        expected['rhoNH'] = np.array([265046.1149047851,265002.17291259766,265019.84206542966,264976.8479370117,264957.45318603516,264913.6813232422,264929.9165283203,264885.221105957,264865.6319213867,264819.55115966796,264773.7620483398,264792.47628173826,264714.3625854492,264731.91021728516,264688.673046875,264645.8004394531,264627.83963623043,264582.48800048826,264598.8204223633,264554.3194335937,264535.62950439454,264494.0936279297,264514.41193847655,264472.8517578125,264458.4879760742,264415.9313232422,264376.9230834961,264399.5016845703,264326.589086914,264348.0983032226,264308.9442382812,264272.6094604492,264263.83564453124,264226.60161132814,264250.9544189453,264214.2064697266,264206.84229736327,264170.67764892575,264134.75604248047,264160.66431884764,264091.7376098633])
        expected['latSH'] = np.array([-66.14862925743498,-66.11841250054684,-66.0878542342002,-66.0570364206651,-66.03679173996517,-66.00545483205315,-65.97523807516501,-65.94454320503499,-65.92526841119721,-65.89398614479856,-65.86226674629302,-65.83157187616297,-65.81313036540394,-65.78173881597857,-65.74988281368962,-65.71748039626709,-65.70077375355723,-65.66971005321201,-65.63790869243644,-65.60515110517704,-65.58735163220001,-65.56422461167034,-65.53990913822508,-65.51383147597397,-65.50518445648476,-65.47413441651787,-65.44281116898418,-65.39091539167043,-65.345139463853,49.65650753517379,49.62992785401868,49.619689400452835,49.699841670362936,49.69489319830926,49.683309197476916,49.66435883762472,49.738743012780745,49.71803729431185,49.697867745692804,49.67828559334237,49.75322301382117])
        expected['lonSH'] = np.array([155.9441743748198,155.91697656154483,155.88958750297306,155.8617886330511,155.8617886330511,155.8334570083739,155.8245504416962,155.81505647874988,155.83323844232046,155.82217353586503,155.8099474972507,155.78027715549618,155.77948485355245,155.74768349277687,155.71396967903368,155.6780702047561,155.68985911126356,155.66625397749198,155.6382365415166,155.6048915579886,155.60620295430923,155.5572851394736,155.50023939952567,155.4320604512306,155.41116007237034,155.31481342393815,155.19508020778784,154.99062532517266,154.80366938721107,200.13059422897823,200.28615861751445,200.30585688308076,200.35985635865887,200.32032322374286,200.24577853914133,200.13284819140435,200.1538578532913,200.04600916629678,199.93831074346403,199.83074892441468,199.8507203975478])
        expected['rhoSH'] = np.array([6371.199240493775,6371.2,6371.199620246887,6371.2,6371.2,6371.199240493775,6371.199240493775,6371.199620246887,6371.2,6371.199240493775,6371.2,6371.198860740661,6371.2,6371.199620246887,6371.2,6371.2,6371.199240493775,6371.199620246887,6371.2,6371.199240493775,6371.2,6371.199620246887,6371.2,6371.2,6371.199620246887,6371.199620246887,6371.2,6371.199620246887,6371.2,264232.33740234375,264234.79212646483,264211.0226196289,264170.48321533203,264188.8328857422,264148.94969482423,264190.0480957031,264155.36600341793,264197.77683105465,264239.142578125,264279.29311523435,264243.4201171875])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_30S_180_90000(self):
        """Test for latitude = -30, longitude = 180, rho = 90000"""
        lat = -30
        lon = 180
        rho = 90000

        expected = {}
        expected['latNH'] = np.array([-78.65109928784653,-78.65504713718681,-78.65742404301798,-78.65977362809247,-78.65506079756514,-78.65851687328518,-78.66727317580114,-78.67776434636627,-78.68031883711586,-78.68865166790329,-78.69676593263725,-78.71191529221633,-78.72071257586731,-78.73379921831707,-78.74847046465425,-78.76144782407727,-78.78001227824137,-78.80160933639695,-78.82481831919665,-78.84622413205548,-78.86549892589323,-78.88781998410084,-78.90828323085421,-78.9286918360942,-78.9482125167421,-78.96989153716771,-78.99382452001944,-79.0195743331904,-79.04199101404637,-79.06723539321874,-79.09062196093686,-79.12384400105981,-79.15504430518843,-79.18781555282615,-79.21870166825295,-79.25139095362061,-79.28238635207416,-79.31006227859103,-79.33773820510794,-79.36724462232237,-79.39893670007123])
        expected['lonNH'] = np.array([76.56912535075426,76.3258135219509,76.06205210677251,75.79986163510324,76.06695618259658,75.82148601401549,75.53329984236515,75.26987993664527,75.51071240677992,75.21982831040741,74.92826802530708,74.66202725145999,74.90841949557903,74.6162649840209,74.34603537969852,74.05501467954261,74.26668907211048,73.93547953887821,73.62581925247734,73.29441164375916,73.50517079097824,73.21620597776251,72.90491327615001,72.59389378210432,72.82930308203797,72.53418426838006,72.22285741582171,71.93307981009475,72.15174148618354,71.8564450876072,71.53976336673956,71.2340167787331,71.44270637863369,71.13067601659083,70.79699395487901,70.48418495127078,70.7303517991472,70.40667596456947,70.08343043190945,69.7811467498122,70.02742288071533])
        expected['rhoNH'] = np.array([270931.546875,270861.0646972656,270851.05136718747,270841.54842529295,270787.1799316406,270715.8228027344,270702.115234375,270629.71302490233,270570.87255859375,270556.4115600586,270541.70751953125,270471.3711669922,270417.05128173827,270405.33665771486,270333.95522460935,270323.0912475586,270263.86191406247,270246.70314941404,270170.0234008789,270153.7152832031,270093.926953125,270019.5074951172,270008.4976928711,269998.1441040039,269945.1366455078,269873.65799560543,269866.90142822266,269800.3565307617,269811.17189941404,269743.3388793945,269736.1934448242,269671.32553710934,269682.69990234374,269616.08209228516,269610.61364746094,269545.4540893555,269500.5885375976,269496.7727783203,269492.00915527344,269428.8425415039,269383.53951416013])
        expected['latSH'] = np.array([46.08871041089344,46.07909691963665,46.065610711120456,46.05685099350991,46.12672724381373,46.11711375255694,46.106639657464726,46.10092961931859,46.17421754911283,46.167605925996256,46.15715573656614,46.1522892267825,46.226700722695206,46.22102825058951,46.21144549518398,46.20664045710288,46.28508859481506,46.283206877698724,46.277479764079665,46.276380103623296,46.35951716620069,46.350699391982204,46.34309397634139,46.339313466635794,46.4209205668391,46.412410151133265,46.40490035814084,46.40195313151398,46.483881250608285,46.47583187267142,46.472461174316024,46.46709947581756,46.551008349771166,46.54470067007266,46.54308191523937,46.53748457521454,46.62008205284751,46.61212488246444,46.60878833505489,46.60158590057511,46.68428583104563])
        expected['lonSH'] = np.array([197.80369904291663,197.76755368182893,197.72974175458373,197.69377397841444,197.75879737931297,197.7226656786036,197.67277797690582,197.62469344514895,197.67732688289306,197.6290101247044,197.57910876262827,197.5232104944609,197.56770234671436,197.51158551249353,197.45384309325024,197.3978901835695,197.4259486006799,197.3537671615312,197.27993281660338,197.20773771707633,197.23688896445395,197.16611454427428,197.0957089543098,197.0266694021793,197.05888057430508,196.98805151261206,196.91246863925667,196.83849769054544,196.86503980566013,196.7891700643596,196.71498054959494,196.6268437885451,196.640258280075,196.5517253680533,196.46484536181075,196.3763397705457,196.39416656427943,196.31051040732513,196.2285208165283,196.14496028222234,196.16202209476904])
        expected['rhoSH'] = np.array([269832.31655273435,269860.3635986328,269827.5286254883,269854.09311523434,269791.7771484375,269819.7512817383,269786.4302246094,269812.82458496094,269750.72735595703,269777.34045410156,269742.97431640624,269768.8582885742,269705.3271118164,269732.5235107422,269698.837890625,269724.4302124023,269659.5623046875,269685.4462768555,269650.3267089844,269674.70382080076,269669.4541137695,269637.90726318356,269604.27025146486,269631.4180419922,269627.35924072267,269594.8888305664,269561.98094482423,269588.73986816406,269585.65323486325,269553.4258666992,269580.6708740234,269547.4470336914,269544.79787597654,269513.00798339845,269540.56894531247,269507.29649658204,269505.30355224607,269474.24278564454,269502.6543945312,269470.01385498047,269467.92369384767])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_0N_180_90000(self):
        """Test for latitude = 0, longitude = 180, rho = 90000"""
        lat = 0
        lon = 180
        rho = 90000

        expected = {}
        expected['latNH'] = np.array([-76.24562960557313,-76.25476839868259,-76.26489073903255,-76.27389292835863,-76.27260885279466,-76.28202085347095,-76.29894606223422,-76.3158985917542,-76.32373964892139,-76.34100636714317,-76.35686606639595,-76.37939203027864,-76.39491022007292,-76.41799625946757,-76.43977090254157,-76.46139528145383,-76.48849747208044,-76.52029883285601,-76.55304275973705,-76.58436600727072,-76.61216487719267,-76.64113853965188,-76.6712460135133,-76.69986450613564,-76.72674813070881,-76.75465628365748,-76.78667621048652,-76.8199802128795,-76.8504974980911,-76.88306384005372,-76.91415486115562,-76.95472618482549,-76.99704603692291,-77.03689336054074,-77.07659041999688,-77.11761253615197,-77.15609382193583,-77.19327737177736,-77.2288899781098,-77.26435232028052,-77.3050329269771])
        expected['lonNH'] = np.array([76.55530787806333,76.27676593352103,76.01708214127716,75.74052778178334,75.9729522890497,75.70931381727638,75.40416145572772,75.10104449055173,75.30612775057052,75.01466308811857,74.70444955639493,74.3999528930066,74.61293185170594,74.32186334022583,74.01290656330949,73.70403174866317,73.87689700636702,73.5224238488217,73.18443876793279,72.82810779893322,72.9998529056132,72.66651235335989,72.35044534951754,72.01586170283531,72.21477730203358,71.87455191909692,71.5422154046516,71.22721391031978,71.41617792389735,71.09537076877102,70.75690074445104,70.40765268162077,70.60394548817777,70.24790138712335,69.89102400299019,69.55142699745716,69.74789055874339,69.41969996912428,69.07358013293388,68.72714610804168,68.9407192931988])
        expected['rhoNH'] = np.array([269610.95390625,269585.02132568357,269499.32471923827,269474.43721923826,269425.4642578125,269338.21218261716,269306.3979858398,269275.82330322266,269219.87503662106,269126.35247802734,269093.20155029296,269064.7899414062,269013.43516845704,268923.0235473633,268893.42103271483,268864.2073852539,268803.22814941406,268763.3692626953,268663.38178710936,268624.1791137695,268560.5021118164,268526.6220581055,268433.3182373047,268401.9658203125,268348.3264526367,268315.36995849607,268287.6145629883,268199.7305786133,268210.71607666014,268121.3495361328,268090.8477661133,268063.5784545898,268014.7999267578,267986.1938842773,267958.3169677734,267868.80460205075,267884.06763916014,267798.5897705078,267774.4557006836,267749.4709838867,267703.9978271484])
        expected['latSH'] = np.array([47.512449683004256,47.51116902253488,47.506234210859546,47.50566389006385,47.57343985719788,47.57219676276895,47.57017502677462,47.57256559298413,47.64348686223095,47.64521490009096,47.643340013163794,47.64173150361426,47.717003603362386,47.71880335820868,47.71680552787645,47.71528581078613,47.794802873103414,47.79670508078726,47.80283176047276,47.80540674178986,47.88531653998442,47.88385487950204,47.88740657787044,47.88682259669641,47.963436828616445,47.96211177191746,47.961066752974446,47.96385347015581,48.036468626316804,48.03852451325698,48.03701162635582,48.04080579643976,48.11448987720586,48.11755321704861,48.11688727360453,48.11658333018647,48.1927433545267,48.1900317694262,48.19164027897574,48.189598052413906,48.26581613336208])
        expected['lonSH'] = np.array([195.26210369048485,195.2367363679074,195.20923802630895,195.18393900562322,195.24166776448817,195.2162867815324,195.17851583542222,195.14291688946813,195.19022277965962,195.15448722992213,195.11667530267692,195.0723337145852,195.11504971765447,195.0727025448004,195.02819703216858,194.98371884029348,195.01251491783424,194.95428072497072,194.89812290961487,194.83977943372463,194.86809739802348,194.8116253939658,194.75744833346928,194.7010036501683,194.73081059570623,194.67413368597346,194.61289420987512,194.55345790371769,194.57606582987043,194.51645193879455,194.45477533058934,194.38441072175988,194.39566687351206,194.3250017363591,194.25223290094178,194.17945040514613,194.19649855731447,194.12784149577752,194.06117884947818,193.99252178794123,194.0089279023276])
        expected['rhoSH'] = np.array([268377.78314208984,268388.3068603515,268337.7784301758,268347.2570678711,268296.38837890624,268306.8391845703,268255.84897460934,268264.93874511716,268213.4867553711,268223.7188232422,268173.3119140625,268124.8493408203,268136.97713623045,268150.61179199215,268101.93048095703,268052.5200439453,268062.1202026367,268012.56394042965,268023.1848754883,267972.6078369141,267981.7705200195,267936.29736328125,267949.78619384766,267902.7575683594,267916.0276611328,267870.11702880857,267825.27578125,267841.21933593747,267795.5760498047,267812.5889892578,267768.282434082,267786.170324707,267742.66580810543,267761.47725830076,267719.2608642578,267676.3639526367,267694.2518432617,267653.4450927734,267672.5968017578,267630.52623291017,267648.26829833986])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_30N_180_90000(self):
        """Test for latitude = 30, longitude = 180, rho = 90000"""
        lat = 30
        lon = 180
        rho = 90000

        expected = {}
        expected['latNH'] = np.array([75.04992655787247,75.05221979388631,75.05463938839978,75.05683017157607,75.05844551131477,75.06077972846363,75.06304393617349,75.06543620993028,75.06708228552026,75.0694848045608,75.07175925755442,75.07003975743086,75.06790532331524,75.06613288922563,75.06428532305513,75.06233701159438,75.06182474740663,75.06152421908315,75.06122369075968,75.06094023790912,75.05984057745275,75.05782908674217,75.0556605016807,75.05310430338382,75.05021342581762,75.0475513595886,75.04630655761237,75.04482099146789,75.0429973309595,75.04097730251246,75.03893678349792,75.04470658579929,75.04977970880532,75.05486819973697,75.05983545481087,75.06424946456198,75.06833562523295,75.07238421986348,75.07617155975825,75.07964129585662,75.08280538098963])
        expected['lonNH'] = np.array([206.09410069520806,206.06440303269684,206.03507420040083,206.00547216053798,205.98311012119535,205.95367200587262,205.90617487038435,205.85904656511124,205.81884407165654,205.77167478524845,205.72434157430027,205.6208505479962,205.52485906940086,205.42147732612355,205.31830048852134,205.21517829243248,205.07865647130228,204.93463510246337,204.79069569589453,204.64708413840586,204.5098383172236,204.34282653163845,204.17585572718832,204.00866635668476,203.84826619421617,203.68104950295591,203.48645741350225,203.29196094669697,203.10403512187324,202.90918348523113,202.7146460372908,202.47702375606607,202.24554864509435,202.0077897600862,201.77046800718495,201.53317357504037,201.3184870690485,201.0980085626405,200.8779808487177,200.65813071971334,200.4444004402053])
        expected['rhoNH'] = np.array([6371.2,6371.2,6371.199620246887,6371.198860740661,6371.199620246887,6371.198860740661,6371.198101234436,6371.199240493775,6371.199240493775,6371.198860740661,6371.198101234436,6371.198101234436,6371.199620246887,6371.199240493775,6371.199240493775,6371.198860740661,6371.198860740661,6371.1984809875485,6371.198860740661,6371.199620246887,6371.199240493775,6371.199620246887,6371.2,6371.198860740661,6371.198860740661,6371.1984809875485,6371.198860740661,6371.198860740661,6371.2,6371.198860740661,6371.199240493775,6371.200759506225,6371.199620246887,6371.198860740661,6371.2,6371.199240493775,6371.198860740661,6371.198860740661,6371.199240493775,6371.198860740661,6371.198860740661])
        expected['latSH'] = np.array([53.568259325677644,53.570684042832994,53.570745514535524,53.57381226947286,53.63694370797129,53.63939233078874,53.64234638760477,53.648312557844775,53.71453124184805,53.71723258166479,53.72293237452717,53.728584356065355,53.79475864383902,53.797149210048524,53.80253481420908,53.80555034272764,53.876280366677705,53.885822140948214,53.89298017919839,53.902904444062415,53.97399305294391,53.977794053217025,53.98436469519857,53.99100022397724,54.05912794585353,54.062587436668146,54.06779887100487,54.07077683348299,54.137528272241525,54.14249040467354,54.14513710297692,54.15116816001404,54.21857871202748,54.22134152354675,54.22696276923367,54.23030273173781,54.29608086853962,54.2995232838813,54.300657095283526,54.30472788802885,54.37048553426315])
        expected['lonSH'] = np.array([194.85645875567778,194.83835875437725,194.81766328119213,194.79960426102662,194.8619912089055,194.84385022646995,194.81363346958182,194.78593022230822,194.83876856572746,194.80838788429924,194.7806026747556,194.74627414398714,194.79248720391146,194.7554402578533,194.72093414216639,194.6838325545949,194.7175190475814,194.67047270457834,194.6208308896907,194.57348401836416,194.60676070000045,194.55793850781322,194.51145224032211,194.46480204829092,194.49880272997925,194.44947510379342,194.3971558547511,194.34232309609425,194.3702858905563,194.3176661131905,194.2625464865885,194.19910768957743,194.21580067190894,194.14958881809483,194.0856582474635,194.019309789866,194.03929492337747,193.9788614096012,193.91605098999375,193.85553551394744,193.87486494929857])
        expected['rhoSH'] = np.array([260993.70563964843,260997.98317871094,260939.79892578124,260943.5174682617,260936.7609008789,260940.98983154297,260883.2430541992,260887.30185546874,260880.59389648438,260822.9443359375,260827.24617919922,260833.4680541992,260828.60721435546,260773.1693359375,260779.22108154296,260722.71381835936,260716.9537231445,260722.81103515625,260666.2551635742,260671.65069580078,260665.50173339844,260611.47349853514,260619.5911010742,260627.53857421875,260623.6012939453,260569.79179687498,260580.38842773438,260528.353137207,260526.8948852539,260537.61303710938,260485.6749633789,260498.240234375,260499.0422729492,260449.92348632813,260463.04775390626,260413.6373168945,260415.09556884764,260428.85174560547,260380.024609375,260393.1488769531,260394.48560791014])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_60N_180_90000(self):
        """Test for latitude = 60, longitude = 180, rho = 90000"""
        lat = 60
        lon = 180
        rho = 90000

        expected = {}
        expected['latNH'] = np.array([76.10408173267297,76.10684625173953,76.10956893589741,76.11215074740369,76.10046087863921,76.10298548731117,76.10633142623084,76.10975078968407,76.09850829831024,76.10164420891292,76.10484756763366,76.10637155359221,76.09324819887567,76.09456130274361,76.09589916604729,76.09703383122316,76.0858519577782,76.08901177404297,76.09209218935865,76.09507698202594,76.08356896704812,76.08575633512982,76.08803420321802,76.09005081657047,76.07747216944024,76.07931632051614,76.08326331608276,76.08703955692013,76.07644422597015,76.07991652338946,76.08307890097517,76.09522639241405,76.09318501962585,76.10495599688673,76.11606786089268,76.12701836167952,76.12404893693785,76.13462206977303,76.14491943372047,76.1547847882029,76.15079510395397])
        expected['lonNH'] = np.array([210.36652062483444,210.3209496026921,210.27531027865808,210.22945238857062,210.2361323135789,210.1903290650048,210.12488219237773,210.05950362164236,210.0464033188143,209.98090180467386,209.91548225280349,209.78536714911473,209.70799476619683,209.57818019083157,209.44837927584464,209.31830515329094,209.2029022770744,209.03399169889997,208.8650264792122,208.6957470708226,208.58053543990283,208.38976825638437,208.19913767664931,208.00805630442903,207.87152082292047,207.68046677145688,207.46216026520494,207.24355323062952,207.0804483132496,206.8618139579175,206.64300201766696,206.376324111713,206.1658586626282,205.89930370007932,205.63206571861338,205.36486871828248,205.1691428174266,204.91654876154118,204.66400934716913,204.41118306485194,204.21634508858816])
        expected['rhoNH'] = np.array([6371.198860740661,6371.199240493775,6371.199240493775,6371.198860740661,6371.2,6371.198860740661,6371.1984809875485,6371.199620246887,6371.2,6371.198860740661,6371.198860740661,6371.199240493775,6371.199240493775,6371.198860740661,6371.199240493775,6371.199240493775,6371.1984809875485,6371.198860740661,6371.199620246887,6371.2,6371.199620246887,6371.199620246887,6371.2,6371.199620246887,6371.199240493775,6371.2,6371.199620246887,6371.199620246887,6371.198860740661,6371.199240493775,6371.199620246887,6371.2,6371.199240493775,6371.199240493775,6371.199240493775,6371.198860740661,6371.198860740661,6371.198860740661,6371.199620246887,6371.2,6371.199240493775])
        expected['latSH'] = np.array([63.607727282889485,63.61192272658717,63.616282094824925,63.620808802697354,63.65649141846879,63.66083200368633,63.66785173060581,63.67501318395057,63.71338347916041,63.72023586644522,63.72724705562824,63.734806367492155,63.77318007779658,63.7802356632092,63.78758836185072,63.79532184353847,63.837266035231515,63.848252394511476,63.85968954627667,63.87123427352128,63.913164804835986,63.92195184320321,63.931257975947354,63.940465070948534,63.98023555493822,63.98908064991339,63.997493735423554,64.00612880208175,64.04487646524322,64.05300268280824,64.06148919285198,64.07065530671815,64.10971545103416,64.11848541392845,64.12745174476139,64.13662639636401,64.17392947451603,64.18095773917197,64.18836678687414,64.19577071193444,64.2331113561269])
        expected['lonSH'] = np.array([198.03858924847336,198.0241638889463,198.00841347272026,197.99345535843793,198.082042911973,198.06836887325463,198.04289226765047,198.0161725676174,198.0964136299867,198.06992615638538,198.0424141544086,198.0096975482842,198.08152381759606,198.04652592828893,198.01251158622227,197.98051898014992,198.0367587577758,197.98810049012863,197.942597769878,197.8952508985515,197.9508486383954,197.901056559346,197.8549527824484,197.8046416090221,197.8622201037253,197.811266892517,197.75494515262108,197.69892394104863,197.74625715199682,197.68776341194484,197.63107284183374,197.56074921413926,197.59301502777842,197.5220220415453,197.45093343266382,197.379831163404,197.41504761876456,197.34658180252435,197.28013772227848,197.21143967960649,197.2473528142624])
        expected['rhoSH'] = np.array([255085.30620117186,255090.84755859376,255070.23759765623,255053.5892211914,255058.86323242186,255079.5218017578,255075.90047607422,255042.43359375,255096.65626220702,255076.07060546873,255029.69819335936,255039.17683105468,255077.4559448242,255042.26346435546,255029.26071777343,255063.86989746094,255052.44692382813,255018.15369873046,255060.1999633789,255061.58530273437,255048.87420654297,255006.00159912108,255055.36342773438,255001.89418945313,255056.48142089843,254999.43946533202,255002.6719238281,255017.44887695313,255027.60803222656,254991.92946777344,255004.2030883789,255006.02590332032,254991.61351318358,254995.42927246093,254998.97768554688,255004.17878417968,254991.15173339844,254979.1697631836,255021.50767822264,255005.90438232422,255033.8542114258])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_90N_180_90000(self):
        """Test for latitude = 90, longitude = 180, rho = 90000"""
        lat = 90
        lon = 180
        rho = 90000

        expected = {}
        expected['latNH'] = np.array([82.34980649276585,82.35883258775402,82.36779123462414,82.37671829186934,82.3705207489712,82.37948793357778,82.3916328636957,82.40375218060426,82.4006760341568,82.41277400672419,82.42483270570385,82.44572881569586,82.45134237741996,82.47210871381773,82.49274869171587,82.51323328281039,82.52234731648412,82.54664912955103,82.57078872562515,82.5948292839563,82.60333969966213,82.62841930052078,82.65333070797111,82.6780534314456,82.68715295096736,82.71162466498987,82.73989311041726,82.76792506054464,82.78009987274018,82.80777665303073,82.83521352292667,82.87523373570788,82.89924099686684,82.93864563884911,82.97768273127667,83.01635825056505,83.03864558471362,83.0763614624236,83.11364874576317,83.15056378379298,83.17138348104365])
        expected['lonNH'] = np.array([239.34851591481595,239.28043258916927,239.21185748990234,239.14295454155524,239.06115619605518,238.99288162511172,238.89602954268094,238.79876764889997,238.68896552780285,238.59211344537206,238.49471494780767,238.287869498983,238.0690302379758,237.8613924872074,237.65249798163174,237.44212815519535,237.18687032553365,236.94062834557633,236.6923919503814,236.44207917767875,236.18225878165148,235.91757529093513,235.65048757363095,235.38099562973895,235.10336210035626,234.83108343928288,234.52913443645494,234.2242347919056,233.91245031667285,233.6039443322417,233.29270627214257,232.91871243394934,232.5390358783667,232.15840309630022,231.77345363467828,231.3842421350143,231.00396452278466,230.62024449521334,230.2324536748967,229.84072866561812,229.44985059979663])
        expected['rhoNH'] = np.array([6371.2,6371.199620246887,6371.2,6371.2,6371.200759506225,6371.199240493775,6371.1984809875485,6371.199620246887,6371.199620246887,6371.2,6371.199240493775,6371.199240493775,6371.199620246887,6371.2,6371.199620246887,6371.2,6371.199240493775,6371.2,6371.2,6371.199240493775,6371.2,6371.2,6371.200759506225,6371.2,6371.2,6371.2,6371.2,6371.2,6371.199620246887,6371.2,6371.2,6371.200759506225,6371.2,6371.199620246887,6371.2,6371.199620246887,6371.199620246887,6371.199620246887,6371.2,6371.199620246887,6371.199620246887])
        expected['latSH'] = np.array([48.517652038249615,48.525165246336634,48.53232328458681,48.53916030394599,48.49639990464713,48.50390969763955,48.5095480187994,48.51500192485165,48.47052714807111,48.47649331831112,48.482288733821875,48.487216715308044,48.44232871208272,48.44792263701296,48.45331848645727,48.45830452455138,48.411500653263865,48.41536654033409,48.41881578586495,48.422087446477384,48.37538944312201,48.380078367987224,48.38436431169141,48.38848974595009,48.342594289822195,48.347385667524954,48.3516818565129,48.355674102082766,48.30976498557653,48.31448806138759,48.31890036359142,48.322499873284016,48.27616728504923,48.28038151176713,48.2843976629991,48.288202078366794,48.24280181095372,48.24802690566878,48.252961717344114,48.25768479315518,48.21248601632262])
        expected['lonSH'] = np.array([3.5521261090034026,3.5211221728134223,3.489967545574878,3.458780048050954,3.5427674691800157,3.511755422140396,3.4786102216456167,3.445244320663281,3.5271468265481967,3.494132039977882,3.4609479927821982,3.4263814726098216,3.5069271187274316,3.472532847388186,3.438059388543251,3.4035411065818875,3.4810074046008794,3.4435687898825122,3.4061756386108084,3.368535746755337,3.4458618124529328,3.409107497312036,3.372313908583412,3.3353341971999053,3.413228449259081,3.3763868357628555,3.3387919804672244,3.300950171144415,3.37792661653387,3.3403176739730758,3.302593898856861,3.2626253393812386,3.3372528400264443,3.297408931503175,3.2573996043359443,3.217312797210316,3.292921710661888,3.2540583611713387,3.215103444457229,3.1759666739564674,3.251479324429424])
        expected['rhoSH'] = np.array([377304.9994140625,377315.9606079101,377326.75167236326,377336.95943603513,377284.7540161133,377295.9339477539,377304.2216796875,377312.72814941406,377258.0923095703,377266.86612548825,377275.5427246094,377282.6395507812,377226.9586303711,377234.93040771486,377242.73205566406,377249.9260986328,377191.3529785156,377196.60268554685,377201.4635253906,377206.25145263673,377147.7755493164,377154.1432495117,377159.87904052733,377165.37178955076,377107.7222290039,377114.3572753906,377119.5583740234,377124.61364746094,377066.623828125,377072.55405273434,377078.1683227539,377082.00838623045,377022.75474853517,377027.34824218747,377031.45565185545,377035.73319091793,376977.743371582,376983.6006835937,376989.2878662109,376994.8292236328,376936.8394042969])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_90S_270_90000(self):
        """Test for latitude = -90, longitude = 270, rho = 90000"""
        lat = -90
        lon = 270
        rho = 90000

        expected = {}
        expected['latNH'] = np.array([-72.90688287510915,-72.88874189267358,-72.8686747968921,-72.85101192769844,-72.88099645815478,-72.86271887193584,-72.84415441777173,-72.82800785057384,-72.85974090945771,-72.84296596485618,-72.82429222766535,-72.81035864175851,-72.84452324798693,-72.82994762429811,-72.81564520817611,-72.79945765984317,-72.83621773795619,-72.82401902009855,-72.81206618905102,-72.80037290519198,-72.83520686995902,-72.82410098236858,-72.81326830234494,-72.80268150913142,-72.84099887037519,-72.82978369975805,-72.81889637822104,-72.81034498138018,-72.85094362580674,-72.8417501911839,-72.83282996412785,-72.82743411468354,-72.86945343845747,-72.86344287198787,-72.85766453195004,-72.85213207872232,-72.89609117622052,-72.88967079840072,-72.88348264701267,-72.87751306167809,-72.91960068734372])
        expected['lonNH'] = np.array([28.701909722686793,28.64750726594764,28.593613658301656,28.539769569527152,28.67329123006444,28.618718018596038,28.547515004045948,28.47625222534062,28.59222542235285,28.5201703417038,28.44859849693853,28.36504991546364,28.46849654553807,28.38402759607252,28.299840391910237,28.216035678341473,28.29420207075039,28.18470218552404,28.07530646068253,27.965915858482898,28.043086750820287,27.934664327935504,27.826364848455782,27.718183189739243,27.795961968912763,27.68674041389509,27.568446660112347,27.44994629310721,27.51700850547298,27.39750410065985,27.27809190340052,27.13911804435827,27.185151811816862,27.04481874512978,26.90454885769252,26.764360932525303,26.817284653309148,26.684408445648426,26.551807153101798,26.419308313392722,26.47082501520754])
        expected['rhoNH'] = np.array([257214.93735351562,257202.37208251952,257252.87620849608,257240.5539794922,257196.92794189454,257184.0710205078,257235.5230102539,257224.14864501954,257181.61629638672,257169.6829345703,257220.8918823242,257210.87855224608,257169.9259765625,257159.45086669922,257149.097277832,257201.91030273438,257162.5375,257153.52064208983,257144.649609375,257135.90009765624,257159.49947509766,257151.30895996094,257143.19135742186,257135.24388427733,257096.86755371094,257088.45830078123,257144.67391357422,257137.96595458983,257101.07218017578,257093.92674560545,257087.02435302734,257082.60098876953,257111.15842285156,257106.24897460936,257101.4853515625,257096.8432495117,257062.33128662108,257057.17879638672,257052.19643554688,257047.38420410155,257075.91733398437])
        expected['latSH'] = np.array([-68.3394943959866,-68.30527514824485,-68.2709602778547,-68.23645416216777,-68.2116469151023,-68.17697687487532,-68.14398706118416,-68.11077868143954,-68.08737845334309,-68.05406079057175,-68.02046992023364,-67.98901006891657,-67.96737202962595,-67.93565263112043,-67.90382394958817,-67.87180402275914,-67.85184621000437,-67.82172507576462,-67.7914126962281,-67.7609363921515,-67.74045948501981,-67.71996891750976,-67.69928710470296,-67.67850966924777,-67.66795019679094,-67.64704981793071,-67.63134038283968,-67.61556264585695,-67.61003019262924,-67.59412951224144,-67.57810588844859,-67.56609841588772,-67.56437720821688,-67.55228777338596,-67.54010271590664,-67.52782203577897,-67.5294066396664,-67.5205956956371,-67.51167546858105,-67.50270060001165,-67.50416226049404])
        expected['lonSH'] = np.array([152.83723060440772,152.8151690933886,152.79298463896438,152.7708821468102,152.80068909234816,152.778627581329,152.7802258455948,152.7817967891039,152.83522252879175,152.83653392511238,152.83811852899981,152.82361120720273,152.86101332309772,152.84649234092225,152.83184841534177,152.81706788597785,152.87289785225354,152.87669543743206,152.88045204147556,152.88393543795226,152.93972442309294,152.92906932798772,152.91849619515253,152.90778645853396,152.9491637445259,152.93848132866398,152.92726615804682,152.91583242137622,152.9569091790447,152.94559838577914,152.93435589440531,152.92029936509343,152.9588216320123,152.94481974421376,152.93061295074014,152.91644713840154,152.9439181592433,152.9186464593143,152.89315619333178,152.86762494621428,152.8948364198676])
        expected['rhoSH'] = np.array([6371.2,6371.2,6371.199240493775,6371.2,6371.2,6371.199620246887,6371.199240493775,6371.199620246887,6371.2,6371.2,6371.199620246887,6371.199240493775,6371.199620246887,6371.2,6371.199620246887,6371.2,6371.199620246887,6371.199240493775,6371.2,6371.2,6371.199240493775,6371.2,6371.199620246887,6371.2,6371.2,6371.199620246887,6371.2,6371.199620246887,6371.199240493775,6371.2,6371.199620246887,6371.199620246887,6371.2,6371.199620246887,6371.199620246887,6371.2,6371.2,6371.199240493775,6371.2,6371.199620246887,6371.2])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_60S_270_90000(self):
        """Test for latitude = -60, longitude = 270, rho = 90000"""
        lat = -60
        lon = 270
        rho = 90000

        expected = {}
        expected['latNH'] = np.array([-73.33314132083129,-73.31269173445628,-73.29229678959462,-73.27191550511131,-73.32659799960643,-73.30509656409922,-73.28289844929668,-73.26075497600749,-73.31237754575446,-73.28907294030637,-73.26583663674998,-73.24261399357195,-73.29441414823734,-73.27012599554877,-73.24601542777862,-73.22204146379187,-73.27031724084551,-73.24529142772658,-73.2190771616921,-73.19298583906263,-73.24056493682096,-73.21537519916194,-73.18905165010071,-73.16296032747127,-73.2118508215502,-73.184885234707,-73.15842508186236,-73.13363149517522,-73.18246734774081,-73.15547444014092,-73.12875474010784,-73.10401579493404,-73.15291994939133,-73.12741602303052,-73.10080560602415,-73.07591639668863,-73.12595436254813,-73.10017722862051,-73.07610764198537,-73.05231126291704,-73.10081926640248])
        expected['lonNH'] = np.array([354.43362441040574,354.6137501591973,354.79223666258804,354.9692751658748,355.22065344808794,355.3964625173241,355.5655506804169,355.7325078244887,355.9888858051743,356.15428566611536,356.3176911118187,356.4490219891797,356.66111302328693,356.7907773344905,356.9185291927264,357.0453521452352,357.2571699717756,357.3612347339699,357.4744246288954,357.5852649387464,357.7932851801083,357.8625159775355,357.941035832234,358.01805304531507,358.1835621892828,358.2590221192331,358.30483902818554,358.33855284192873,358.47313488933463,358.5162197226191,358.55788387655616,358.5541682536477,358.65197656256225,358.6468402603064,358.65066516624165,358.6432339204247,358.73571468178665,358.73503166286963,358.7233110582539,358.7105522648843,358.8106828381167])
        expected['rhoNH'] = np.array([256521.2955078125,256522.3405883789,256523.2641479492,256524.21201171874,256469.4546508789,256468.6769165039,256468.89565429688,256469.13869628907,256475.33626708985,256473.95092773438,256472.37115478516,256480.65888671874,256433.4115234375,256440.45974121094,256447.1677001953,256453.65692138672,256467.80196533204,256412.72864990233,256419.2664794922,256425.5126586914,256437.7133666992,256392.1916015625,256408.2566772461,256424.27314453124,256384.51147460938,256399.31273193358,256424.68631591796,256388.1814086914,256357.63103027342,256382.12966308594,256406.4338623047,256381.0359741211,256361.78704833984,256335.51420898436,256371.41151123046,256345.3817138672,256328.32016601562,256366.50206298826,256342.78116455078,256319.1088745117,256363.51264648436])
        expected['latSH'] = np.array([-68.30381348776245,-68.2656737114371,-68.22747929359838,-68.18917559273297,-68.15971015665352,-68.12135181427473,-68.08385407573135,-68.04623339378293,-68.01717776905369,-67.9791199549984,-67.94077527299794,-67.90462991191023,-67.87684470236661,-67.84011194501028,-67.80309231970881,-67.76569020381382,-67.73674386211133,-67.69904121789284,-67.66090144156749,-67.6222015897302,-67.59086468181818,-67.56272430243772,-67.53388724376194,-67.50408029822401,-67.48010633423726,-67.44607833179225,-67.41437259366504,-67.37444330777714,-67.31533485069986,40.303598240500584,43.36239600745324,49.5139888079523,49.61990455141169,49.66184874310474,49.709072671026206,49.757638731119584,49.86247530469011,49.906601741822975,49.95197810357396,49.99859072956471,50.107245378881274])
        expected['lonSH'] = np.array([159.84434899468047,159.78280899025867,159.72193834437553,159.6615867928693,159.66665479323345,159.60728678896768,159.5711550882583,159.535105349819,159.56355991790127,159.52848006632408,159.49409689404223,159.44582111698858,159.46113440110776,159.41406073734802,159.36783401704537,159.32286405155,159.36045741274177,159.33823197718255,159.31839710783282,159.30196367268977,159.34991160066326,159.3325902409281,159.31984510793686,159.31281001309176,159.37209605508747,159.3817676029522,159.40029107598127,159.43034390832932,159.5243956132004,205.79589463604532,224.34003581754834,223.30464744126613,223.49329726614187,223.5007831534722,223.50484028583918,223.50815975777581,223.69246558233945,223.69376331828175,223.69444633719874,223.69463758249552,223.87390272745165])
        expected['rhoSH'] = np.array([6371.199620246887,6371.2,6371.2,6371.199620246887,6371.199240493775,6371.2,6371.199240493775,6371.2,6371.2,6371.199620246887,6371.199240493775,6371.198860740661,6371.199620246887,6371.199620246887,6371.2,6371.199240493775,6371.199620246887,6371.199620246887,6371.2,6371.2,6371.199620246887,6371.199620246887,6371.199620246887,6371.2,6371.2,6371.199620246887,6371.199620246887,6371.2,6371.199240493775,171311.13760986328,190872.5910888672,257498.30001220704,257465.9754272461,257380.1816040039,257350.40895996094,257315.31369628906,257278.22548828126,257250.98048095702,257219.2148925781,257183.00163574217,257128.1956665039])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_30S_270_90000(self):
        """Test for latitude = -30, longitude = 270, rho = 90000"""
        lat = -30
        lon = 270
        rho = 90000

        expected = {}
        expected['latNH'] = np.array([-68.01682259921685,-68.14460177820945,-68.26351537165937,-68.37592662501945,-68.57065531825651,-68.66775328749742,-68.7654249926286,-68.85634847085981,-69.03068221923522,-69.10902448901524,-69.1827905320514,-69.24575121582058,-69.39357016983797,-69.44770624919951,-69.49871410192117,-69.54659372800296,-69.68213200189268,-69.7251758540421,-69.76510513993,-69.80197450106974,-69.922950811649,-69.94296326591714,-69.96119987100107,-69.9780021363593,-70.07933482288561,-70.09162916339162,-70.09791293742805,-70.10303557930555,-70.19290720840456,-70.19468305758878,-70.19606275580114,-70.19464207645376,-70.27817529000302,-70.27398155385262,-70.26976049694557,-70.26517060982331,-70.34466035138391,-70.33800774713234,-70.33110925607062,-70.32392389706376,-70.40084548749644])
        expected['lonNH'] = np.array([339.9638140122203,340.54681163901597,341.10625877355335,341.66739979500494,342.2426656476601,342.77610342183806,343.3289662540156,343.8593167826887,344.42540286109937,344.94059036981514,345.45861923722555,345.90304598613994,346.40632164494315,346.8398200911855,347.2781269906036,347.70974030463503,348.21962758655485,348.6627429391486,349.0982358006286,349.5258602841848,350.0052576016496,350.34805113571423,350.6967459532217,351.0289936752078,351.432876421209,351.75859448234854,352.0215840861507,352.2912672753395,352.6280229221778,352.8927883751642,353.1434016761903,353.3600825974198,353.63859039101624,353.85092731193356,354.049767779051,354.2455756421769,354.50875649127585,354.6821066924108,354.85305266695786,355.0215944149171,355.2709782818926])
        expected['rhoNH'] = np.array([255098.74642333985,255126.59903564453,255100.69075927735,255140.7926879883,255160.84365234376,255148.64294433594,255189.1580444336,255172.67979736326,255194.31053466795,255182.52299804686,255234.33955078124,255192.85228271483,255248.99498291014,255209.6707885742,255232.37091064453,255255.97028808593,255293.78762207032,255296.3638671875,255299.59632568358,255303.60651855468,255281.39248046876,255272.61866455077,255325.18864746092,255316.5849609375,255342.85780029296,255332.65003662108,255296.04791259766,255320.95971679688,255319.30703125,255342.42032470703,255303.3634765625,255351.99617919922,255312.50185546876,255359.21452636717,255343.5626220703,255327.3517211914,255367.9154296875,255370.95345458985,255373.14083251954,255374.84212646485,255350.24627685547])
        expected['latSH'] = np.array([44.16333131028562,44.34355609682016,44.534032997298894,44.724673822317705,44.97042061356018,45.17332845832833,45.40717022984747,45.649525832167036,45.93458036208293,46.18143364397095,46.43085507698689,46.66339228237456,46.94103264194641,47.180966942205195,47.4183706573765,47.6618805616658,47.98810064170936,48.276785417169116,48.56095202249291,48.849162099805355,49.17407761371745,49.422962876883545,49.666667441564186,49.913312402682514,50.194162951164266,50.43616338364699,50.65747175803916,50.87736286817855,51.125694886021876,51.34473222251501,51.55847274730681,51.76951876247103,52.01134502512991,52.21788653053652,52.42680494177428,52.630761220580034,52.849986387275344,53.035613853443365,53.2201689799117,53.40376446480164,53.61591697061141])
        expected['lonSH'] = np.array([232.46772870343173,232.5826671267847,232.6908846439944,232.79929340650085,233.06124482154917,233.15659426236255,233.2444578158456,233.32445299140477,233.5619250084678,233.63017225865454,233.69374765944903,233.76232275871595,233.98353892555434,234.03790723134765,234.09167448049396,234.137354785663,234.31862800623517,234.33264355441202,234.34537502702491,234.34821638571967,234.50063888723767,234.47268975315396,234.44493186436702,234.4089777485761,234.5238888511724,234.4783724705434,234.4128026545113,234.34400898919094,234.43200914645737,234.35133095198117,234.2721553991224,234.18442844942274,234.25005290696822,234.15519523977508,234.05320685508846,233.95310360261274,234.014821191953,233.91529167536757,233.8136038190044,233.70951173605343,233.76191294736577])
        expected['rhoSH'] = np.array([257315.96990966797,257171.6029663086,257071.1780151367,256897.91337890623,256805.21716308594,256663.32924804688,256537.23906249998,256456.33038330078,256335.92738037108,256231.3464111328,256115.26955566407,256017.5909790039,255941.12996826172,255879.59173583984,255751.4843017578,255673.0546508789,255608.52700195313,255564.39057617186,255449.4560180664,255385.4387573242,255345.40974121093,255318.89385986328,255227.24272460936,255189.9600830078,255181.69665527344,255136.36932373047,255114.93302001953,255090.06982421875,255038.52061767576,255069.31403808593,255036.81932373045,255001.89418945313,255003.546875,254964.66015625,254983.15565185546,254938.19288330077,254966.19132080078,254950.70954589843,254932.6515258789,254911.67700195312,254934.4500366211])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_0N_270_90000(self):
        """Test for latitude = 0, longitude = 270, rho = 90000"""
        lat = 0
        lon = 270
        rho = 90000

        expected = {}
        expected['latNH'] = np.array([63.28579143900281,63.2998001569905,63.31382082780925,63.32796102693847,63.38323091770221,63.39707229605524,63.419237967459225,63.44141729924155,63.50460679434792,63.52641900346236,63.548466854103154,63.575837129654694,63.64458127610358,63.67175176862189,63.69929962909184,63.726526470670805,63.80103871187377,63.83467739353608,63.86843048086699,63.90208111536035,63.97639698862467,64.01019617973247,64.04364190855074,64.07737962795602,64.15172623707161,64.18547932440252,64.22626067638937,64.267274254808,64.34901112860555,64.38999226362563,64.43089143637566,64.4889429216789,64.58758792876681,64.64548573481372,64.70399313524403,64.76226830924259,64.86146997674786,64.92077480176378,64.97975519279413,65.03908904611404,65.13842390230812])
        expected['lonNH'] = np.array([263.1538288705747,263.1403870582882,263.1267813214615,263.11317558463486,262.9121767777397,262.89857104091305,262.87390039763096,262.8492570751055,262.63495305970724,262.6103370579385,262.5856390938997,262.5361065620388,262.2943725069337,262.24473069204606,262.19484299034826,262.144654760327,261.9046692336495,261.85934409831725,261.81371843466155,261.7678195634391,261.52384520628624,261.4834924486698,261.44232006835296,261.40128429181954,261.15843008569055,261.1168478940235,261.0753476646265,261.0334922653927,260.7862394174382,260.74405616912424,260.70157239248675,260.65515442688735,260.3990769745252,260.35203063152215,260.3043832318721,260.25640798314197,259.99158788864224,259.94011558305704,259.88804222082484,259.8357502925392,259.5647557070298])
        expected['rhoNH'] = np.array([6371.2,6371.199240493775,6371.198860740661,6371.2,6371.2,6371.199620246887,6371.198860740661,6371.2,6371.2,6371.199240493775,6371.2,6371.198860740661,6371.199620246887,6371.2,6371.199620246887,6371.199620246887,6371.199620246887,6371.199620246887,6371.2,6371.199620246887,6371.199620246887,6371.200759506225,6371.2,6371.199620246887,6371.199620246887,6371.199240493775,6371.2,6371.199240493775,6371.199240493775,6371.199620246887,6371.199240493775,6371.199620246887,6371.2,6371.199240493775,6371.2,6371.2,6371.199240493775,6371.199620246887,6371.199620246887,6371.199240493775,6371.199240493775])
        expected['latSH'] = np.array([-71.89994906690919,-71.89451223632986,-71.88899344348047,-71.8834336694961,-71.84185147782907,-71.83633268497968,-71.83156521293901,-71.82683872203336,-71.78529751150134,-71.78057102059569,-71.77576256742,-71.77447849185606,-71.73573765888375,-71.7343306399147,-71.73307388510744,-71.7315985642467,-71.6907403726317,-71.68803561772037,-71.68528988167401,-71.68265342865439,-71.64104391623067,-71.64597531281143,-71.6509476905272,-71.65587908710793,-71.62127734877265,-71.6261677642184,-71.63456889689752,-71.64281976541488,-71.61101840463931,-71.61937855618339,-71.62772504734914,-71.63758784051066,-71.60677002697557,-71.61679674467715,-71.62676882086535,-71.63674089705358,-71.6106768951808,-71.62585357551657,-71.64094829358231,-71.6561659550531,-71.62956919842506])
        expected['lonSH'] = np.array([176.50442347477053,176.48126913348418,176.45799184879277,176.43501509242486,176.24717122987116,176.2239349263148,176.23539598374205,176.24689802230438,176.09310948295237,176.1045295592446,176.11601793742858,176.11470654110795,175.9457549817985,175.94408841564103,175.94291362310378,175.9410011701362,175.79924742410174,175.82690969024029,175.8543533903254,175.8816604866271,175.73854070275866,175.7625829686371,175.78744485721595,175.81215648163305,175.6633676407535,175.6877650764688,175.718145757897,175.74904553370214,175.60436846670294,175.63526824250806,175.6652117918294,175.70579677587762,175.56883782264052,175.6091359387436,175.64936575295496,175.690264925705,175.5413941225554,175.5714879360385,175.60192325898007,175.6320717139765,175.48123381634593])
        expected['rhoSH'] = np.array([6371.199620246887,6371.199620246887,6371.199620246887,6371.199240493775,6371.199620246887,6371.199240493775,6371.199620246887,6371.199620246887,6371.198860740661,6371.198101234436,6371.198860740661,6371.198101234436,6371.199620246887,6371.199240493775,6371.199240493775,6371.199620246887,6371.199620246887,6371.1984809875485,6371.199620246887,6371.199240493775,6371.198860740661,6371.199620246887,6371.199240493775,6371.1984809875485,6371.199240493775,6371.198860740661,6371.2,6371.1984809875485,6371.199240493775,6371.1984809875485,6371.2,6371.198860740661,6371.1984809875485,6371.199240493775,6371.2,6371.1984809875485,6371.1984809875485,6371.199240493775,6371.1984809875485,6371.199620246887,6371.199620246887])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_30N_270_90000(self):
        """Test for latitude = 30, longitude = 270, rho = 90000"""
        lat = 30
        lon = 270
        rho = 90000

        expected = {}
        expected['latNH'] = np.array([65.77936373138023,65.79545053442291,65.81158514878976,65.8277265933458,65.85181496300115,65.86785395471964,65.88976861667162,65.91165083522503,65.9414748562359,65.96321876345864,65.98501389710015,66.01286740853546,66.04845269411123,66.07605178099996,66.10366623581432,66.13130288874348,66.17031180664071,66.20148649755996,66.23275510358026,66.26400151148579,66.30296603315341,66.335631412859,66.36835314162524,66.4011380496413,66.44156764688589,66.4742979133886,66.51409230304039,66.55395328703658,66.60148969611257,66.64133701973043,66.68124239995623,66.73645594165932,66.79943028580684,66.85472237468538,66.91006739753,66.96552341094862,67.03036239673955,67.0874747310319,67.14465195212138,67.20189406000796,67.26681500806893])
        expected['lonNH'] = np.array([261.05196109690837,261.02652547243923,261.0008712819167,260.97508048761074,260.8796217637706,260.85426810157156,260.8201717972348,260.78602085138476,260.6816009193536,260.6478051433404,260.61365419749035,260.5513628722598,260.4179829381478,260.3556642921606,260.29304511784994,260.23007077370244,260.10332978346366,260.0483331002667,259.9928992849629,259.93732886587566,259.80905791326285,259.75591904152014,259.70237035842723,259.6484118639841,259.52101517558503,259.4670020396286,259.41189607340493,259.3563256543177,259.2261149279806,259.1703532635966,259.11418178786244,259.05459521754324,258.91900230214014,258.8589785997141,258.79849044442443,258.73745587400117,258.59440439202444,258.5283428023721,258.46165283531604,258.39444377388315,258.2483870086716])
        expected['rhoNH'] = np.array([6371.2,6371.199620246887,6371.199620246887,6371.199620246887,6371.199620246887,6371.199620246887,6371.199620246887,6371.199620246887,6371.2,6371.2,6371.199240493775,6371.198860740661,6371.199620246887,6371.2,6371.199620246887,6371.2,6371.199240493775,6371.199620246887,6371.2,6371.199620246887,6371.199240493775,6371.2,6371.2,6371.199240493775,6371.2,6371.2,6371.2,6371.199620246887,6371.2,6371.199620246887,6371.2,6371.2,6371.2,6371.199620246887,6371.199620246887,6371.2,6371.199620246887,6371.2,6371.199620246887,6371.2,6371.199620246887])
        expected['latSH'] = np.array([-72.47346639113681,-72.46764706996396,-72.46117205063078,-72.45502488037778,-72.43689755832057,-72.43070940693252,-72.42774510483275,-72.4245895574362,-72.40968608466724,-72.40644857500064,-72.40333400873914,-72.40389408425108,-72.39267891363392,-72.39360781936102,-72.39404495146792,-72.39485091378998,-72.38405921490136,-72.38568479992381,-72.38685959246106,-72.38825295105173,-72.37736562951474,-72.3844826866299,-72.39165438525839,-72.39889438577862,-72.39399030995455,-72.40101174442131,-72.41128434893301,-72.42129740625626,-72.41952155707204,-72.4296712181787,-72.43984820004201,-72.45188299335956,-72.45193763487293,-72.46395876781216,-72.4758159762113,-72.4879327317989,-72.49219476984098,-72.50858722384902,-72.5251299420188,-72.54129016959504,-72.54574345293389])
        expected['lonSH'] = np.array([169.23931517916805,169.21303261124183,169.18549328850835,169.15845939977342,169.12877539764057,169.10123607490706,169.11951366112604,169.13669841707778,169.15208000308866,169.16948332509384,169.18685932634236,169.19659917609877,169.2032927614854,169.21340144145702,169.22248559305314,169.2326079334031,169.27901223862415,169.3295009969689,169.3798394911519,169.43032824949663,169.4765003282859,169.51224953840176,169.54883203159633,169.58567407197938,169.6168060742163,169.6532929447625,169.69449264583602,169.73569234690956,169.77163280232216,169.8124909939372,169.85433273279267,169.91043590663517,169.96040557060297,170.01708248033574,170.07332225796162,170.13009479034278,170.1629753210072,170.20295924840846,170.2434486098083,170.28298174472434,170.31564370933535])
        expected['rhoSH'] = np.array([6371.2,6371.199240493775,6371.199240493775,6371.199240493775,6371.199240493775,6371.2,6371.1984809875485,6371.2,6371.199620246887,6371.198860740661,6371.199620246887,6371.1984809875485,6371.199240493775,6371.199240493775,6371.199620246887,6371.2,6371.1984809875485,6371.199620246887,6371.199240493775,6371.199240493775,6371.198860740661,6371.2,6371.198860740661,6371.199240493775,6371.2,6371.199620246887,6371.199620246887,6371.199240493775,6371.199620246887,6371.199620246887,6371.199240493775,6371.199240493775,6371.2,6371.198101234436,6371.199240493775,6371.199620246887,6371.199240493775,6371.1984809875485,6371.199240493775,6371.199240493775,6371.2])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_60N_270_90000(self):
        """Test for latitude = 60, longitude = 270, rho = 90000"""
        lat = 60
        lon = 270
        rho = 90000

        expected = {}
        expected['latNH'] = np.array([73.28380185549996,73.2989409697953,73.31405276333395,73.32917992479824,73.33394056664973,73.34901308660066,73.36881209745724,73.38860427812463,73.39815117503703,73.41784431796147,73.43754770616965,73.46598349123171,73.48397420950553,73.5122016737979,73.54042743054298,73.56861732879491,73.5904380756458,73.62274145532538,73.65501409915369,73.68729698826576,73.70899820680619,73.74315598284542,73.77731717397924,73.81150056322785,73.8348598101893,73.86897148245163,73.90937375893955,73.94976237504913,73.97939685831052,74.01965399327858,74.05988380748995,74.11575304735337,74.16061031472742,74.21643515836124,74.27222926614377,74.32800800600069,74.37341681115022,74.42961560764108,74.48577513054423,74.54187659683942,74.58660921326111])
        expected['lonNH'] = np.array([255.69244825898278,255.6603463698837,255.6281625185146,255.5957054595787,255.5161747368831,255.48410016854072,255.43872039169514,255.3930400865261,255.3000675515439,255.25479705772506,255.20919871482604,255.11868504794504,254.98044201914396,254.8898737107496,254.79889559100502,254.70750765991025,254.56483866852705,254.47014492587397,254.37487744733065,254.27900891214034,254.13437282627615,254.04006157421662,253.9451492655101,253.8494446548599,253.70428947461878,253.6081477318617,253.50621398868842,253.40346062281475,253.25065563070322,253.14708264212913,253.0426353893413,252.92463704124017,252.7554669158773,252.63596592615875,252.5155360307131,252.3938767012168,252.21962491511147,252.09608045340426,251.97130655764647,251.84549447313483,251.66678940369061])
        expected['rhoNH'] = np.array([6371.200759506225,6371.2,6371.199240493775,6371.2,6371.2,6371.199240493775,6371.199240493775,6371.2,6371.2,6371.199620246887,6371.199620246887,6371.199240493775,6371.2,6371.2,6371.2,6371.2,6371.2,6371.199620246887,6371.200759506225,6371.2,6371.199620246887,6371.2,6371.2,6371.2,6371.199240493775,6371.2,6371.200759506225,6371.2,6371.199620246887,6371.199620246887,6371.2,6371.200759506225,6371.2,6371.199620246887,6371.199620246887,6371.199620246887,6371.199240493775,6371.200759506225,6371.199240493775,6371.2,6371.199240493775])
        expected['latSH'] = np.array([43.06176181604055,43.06516325024722,43.06831196745459,43.0710884393522,43.039754946534764,43.043245173200646,43.04469658839927,43.04575526772062,43.01245809551681,43.01424418998477,43.01567511461589,43.015873190101814,42.98130901780697,42.982295980142034,42.982767263194766,42.98299948962654,42.946140373770575,42.9450168076521,42.94352782641304,42.94165976967504,42.904315710388,42.90346876693092,42.90213688004277,42.900586427101175,42.863129669692825,42.86209148093898,42.85979995247244,42.85723180134452,42.81833728911588,42.816288232364876,42.813880590682444,42.809761986612926,42.76891062518708,42.76532136077824,42.76127105860042,42.75681436016699,42.716202055362096,42.713090904195155,42.70949139450256,42.705570865918965,42.66431310823751])
        expected['lonSH'] = np.array([337.24621834525567,337.2166299657712,337.18701426553,337.1574532068022,337.2558079308504,337.2260829475825,337.1947733604271,337.16340913175844,337.25996068586574,337.2284871741703,337.197177587015,337.16447464126895,337.25963283678556,337.22690257028285,337.1941449830235,337.16149667879085,337.2541413646929,337.2187883055489,337.18362649170166,337.14838271558443,337.2409727599731,337.2056743423425,337.17037592471183,337.1351048278379,337.22758558919986,337.19220520929923,337.1557319991313,337.11912218518006,337.21037351249146,337.17379101929686,337.1371265638322,337.0982218063198,337.1870415862867,337.1478909419642,337.108794939155,337.0697808986159,337.15928369749975,337.1208980343643,337.08248505047214,337.04415402885,337.1336021862205])
        expected['rhoSH'] = np.array([375298.49333496095,375321.387890625,375344.16092529293,375366.18052978517,375277.3243774414,375300.0488037109,375321.60662841797,375342.6297607422,375252.0480102539,375273.72735595703,375294.92061767576,375315.4576660156,375223.7579223633,375245.2671386719,375265.82849121094,375286.5113647461,375192.9158935547,375212.7481201172,375232.26439208986,375251.5376220703,375157.1644165039,375177.2639892578,375196.9260864258,375215.956274414,375121.51015625,375141.19655761716,375160.0080078125,375178.28476562497,375082.30748291017,375101.3376708984,375119.66303710936,375136.9676269531,375039.5077880859,375057.2255493164,375074.1412719726,375090.95977783203,374993.42702636716,375011.41213378904,375028.52229003905,375045.65675048827,374947.4434814453])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_90N_270_90000(self):
        """Test for latitude = 90, longitude = 270, rho = 90000"""
        lat = 90
        lon = 270
        rho = 90000

        expected = {}
        expected['latNH'] = np.array([82.34980649276585,82.35883258775402,82.36779123462414,82.37671829186934,82.3705207489712,82.37948793357778,82.3916328636957,82.40375218060426,82.4006760341568,82.41277400672419,82.42483270570385,82.44572881569586,82.45134237741996,82.47210871381773,82.49274869171587,82.51323328281039,82.52234731648412,82.54664912955103,82.57078872562515,82.5948292839563,82.60333969966213,82.62841930052078,82.65333070797111,82.6780534314456,82.68715295096736,82.71162466498987,82.73989311041726,82.76792506054464,82.78009987274018,82.80777665303073,82.83521352292667,82.87523373570788,82.89924099686684,82.93864563884911,82.97768273127667,83.01635825056505,83.03864558471362,83.0763614624236,83.11364874576317,83.15056378379298,83.17138348104365])
        expected['lonNH'] = np.array([239.34851591481595,239.28043258916927,239.21185748990234,239.14295454155524,239.06115619605518,238.99288162511172,238.89602954268094,238.79876764889997,238.68896552780285,238.59211344537206,238.49471494780767,238.287869498983,238.0690302379758,237.8613924872074,237.65249798163174,237.44212815519535,237.18687032553365,236.94062834557633,236.6923919503814,236.44207917767875,236.18225878165148,235.91757529093513,235.65048757363095,235.38099562973895,235.10336210035626,234.83108343928288,234.52913443645494,234.2242347919056,233.91245031667285,233.6039443322417,233.29270627214257,232.91871243394934,232.5390358783667,232.15840309630022,231.77345363467828,231.3842421350143,231.00396452278466,230.62024449521334,230.2324536748967,229.84072866561812,229.44985059979663])
        expected['rhoNH'] = np.array([6371.2,6371.199620246887,6371.2,6371.2,6371.200759506225,6371.199240493775,6371.1984809875485,6371.199620246887,6371.199620246887,6371.2,6371.199240493775,6371.199240493775,6371.199620246887,6371.2,6371.199620246887,6371.2,6371.199240493775,6371.2,6371.2,6371.199240493775,6371.2,6371.2,6371.200759506225,6371.2,6371.2,6371.2,6371.2,6371.2,6371.199620246887,6371.2,6371.2,6371.200759506225,6371.2,6371.199620246887,6371.2,6371.199620246887,6371.199620246887,6371.199620246887,6371.2,6371.199620246887,6371.199620246887])
        expected['latSH'] = np.array([48.517652038249615,48.525165246336634,48.53232328458681,48.53916030394599,48.49639990464713,48.50390969763955,48.5095480187994,48.51500192485165,48.47052714807111,48.47649331831112,48.482288733821875,48.487216715308044,48.44232871208272,48.44792263701296,48.45331848645727,48.45830452455138,48.411500653263865,48.41536654033409,48.41881578586495,48.422087446477384,48.37538944312201,48.380078367987224,48.38436431169141,48.38848974595009,48.342594289822195,48.347385667524954,48.3516818565129,48.355674102082766,48.30976498557653,48.31448806138759,48.31890036359142,48.322499873284016,48.27616728504923,48.28038151176713,48.2843976629991,48.288202078366794,48.24280181095372,48.24802690566878,48.252961717344114,48.25768479315518,48.21248601632262])
        expected['lonSH'] = np.array([3.5521261090034026,3.5211221728134223,3.489967545574878,3.458780048050954,3.5427674691800157,3.511755422140396,3.4786102216456167,3.445244320663281,3.5271468265481967,3.494132039977882,3.4609479927821982,3.4263814726098216,3.5069271187274316,3.472532847388186,3.438059388543251,3.4035411065818875,3.4810074046008794,3.4435687898825122,3.4061756386108084,3.368535746755337,3.4458618124529328,3.409107497312036,3.372313908583412,3.3353341971999053,3.413228449259081,3.3763868357628555,3.3387919804672244,3.300950171144415,3.37792661653387,3.3403176739730758,3.302593898856861,3.2626253393812386,3.3372528400264443,3.297408931503175,3.2573996043359443,3.217312797210316,3.292921710661888,3.2540583611713387,3.215103444457229,3.1759666739564674,3.251479324429424])
        expected['rhoSH'] = np.array([377304.9994140625,377315.9606079101,377326.75167236326,377336.95943603513,377284.7540161133,377295.9339477539,377304.2216796875,377312.72814941406,377258.0923095703,377266.86612548825,377275.5427246094,377282.6395507812,377226.9586303711,377234.93040771486,377242.73205566406,377249.9260986328,377191.3529785156,377196.60268554685,377201.4635253906,377206.25145263673,377147.7755493164,377154.1432495117,377159.87904052733,377165.37178955076,377107.7222290039,377114.3572753906,377119.5583740234,377124.61364746094,377066.623828125,377072.55405273434,377078.1683227539,377082.00838623045,377022.75474853517,377027.34824218747,377031.45565185545,377035.73319091793,376977.743371582,376983.6006835937,376989.2878662109,376994.8292236328,376936.8394042969])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_90S_0_120000(self):
        """Test for latitude = -90, longitude = 0, rho = 120000"""
        lat = -90
        lon = 0
        rho = 120000

        expected = {}
        expected['latNH'] = np.array([-75.8068582532915,-75.79483712035227,-75.78302089308815,-75.77143689225582,-75.79725500731846,-75.78517923286589,-75.77498859062422,-75.76505749557103,-75.79554746002594,-75.78229689303612,-75.77209259041612,-75.76370511811535,-75.79595727137615,-75.78707802545514,-75.77563062840619,-75.76721583534874,-75.80199515860244,-75.79550647889093,-75.78922270485452,-75.78317115724988,-75.81811440504367,-75.80915319685263,-75.80321093227471,-75.79751455450693,-75.83300421743431,-75.82681606604626,-75.82226716005906,-75.81792315974693,-75.8521833886237,-75.84737493544802,-75.84274406719075,-75.84073599157475,-75.8803784095175,-75.87787856028129,-75.87555629596349,-75.87346625807746,-75.91268520429168,-75.90675660009211,-75.90379229799231,-75.90104656194598,-75.94038845156524])
        expected['lonNH'] = np.array([29.12900145148769,29.07033012651728,29.011949084586597,28.953841250222712,29.085185787962057,29.02635736864074,28.95007440089545,28.87401341429819,28.987090611102335,28.910336360304317,28.833732373668038,28.746510857966975,28.84814065772218,28.760003896672337,28.67224962621601,28.584560242556805,28.660604153681142,28.547062504013432,28.433664288318298,28.320303638663596,28.395159096872348,28.284089975684186,28.17301743940144,28.06216176162484,28.139071399226477,28.027148504392063,27.906619571203432,27.785996722913715,27.853204076799347,27.73142009635073,27.61010056876567,27.4698562945378,27.516363052596414,27.37486373110855,27.233531749255356,27.092170739098187,27.145879931636582,27.012221667315895,26.878566818089794,26.74513053491713,26.797386604709608])
        expected['rhoNH'] = np.array([259169.2380126953,259157.98516845703,259146.90245361326,259136.08708496092,259160.19685058593,259148.8953979492,259139.34384765624,259130.05964355468,259093.5061279297,259146.1247192383,259136.62177734374,259128.7958251953,259093.84638671874,259085.6072631836,259139.8056274414,259131.80954589843,259099.02318115233,259092.77700195313,259086.7981689453,259080.9651611328,259048.32462158203,259104.88049316406,259099.2662231445,259093.7734741211,259061.69193115234,259055.8103149414,259051.50847167967,259047.35245361328,259079.1180419922,259074.59746093748,259070.2227050781,259068.30267333984,259039.98828125,259037.58216552733,259035.39478759764,259033.4018432617,259004.60136718748,259064.02513427733,259061.1329345703,259058.45947265625,259029.70760498047])
        expected['latSH'] = np.array([-67.90639210071609,-67.87263730583788,-67.83869126566293,-67.80471790473129,-67.78272469560383,-67.74847812710539,-67.71566589833265,-67.68266242426316,-67.66180302653794,-67.62860830717167,-67.59524966326532,-67.56380347232658,-67.54455599924549,-67.51289124225332,-67.4811172022344,-67.44915191691877,-67.43124316091499,-67.40090346062178,-67.37041349616686,-67.33978692792851,-67.32142737943951,-67.30080020814609,-67.28014571609597,-67.25943658253249,-67.25093982720497,-67.2300531087231,-67.214220730227,-67.19829272908254,-67.19468638920077,-67.17867642578625,-67.16262548123672,-67.15031748035236,-67.15027649921734,-67.13795483795462,-67.12553755404355,-67.11307928899745,-67.11631679866403,-67.10727362820293,-67.09816215585013,-67.08906434387569,-67.09209694786716])
        expected['lonSH'] = np.array([155.30156285694832,155.28167334608526,155.2615925899254,155.24130692809047,155.2706357603865,155.25040474006494,155.25226255151918,155.25406572146005,155.3051418760734,155.30658987617744,155.30791493287643,155.29123561092325,155.32388391515593,155.30713629131105,155.28980127119758,155.27238428881404,155.3217665565132,155.32130210364966,155.3204278394359,155.3190618016019,155.36699606919706,155.3526799926967,155.33768089727934,155.3223402924035,155.3569420307388,155.34127357678278,155.3246215755863,155.30775100833637,155.34102768997266,155.32381561326423,155.3061937252056,155.28450104440162,155.31351568799585,155.29139953546334,155.2689965149857,155.24610172088782,155.264147080675,155.23065183298525,155.19673311356698,155.16243190355516,155.17979424442535])
        expected['rhoSH'] = np.array([6371.199620246887,6371.199620246887,6371.199620246887,6371.199620246887,6371.199620246887,6371.199240493775,6371.199240493775,6371.199620246887,6371.199620246887,6371.199240493775,6371.199240493775,6371.199240493775,6371.198860740661,6371.2,6371.2,6371.2,6371.199620246887,6371.199620246887,6371.200759506225,6371.199240493775,6371.199620246887,6371.2,6371.2,6371.199240493775,6371.2,6371.199620246887,6371.199620246887,6371.199620246887,6371.199620246887,6371.199620246887,6371.2,6371.2,6371.2,6371.199240493775,6371.2,6371.2,6371.199620246887,6371.199620246887,6371.2,6371.2,6371.199240493775])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_60S_0_120000(self):
        """Test for latitude = -60, longitude = 0, rho = 120000"""
        lat = -60
        lon = 0
        rho = 120000

        expected = {}
        expected['latNH'] = np.array([-62.91464396846064,-62.91266321360135,-62.910887364417135,-62.909330081286384,-62.95316623537951,-62.95111717862852,-62.95095325408843,-62.951021555980134,-62.99674284228419,-62.996305710177324,-62.99610080450222,-62.995390464828546,-63.04161718513117,-63.0409068454575,-63.039950618973705,-63.039704732163585,-63.08840398094577,-63.089510471591325,-63.09132730191055,-63.09333537752653,-63.14172043760689,-63.14150187155346,-63.14150187155346,-63.14172043760689,-63.18849357304313,-63.188206705098,-63.18785153526116,-63.18722315785752,-63.234337802752265,-63.23316301021504,-63.232698557351455,-63.23304006680996,-63.28033229662313,-63.280113730569695,-63.28010007019134,-63.27982686262456,-63.3266682999525,-63.32482414887659,-63.323690337474375,-63.322775092125596,-63.36916573696831])
        expected['lonNH'] = np.array([14.433116914416772,14.421227262619073,14.409313705159278,14.397401855246775,14.461289737195782,14.449219085385078,14.428426282004265,14.407522488049441,14.462845312779253,14.441774179189764,14.420653526728792,14.388853873500505,14.440541330044576,14.4119962619558,14.379919986066128,14.351199040606224,14.390028666037747,14.344925511853567,14.30311536262298,14.261049935072165,14.295930857389774,14.252667585413267,14.209322351166719,14.16573635275193,14.199471510836268,14.155410814274163,14.104948522912462,14.050987467148422,14.080923332506941,14.026665163514007,13.975571079654081,13.912762367593936,13.927116863908363,13.863861628231229,13.800437345372137,13.733632972647534,13.754448827916795,13.691220912996341,13.631107564337412,13.570878956236239,13.587781966884728])
        expected['rhoNH'] = np.array([255322.87974853514,255326.23372802735,255329.61201171874,255333.0389038086,255312.28311767578,255315.10240478514,255319.52576904296,255324.04635009766,255304.87033691406,255309.4638305664,255314.1302368164,255257.08828125,255302.7315673828,255309.17218017578,255252.25174560546,255258.66805419922,255306.69315185546,255252.39757080076,255261.41442871094,255270.38267822264,255254.87659912108,255264.13649902344,255273.37209472657,255282.5104736328,255267.3203491211,255276.7746826172,255287.59005126954,255235.0443725586,255284.7221557617,255232.3223022461,255243.28349609373,255256.4320678711,255244.98479003905,255258.18197021485,255271.33054199218,255221.11806640626,255272.44853515623,255221.77427978514,255234.33955078124,255246.8319091797,255234.70411376952])
        expected['latSH'] = np.array([-71.0975111224594,-71.0620487802887,-71.0264908154696,-70.99076892611043,-70.96370771661884,-70.92787654423296,-70.89457254183998,-70.86118657717697,-70.83655691502989,-70.80293872393509,-70.76919758943524,-70.73792898341492,-70.71548498180226,-70.68406611162018,-70.65248331689804,-70.62075025801417,-70.6004236150442,-70.57095817896479,-70.5413424787236,-70.51154919356401,-70.49093568264891,-70.4699123603836,-70.44898466076668,-70.42787937623135,-70.41607680934558,-70.39488956254019,-70.37890691988235,-70.36280133381948,-70.35613506918955,-70.34008412464001,-70.32382827441538,-70.31208034904296,-70.3097444243468,-70.29785989519098,-70.28596170565683,-70.27389959158259,-70.27562079925343,-70.2676567986812,-70.25961083583891,-70.25159219375334,-70.25324509953248])
        expected['lonSH'] = np.array([148.73813355515958,148.72432291265784,148.71026638334595,148.69631913706078,148.74698548032393,148.73313385668715,148.74743627280915,148.76147914174268,148.83972578887438,148.85391892196964,148.8680300927949,148.86502480956008,148.92620964414508,148.9232180212886,148.92026737956715,148.91737137935905,148.99742119643162,149.01364972589957,149.03000119877257,149.04620240748386,149.12599267736795,149.12237267710782,149.1183018843625,149.11449063880565,149.1741045298815,149.1703752465947,149.1627664158593,149.15506196247551,149.21093290988622,149.20343336217755,149.1959064937122,149.1831477003426,149.23412823230757,149.22180657104488,149.2093209852421,149.19689004095267,149.23397796814584,149.2078183436247,149.18138551153675,149.1549253586921,149.1922864934521])
        expected['rhoSH'] = np.array([6371.2,6371.199620246887,6371.199620246887,6371.2,6371.2,6371.2,6371.199240493775,6371.199620246887,6371.2,6371.2,6371.199240493775,6371.199240493775,6371.2,6371.199620246887,6371.2,6371.2,6371.199240493775,6371.2,6371.200759506225,6371.199620246887,6371.199620246887,6371.2,6371.2,6371.199620246887,6371.199240493775,6371.2,6371.2,6371.199620246887,6371.199240493775,6371.199620246887,6371.199620246887,6371.2,6371.2,6371.2,6371.2,6371.199620246887,6371.2,6371.199620246887,6371.199620246887,6371.2,6371.199620246887])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_30S_0_120000(self):
        """Test for latitude = -30, longitude = 0, rho = 120000"""
        lat = -30
        lon = 0
        rho = 120000

        expected = {}
        expected['latNH'] = np.array([1.3084431744428429,1.3102053632486985,1.3116806841094188,1.3129784200517207,1.2912037769777243,1.2930615884319678,1.2931913620261923,1.293102569566983,1.2731310964338718,1.2735955492974256,1.2738414361075456,1.273295020973947,1.2491912833929746,1.2491776230146314,1.2489795475287053,1.2485424154218236,1.225859357188213,1.2241859608415524,1.2223623003331596,1.220258602068796,1.1940443360342954,1.192999317091278,1.1918996566349023,1.1905609395575851,1.1645720697656827,1.1638070885786505,1.1623659186637667,1.1607471638304787,1.1341299166349472,1.1331190486377807,1.1318759542088372,1.1295673502693688,1.1052245560674407,1.1034965182074359,1.1015567444831476,1.0995213481104855,1.0721869310521015,1.0713399875950103,1.070206176192798,1.0690245534663774,1.041464740165381])
        expected['lonNH'] = np.array([358.8109287249268,358.80035559209165,358.78978245925646,358.7791820056646,358.8193981594976,358.8088250266624,358.79980917695804,358.7907386857402,358.83259408497406,358.8235782352697,358.81456238556524,358.80625687553453,358.8488772559554,358.8406537081947,358.83234819816397,358.8240700088899,358.8688214083318,358.86264691732214,358.8564177847991,358.85016133151936,358.894940051718,358.88824646633134,358.8814709186747,358.8746680502614,358.9190096383531,358.91220676993976,358.9059776374167,358.8996665426236,358.9446091873623,358.9382980925692,358.9319869977761,358.92701462006033,358.9733506233897,358.96832360416056,358.96326926417476,358.9581602826756,359.0038679086013,358.99807590818517,358.9922565870123,358.9863826243261,359.03206292949517])
        expected['rhoNH'] = np.array([382317.3516357422,382313.90043945314,382310.9839355469,382308.16464843747,382279.3884765625,382275.7671508789,382275.03802490234,382274.77067871095,382308.09173583984,382306.6334838867,382305.9772705078,382306.46335449215,382281.3571166992,382281.01685791014,382280.96824951173,382281.3328125,382318.882800293,382321.3861328125,382323.88946533203,382327.1219238281,382305.0537109375,382306.779309082,382308.48060302733,382310.47354736325,382288.25950927736,382289.32889404293,382291.6864013672,382294.1654296875,382272.8020385742,382274.55194091797,382276.5448852539,382280.4092529297,382320.4625732422,382323.42768554686,382326.6358398437,382329.8439941406,382309.8659423828,382311.3728027344,382313.3414428711,382315.4316040039,382295.2348144531])
        expected['latSH'] = np.array([-79.6092928661293,-79.58922577034781,-79.56904939153958,-79.54876372970463,-79.54862712592123,-79.52825950181625,-79.51966712384038,-79.51097912321615,-79.52263142594018,-79.51394342531592,-79.50517346242162,-79.4966357259591,-79.50857489662829,-79.50003716016576,-79.49144478218989,-79.48275678156563,-79.49846621665668,-79.49337089553583,-79.48826191403666,-79.48311195140249,-79.49894432989856,-79.48938206506054,-79.47979247946586,-79.47018923349282,-79.48175957394682,-79.47212900721709,-79.46253942162241,-79.45292251527101,-79.46457481799507,-79.45497157202203,-79.4453410052923,-79.43381164597332,-79.44352417497308,-79.43198115527576,-79.42039715444344,-79.40879949323275,-79.41893549396104,-79.4076930025872,-79.39638220932167,-79.38508507643445,-79.3951664356494])
        expected['lonSH'] = np.array([96.63807894370596,96.72132528931009,96.80391593675388,96.8860216407666,96.85095544956776,96.93455013481955,97.02913459444588,97.12364392199134,97.10109746754114,97.19719139897404,97.29301895302932,97.37093775108083,97.331493408624,97.41129733888643,97.49034311815099,97.56874685963356,97.53947949904006,97.63015709046115,97.72008336107353,97.80928563163391,97.77997728990537,97.83957069041374,97.89835129841087,97.95623032143756,97.89492254344752,97.954761830766,97.9961049658121,98.03661481777944,97.95761684983907,97.99988889061228,98.04142327095514,98.06092346103551,97.96078605761396,97.98196647423016,98.00254583419941,98.02221677900906,97.87846178754779,97.8573906539583,97.83579359580273,97.8132949526767,97.6687066781367])
        expected['rhoSH'] = np.array([6371.196202468872,6371.195822715759,6371.196202468872,6371.1984809875485,6371.1965822219845,6371.195063209533,6371.195442962647,6371.196961975097,6371.198101234436,6371.196202468872,6371.195063209533,6371.1946834564205,6371.199240493775,6371.198101234436,6371.1965822219845,6371.195822715759,6371.196961975097,6371.199240493775,6371.197721481323,6371.196961975097,6371.195822715759,6371.197341728211,6371.2,6371.198101234436,6371.195063209533,6371.195822715759,6371.1965822219845,6371.197721481323,6371.195822715759,6371.195442962647,6371.195063209533,6371.196202468872,6371.199620246887,6371.1984809875485,6371.195822715759,6371.195442962647,6371.195063209533,6371.1965822219845,6371.198101234436,6371.199620246887,6371.195063209533])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_0N_0_120000(self):
        """Test for latitude = 0, longitude = 0, rho = 120000"""
        lat = 0
        lon = 0
        rho = 120000

        expected = {}
        expected['latNH'] = np.array([15.864792069412275,15.865311163789187,15.865618522301844,15.865932711003666,15.843249652770055,15.843864369795355,15.843898520741206,15.843898520741206,15.822690783368316,15.822984481502615,15.823285009826108,15.823551387203736,15.80205678188571,15.802644178154324,15.803204253666266,15.803538932935595,15.779278101003712,15.779728893488937,15.780125044460789,15.780459723730118,15.758022552306628,15.759006099547108,15.759996476976767,15.760857080812187,15.73831062636198,15.739581041547595,15.74080364540903,15.741916966243735,15.719022172145856,15.720497493006576,15.721918172353938,15.723427644160523,15.698483793311624,15.70035526514421,15.702315529436007,15.704214322025265,15.681128282630624,15.683525679029302,15.685841113157935,15.688095075584044,15.664647036163387])
        expected['lonNH'] = np.array([359.0911304054374,359.0816774236261,359.0721151587881,359.06255289395006,359.0989441418479,359.08943651852326,359.08091244243906,359.07233372484154,359.1096538784665,359.101157123139,359.0926330470548,359.0845734238342,359.12241267183606,359.1144076901288,359.1063480669082,359.0982611229309,359.13765765406356,359.1309640686769,359.12421584177696,359.1174129733636,359.1567548629829,359.1496514662461,359.1425207487526,359.1353353897457,359.1743221095282,359.1671913920347,359.16036120286464,359.1534490514246,359.19284558255725,359.18598807263055,359.1791032419472,359.1730653547209,359.21350007460734,359.20748950813777,359.20142430015477,359.19530445065845,359.235220076168,359.2287177360781,359.22216075447494,359.21557645211504,359.2555193983813])
        expected['rhoNH'] = np.array([382328.6044799805,382329.40651855466,382328.0454833984,382327.97257080075,382282.66954345704,382282.2320678711,382282.71815185546,382283.00980224606,382300.16856689454,382300.16856689454,382301.2622558594,382302.06429443357,382319.1501464844,382319.73344726564,382320.43826904293,382319.53901367186,382276.66640625,382275.7671508789,382275.13524169923,382274.77067871095,382293.6550415039,382292.82869873045,382293.0474365234,382293.2418701172,382311.47001953126,382311.34849853517,382311.2998901367,382311.2269775391,382329.79538574215,382329.50373535155,382329.1877807617,382326.1011474609,382285.31870117184,382282.2077636719,382281.0897705078,382280.0932983398,382299.220703125,382297.8110595703,382296.57154541014,382295.2591186523,382314.5809570312])
        expected['latSH'] = np.array([-72.04081488835152,-72.0299548875712,-72.01899926414251,-72.00794801806543,-71.99752514939198,-71.98659684671998,-71.98467073337403,-71.98267631813638,-71.9812829595457,-71.97949344998315,-71.97762197815058,-71.97775858193395,-71.97837329895927,-71.9786601669044,-71.97894703484954,-71.97919292165966,-71.98416529937543,-71.98905571482118,-71.99389148875355,-71.99871360230756,-72.00369964040166,-72.00214235727091,-72.00046213073509,-71.99880922495595,-71.99721096069015,-71.99570831907278,-71.99069496022199,-71.98559963910114,-71.9804633368453,-71.97554560064287,-71.97055956254877,-71.96280046765165,-71.95485012745775,-71.94726861747904,-71.93960514523027,-71.93188703146816,-71.9167786530241,-71.90205276517355,-71.88723125467462,-71.87238242341903,-71.85711012043487])
        expected['lonSH'] = np.array([44.47828066758225,44.50756510364867,44.536938332174316,44.56636278711873,44.52818544475294,44.55814265445262,44.5535015409116,44.54886725755974,44.47588327118357,44.47149145954725,44.466737647884926,44.44304372165415,44.35027609234704,44.32646605290037,44.30239646626524,44.27815612490087,44.18743755234476,44.166581569714126,44.14564703990804,44.12433343460302,44.032108805334914,44.039686900219046,44.04708399509017,44.05471673148766,43.990721274059226,43.998326689700036,44.000560161558624,44.00279704851181,43.93313594916685,43.93549919461967,43.93786244007249,43.93843617596278,43.86672260477223,43.86744660482425,43.868215001105874,43.868898020022876,43.782468806265534,43.76902699397895,43.755544200557345,43.74212970902744,43.65549217450042])
        expected['rhoSH'] = np.array([6371.198101234436,6371.195442962647,6371.190885925293,6371.188227653503,6371.1946834564205,6371.199620246887,6371.192784690857,6371.189366912841,6371.192784690857,6371.198860740661,6371.193923950195,6371.188607406616,6371.190885925293,6371.196202468872,6371.195822715759,6371.190885925293,6371.189366912841,6371.193923950195,6371.200759506225,6371.193544197083,6371.187847900391,6371.19050617218,6371.194303703308,6371.198101234436,6371.187468147277,6371.187468147277,6371.188607406616,6371.191265678405,6371.19050617218,6371.187468147277,6371.187088394165,6371.187088394165,6371.2,6371.194303703308,6371.191265678405,6371.188227653503,6371.188987159729,6371.192404937744,6371.1965822219845,6371.1965822219845,6371.185949134827])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_30N_0_120000(self):
        """Test for latitude = 30, longitude = 0, rho = 120000"""
        lat = 30
        lon = 0
        rho = 120000

        expected = {}
        expected['latNH'] = np.array([71.80060578666419,71.82453876951591,71.84851273350266,71.87245254654354,71.90394825635377,71.92771389957083,71.95561692987762,71.98351142244796,72.01901474575368,72.0466616439666,72.07426585349721,72.11131962974453,72.15597711408536,72.19265352238104,72.22927358161607,72.26581850877022,72.30580243617146,72.3377045422373,72.36951956339122,72.40125091472781,72.4408147854951,72.46763864591304,72.4944112799122,72.52108829126298,72.5557275956387,72.58204089941617,72.61145340152954,72.64075662061619,72.67814678368013,72.70711532349745,72.73596604255158,72.77029628086736,72.81275956693733,72.8465194844574,72.88008132649156,72.91338020624266,72.95358952988653,72.98497937176461,73.0161404023055,73.04706066867816,73.08635303942594])
        expected['lonNH'] = np.array([336.09899245150365,336.14819713428443,336.1973198547951,336.2465245375759,336.2595018969989,336.3089797873465,336.37662598088633,336.4443268159395,336.47544515779805,336.54355580420145,336.6117484128748,336.7405111391079,336.83277333441646,336.9627928154568,337.0931947870907,337.22406121158815,337.3358850686796,337.4858487020964,337.6363860714035,337.7874971766008,337.90169793952344,338.0485743274354,338.1958058851842,338.34347457503986,338.45387775278397,338.6027212351769,338.7549524913981,338.9077028419963,339.0229964351861,339.1768396160515,339.33120189129374,339.5376648495249,339.7068349748878,339.9149918200331,340.12377704258205,340.33329992556133,340.5055846171858,340.7167194248092,340.9283186852962,341.1405463231868,341.31526256215574])
        expected['rhoNH'] = np.array([6371.2,6371.199620246887,6371.199240493775,6371.198860740661,6371.198860740661,6371.198101234436,6371.197721481323,6371.198101234436,6371.198101234436,6371.196961975097,6371.197721481323,6371.196961975097,6371.196961975097,6371.198101234436,6371.197341728211,6371.197721481323,6371.197341728211,6371.197341728211,6371.198101234436,6371.197721481323,6371.197721481323,6371.197721481323,6371.198860740661,6371.198101234436,6371.198101234436,6371.1984809875485,6371.198860740661,6371.198101234436,6371.198860740661,6371.1984809875485,6371.198860740661,6371.199240493775,6371.2,6371.199620246887,6371.199240493775,6371.199620246887,6371.199620246887,6371.199620246887,6371.199620246887,6371.199620246887,6371.199240493775])
        expected['latSH'] = np.array([24.662485531738895,24.675633645891168,24.688522212854977,24.701144402441173,24.66391304127542,24.677074815806037,24.69001119409404,24.702667534626073,24.66536104137947,24.67858428761261,24.69152066590061,24.703965270568375,24.66635141880913,24.67937658955634,24.692121722547583,24.70459364797202,24.66725983396873,24.680640174552792,24.693733647191706,24.706560742452993,24.669131305801315,24.68208134446766,24.694737684999694,24.707134478343264,24.669185947314674,24.682142816170185,24.694416666108708,24.70642413866959,24.66799749439909,24.680565042471912,24.692852552788764,24.70485319516048,24.66634458861995,24.67890530650361,24.691206477198804,24.703234440327194,24.66444579603069,24.676815268617588,24.68891153363768,24.700748251469307,24.66191179584861])
        expected['lonSH'] = np.array([1.0109148479907253,0.997963848829029,0.9850053791479281,0.9720708151289222,1.0076202422115461,0.9946640136862666,0.9811678800514387,0.9676691850956721,1.0026665407942885,0.9891548257904166,0.9756806768269798,0.9618703544903313,0.9965278015560338,0.9827013642418124,0.9688965914338645,0.955094593390267,0.9889408487703248,0.9743483630520041,0.9597893879492988,0.9452109894961412,0.9790273627985802,0.9647463977394356,0.9504748241903997,0.9362110413258858,0.9702673250229215,0.9559896683366561,0.9416304762671737,0.9272447104929517,0.9611642836848813,0.9467832136657136,0.9324111082698316,0.917539758734304,0.9508647853033251,0.9359505336420734,0.9210392701885836,0.9061559678220084,0.9397252803755632,0.9250921336873398,0.9104901497372045,0.8958860313529537,0.929386294962868])
        expected['rhoSH'] = np.array([382280.91964111326,382284.78400878905,382288.52685546875,382292.17248535156,382280.74951171875,382284.66248779296,382288.3567260742,382292.0995727539,382280.77381591796,382284.51666259766,382288.3567260742,382291.90513916017,382280.555078125,382284.3222290039,382288.0407714844,382291.662097168,382279.60721435543,382282.96119384764,382286.50960693357,382289.9121948242,382278.3190917969,382282.0133300781,382285.561743164,382289.03724365233,382277.4684448242,382281.13837890624,382284.61387939454,382288.0650756836,382276.447668457,382280.0203857422,382283.5687988281,382287.09290771483,382275.5484130859,382279.09682617185,382282.66954345704,382286.2422607422,382274.6248535156,382278.1975708008,382281.7945922851,382285.19718017575,382273.55546875])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_60N_0_120000(self):
        """Test for latitude = 60, longitude = 0, rho = 120000"""
        lat = 60
        lon = 0
        rho = 120000

        expected = {}
        expected['latNH'] = np.array([81.70433824827401,81.72197721180557,81.73964861873569,81.75733624736507,81.77350245135685,81.79106542903389,81.81400035049315,81.83696259270909,81.8583684055679,81.88115903928094,81.90395650318315,81.94420510041475,81.98291861263039,82.02294352116665,82.06300258064877,82.10303005050599,82.14403509118816,82.1863464055491,82.22869272462952,82.271065510693,82.31210470232102,82.35298936091907,82.39389451008464,82.43483637151698,82.4745889262601,82.51540528296646,82.56027791826614,82.60518982715357,82.64906610860808,82.69379018729332,82.73851511975221,82.7947087936012,82.85003417965194,82.9059298864984,82.96165782682334,83.0173042317651,83.07196794324,83.12685833161798,83.1815835147954,83.23616355645298,83.29040507685981])
        expected['lonNH'] = np.array([305.8166930680918,305.84152763591396,305.86592507162925,305.8902132243178,305.7857386507733,305.81070982237884,305.8498331459447,305.88879254497044,305.7979237082526,305.83805789981557,305.87783692154176,305.9650174561078,305.92083979255614,306.01056115749344,306.10047376772746,306.1914245667154,306.17309233898305,306.2927572532417,306.41348767701083,306.53533825180386,306.51869991098573,306.65150610920745,306.7855963829931,306.9203969964525,306.91332092047236,307.05164591154346,307.20313950733436,307.35561665036573,307.3622009527256,307.51883085077236,307.67688142816644,307.9191892191618,308.0126808485209,308.261928111713,308.51500028084035,308.7709957709324,308.8724923819988,309.1360284009346,309.40300683521207,309.6735369678579,309.78424067392547])
        expected['rhoNH'] = np.array([6371.2,6371.199240493775,6371.199240493775,6371.199240493775,6371.199240493775,6371.198860740661,6371.199240493775,6371.199240493775,6371.199620246887,6371.199240493775,6371.199620246887,6371.1984809875485,6371.199620246887,6371.2,6371.199240493775,6371.2,6371.199240493775,6371.199620246887,6371.199620246887,6371.199240493775,6371.199240493775,6371.199620246887,6371.2,6371.199620246887,6371.199240493775,6371.199620246887,6371.2,6371.199620246887,6371.199620246887,6371.2,6371.199620246887,6371.199620246887,6371.2,6371.2,6371.199620246887,6371.199620246887,6371.199620246887,6371.199240493775,6371.2,6371.2,6371.199620246887])
        expected['latSH'] = np.array([38.55977581331546,38.56974105931451,38.579480909070945,38.58898170220643,38.55136443535259,38.56398662493877,38.5731595689941,38.5820866262393,38.54388196311684,38.55592700171815,38.56508628539515,38.5737503803573,38.535101754938786,38.54423713295368,38.55579039793476,38.564461323086086,38.52527311272314,38.53387573598277,38.54216758563516,38.552921718483354,38.51384962133629,38.52257860309557,38.53107194332848,38.5392681703325,38.502993035650555,38.511715187220666,38.51993190479219,38.52794371668861,38.49150807256118,38.50003556373994,38.508351319054434,38.51602162149236,38.476775354521465,38.48765584586929,38.49563692191445,38.50344041304119,38.46448784420461,38.472988014626694,38.48390607201496,38.49194520466806,38.45312923961488])
        expected['lonSH'] = np.array([2.3478179764800573,2.3284940906576215,2.3091226069544075,2.2897154782014626,2.3408866151329635,2.3215448000639567,2.3008363068307127,2.280072958640697,2.329861622595505,2.309159105777785,2.288484763490391,2.266948536707106,2.31589537984671,2.29446502099556,2.2729629451581257,2.251456387009048,2.2984862948694054,2.2751725113546244,2.2518647042553677,2.2283914785121492,2.2753887295305377,2.252512078122638,2.229561148407514,2.206600186852047,2.2539163223273104,2.2310178996914307,2.207589497064641,2.1840573609398315,2.2308193973186774,2.207389287144595,2.183910938759499,2.1591103084397716,2.204531066420356,2.1797169891657,2.1548980027125775,2.1300196789910406,2.176040853288352,2.1518899447134214,2.1276587814157435,2.1034188669381915,2.1493371615111294])
        expected['rhoSH'] = np.array([382273.50686035154,382285.780480957,382297.8353637695,382309.52568359376,382329.67386474606,382280.67659912107,382292.05096435547,382303.0850708008,382322.6499511719,382273.0450805664,382284.54096679686,382295.3077270508,382318.20228271483,382329.55234374997,382279.2669555664,382289.96080322267,382310.6436767578,382321.5319580078,382332.0313720703,382281.2355957031,382301.1407348633,382312.17484130856,382322.771472168,382333.12506103516,382292.002355957,382302.8663330078,382313.3414428711,382323.52490234375,382281.7945922851,382292.53704833984,382303.0607666015,382312.8310546875,382331.6425048828,382280.89533691405,382291.00588378904,382300.8976928711,382320.1223144531,382330.79185791017,382279.9474731445,382290.1309326172,382309.4284667969])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_90N_0_120000(self):
        """Test for latitude = 90, longitude = 0, rho = 120000"""
        lat = 90
        lon = 0
        rho = 120000

        expected = {}
        expected['latNH'] = np.array([78.8984418957194,78.90707440105666,78.91558737808343,78.92395179849576,78.89862204195877,78.90718368408338,78.91759374615212,78.92781000160318,78.90424499519298,78.9146729865083,78.9249327844153,78.93787172402425,78.91678351496184,78.9297173319289,78.94248295548765,78.95502403657744,78.93649117203826,78.95209815429173,78.96743961294123,78.98257531214198,78.96340126359446,78.979382198705,78.99510017153248,79.01055518207694,78.99158603920452,79.00691042238108,79.02556537655168,79.04393602409809,79.02769895689367,79.04587409027508,79.06365221891097,79.09216569737484,79.08588192333842,79.11393863290154,79.14157101696247,79.16872528778151,79.16107889100567,79.1878233504745,79.21402054103609,79.23979852873737,79.23086805639758])
        expected['lonNH'] = np.array([222.03207391586602,221.9699874963106,221.90740930313495,221.84420273255566,221.79726567257933,221.73515193226723,221.64709713348742,221.55822271200722,221.48625983891196,221.39868315337407,221.31038246778414,221.13775626670125,220.9828065951903,220.81105465832118,220.63863336291337,220.46533780329182,220.27212541205049,220.0598431326465,219.84644070221862,219.6319044603885,219.4388286729306,219.20795461860584,218.9758647906088,218.74253186818282,218.5328723814201,218.29949847785912,218.03881747799642,217.77659285538127,217.54065080069236,217.27835787618554,217.01458963081797,216.69424009836604,216.40249539815812,216.0810666958173,215.75787580467065,215.43290906433978,215.1539504782581,214.84212502189035,214.5286329993651,214.21382958051922,213.935089560491])
        expected['rhoNH'] = np.array([6371.2,6371.199620246887,6371.199620246887,6371.199620246887,6371.199620246887,6371.199620246887,6371.198860740661,6371.199620246887,6371.2,6371.199240493775,6371.199620246887,6371.198860740661,6371.199620246887,6371.2,6371.199240493775,6371.2,6371.199620246887,6371.199240493775,6371.2,6371.199620246887,6371.2,6371.2,6371.2,6371.199240493775,6371.199240493775,6371.199620246887,6371.2,6371.199620246887,6371.199620246887,6371.199620246887,6371.199620246887,6371.2,6371.199620246887,6371.199240493775,6371.2,6371.2,6371.199620246887,6371.199240493775,6371.2,6371.199620246887,6371.199240493775])
        expected['latSH'] = np.array([73.76546679576927,73.6725284117329,73.5846785186282,73.49383358757244,73.72931460449239,73.6331455409786,73.54314926092722,73.4522309053379,73.6852137805689,73.59044832092957,73.49639490851119,73.41110975143982,73.64449902292645,73.55596098826288,73.46222688718821,73.37188226748916,73.6103702751912,73.51583191934176,73.42088545968942,73.32817076434837,73.57029926287802,73.47759993546262,73.39053380656517,73.30273513987925,73.55243319555656,73.45981583041119,73.37157149388192,73.28712474253118,73.54256527975319,73.45781287743708,73.37191471088771,73.28943334647064,73.54950987459179,73.46764834984191,73.38075980586288,73.30005941327188,73.57014899871629,73.48558784169694,73.40441787360051,73.32345622627376,73.60148932172288])
        expected['lonSH'] = np.array([350.3579412496324,350.43211710401874,350.4985885050213,350.56877552893235,350.38744766684687,350.46648661592224,350.5413454892256,350.61713326825605,350.4496570298073,350.5321657149811,350.6124887396204,350.6834680654752,350.5244612615973,350.6013145501383,350.684424291959,350.7623977315239,350.6063142486107,350.7001883685634,350.7917948657116,350.8799862682748,350.724476521252,350.8160556976435,350.8970617411998,350.97855955837645,350.81900633936493,350.90911019489573,350.99768408805244,351.08030205625295,350.9240546487997,351.0074649189439,351.09259639675895,351.1788753463546,351.03057827909527,351.11713043625764,351.21089527318355,351.2948246377047,351.1359817583669,351.2243097647135,351.307774676371,351.3893544558177,351.22447368925356])
        expected['rhoSH'] = np.array([327743.56041259767,328264.4966186523,328804.7303588867,329309.40705566405,327946.1116088867,328462.8431884766,329007.79194335936,329528.7767578125,328135.9274047851,328669.76914062497,329199.3819458008,329737.8900878906,328291.8145385742,328852.0506347656,329376.3651245117,329890.90932617185,328487.8765136719,329023.95423583983,329577.99276123045,330110.0116821289,328679.73386230465,329194.0836303711,329747.1985961914,330278.97447509767,328802.1298095703,329332.95782470703,329836.68665771483,330333.5130981445,328807.93851318356,329354.3212158203,329858.12296142575,330370.86865234375,328782.75936279295,329328.58306884766,329813.1844970703,330318.12854003906,328725.0125854492,329232.3870483398,329724.6442993164,330217.48485107423,328624.97650146484])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_90S_90_120000(self):
        """Test for latitude = -90, longitude = 90, rho = 120000"""
        lat = -90
        lon = 90
        rho = 120000

        expected = {}
        expected['latNH'] = np.array([-75.8068582532915,-75.79483712035227,-75.78302089308815,-75.77143689225582,-75.79725500731846,-75.78517923286589,-75.77498859062422,-75.76505749557103,-75.79554746002594,-75.78229689303612,-75.77209259041612,-75.76370511811535,-75.79595727137615,-75.78707802545514,-75.77563062840619,-75.76720217497041,-75.80199515860244,-75.79550647889093,-75.78922270485452,-75.78315749687155,-75.81811440504367,-75.80915319685263,-75.80321093227471,-75.79751455450693,-75.83300421743431,-75.82681606604626,-75.8222534996807,-75.81792315974693,-75.8521833886237,-75.84737493544802,-75.8427304068124,-75.84073599157475,-75.8803784095175,-75.87787856028129,-75.87555629596349,-75.87345259769913,-75.91267154391335,-75.90675660009211,-75.90379229799231,-75.90104656194598,-75.94038845156524])
        expected['lonNH'] = np.array([29.128984376014763,29.070319881233527,29.011935424208257,28.9538207596552,29.085172127583718,29.0263437082624,28.95006074051711,28.873999753919847,28.98707353562941,28.91031928483139,28.8337187132897,28.746497197588635,28.848130412438426,28.759990236293994,28.67223596583767,28.584549997273047,28.660593908397384,28.5470471360878,28.433648920392663,28.32028827073796,28.395142021399426,28.284079730400432,28.173005486570393,28.062144686151914,28.13905944639543,28.02713313646643,27.906602495730507,27.785983062535376,27.853193831515593,27.731403020877803,27.610085200840036,27.469840926612164,27.516349392218075,27.374851778277506,27.233521503971602,27.092155371172556,27.14586456371095,27.012209714484847,26.87855145016416,26.745121997180668,26.79737635942585])
        expected['rhoNH'] = np.array([259169.2380126953,259157.98516845703,259146.90245361326,259136.08708496092,259160.19685058593,259148.8953979492,259139.34384765624,259130.05964355468,259093.5061279297,259146.1247192383,259136.62177734374,259128.7958251953,259093.84638671874,259085.6072631836,259139.82993164062,259131.80954589843,259099.02318115233,259092.77700195313,259086.7981689453,259080.9408569336,259048.32462158203,259104.88049316406,259099.2662231445,259093.7977783203,259061.69193115234,259055.8103149414,259051.50847167967,259047.35245361328,259079.1180419922,259074.59746093748,259070.2227050781,259068.2783691406,259039.98828125,259037.58216552733,259035.39478759764,259033.3775390625,259004.60136718748,259064.02513427733,259061.1329345703,259058.435168457,259029.70760498047])
        expected['latSH'] = np.array([-67.90639210071609,-67.87263730583788,-67.83869126566293,-67.80470424435293,-67.78272469560383,-67.74847812710539,-67.715679558711,-67.68266242426316,-67.66180302653794,-67.62859464679332,-67.59526332364368,-67.56380347232658,-67.54461064075886,-67.51287758187496,-67.48113086261276,-67.44915191691877,-67.43124316091499,-67.40090346062178,-67.37041349616686,-67.33977326755016,-67.32142737943951,-67.30082752890274,-67.2801593764743,-67.25943658253249,-67.25093982720497,-67.2300531087231,-67.214220730227,-67.19829272908254,-67.19468638920077,-67.17867642578625,-67.16261182085839,-67.15034480110904,-67.15027649921734,-67.13795483795462,-67.12553755404355,-67.11309294937578,-67.11633045904236,-67.10728728858129,-67.09818947660682,-67.08909166463235,-67.09209694786716])
        expected['lonSH'] = np.array([155.30154919657,155.28167334608526,155.26157892954708,155.24133424884715,155.2706357603865,155.25040474006494,155.25224889114082,155.25406572146005,155.3051418760734,155.3066035365558,155.30777832909303,155.29123561092325,155.32381561326423,155.30713629131105,155.2897739504409,155.27238428881404,155.3217665565132,155.32131576402801,155.3204278394359,155.3191027827369,155.36699606919706,155.35257070966998,155.337667236901,155.32232663202515,155.35695569111712,155.34127357678278,155.32463523596462,155.30775100833637,155.34102768997266,155.32378829250754,155.3061664044489,155.28437810099658,155.31351568799585,155.29139953546334,155.26898285460737,155.24607440013114,155.26402413726993,155.23056987071521,155.1967057928103,155.16237726204182,155.17979424442535])
        expected['rhoSH'] = np.array([6371.2,6371.199620246887,6371.199620246887,6371.199620246887,6371.199620246887,6371.199240493775,6371.2,6371.199620246887,6371.199620246887,6371.199240493775,6371.2,6371.199620246887,6371.2,6371.199620246887,6371.2,6371.2,6371.199620246887,6371.199620246887,6371.2,6371.2,6371.199620246887,6371.2,6371.2,6371.2,6371.2,6371.199240493775,6371.2,6371.199240493775,6371.2,6371.2,6371.2,6371.2,6371.2,6371.199240493775,6371.2,6371.199240493775,6371.2,6371.199620246887,6371.199620246887,6371.2,6371.199240493775])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_60S_90_120000(self):
        """Test for latitude = -60, longitude = 90, rho = 120000"""
        lat = -60
        lon = 90
        rho = 120000

        expected = {}
        expected['latNH'] = np.array([-65.52012891038873,-65.52544279756302,-65.53130309987088,-65.53697215688197,-65.55526340347927,-65.56087781897702,-65.57064498949015,-65.58102687702856,-65.6038670296131,-65.6138391058013,-65.62364725744945,-65.63565473001032,-65.6604209959408,-65.67210061942151,-65.68358899760548,-65.6956374513014,-65.72679677429497,-65.7446508887854,-65.76234107873572,-65.78060500457633,-65.81214681816346,-65.82841632876642,-65.84487708466617,-65.86120123678248,-65.89136335215727,-65.90771482503027,-65.92565090179073,-65.94381920498296,-65.97570252802859,-65.99317415192547,-66.01120585133432,-66.03321272084008,-66.06915317625271,-66.090859517435,-66.11275710391405,-66.13450442623139,-66.16892857964825,-66.18812141121597,-66.207887978674,-66.22784579142876,-66.26220164295393])
        expected['lonNH'] = np.array([58.85465407792184,58.79511531892684,58.7284799933842,58.669528630657815,58.75695505203398,58.689780141546905,58.621327985685035,58.54569730100549,58.62412153305557,58.54752779170305,58.478460918815884,58.399913743360734,58.47573567333705,58.39604102610134,58.32393471903351,58.244697694472194,58.30803403864572,58.21536886217616,58.13016908246942,58.03766100035077,58.10043726901235,58.01210243247658,57.923897369535034,57.84325332600469,57.91099514219288,57.82171090936247,57.731354336832375,57.641086556761486,57.707195957738044,57.623136819622694,57.5317762092846,57.434411862666074,57.49379352731016,57.39505631266846,57.296373739540115,57.20535122356594,57.26200422763661,57.17498761761065,57.08062855422692,56.98638901915367,57.05007711806945])
        expected['rhoNH'] = np.array([257977.31147460936,257952.37536621094,257989.65800781248,257964.94063720704,257933.29656982422,257970.43338623046,257941.3412597656,257974.46788330076,257938.71640625,257971.5027709961,257942.11899414062,257973.81166992188,257936.84498291014,257968.19739990233,257937.37967529296,257968.8050048828,257925.47061767578,257949.94494628906,257912.34635009765,257936.9178955078,257893.29185791014,257920.05078125,257946.83400878907,257911.3741821289,257870.1542602539,257896.40279541016,257921.84929199217,257947.19857177735,257904.90926513672,257867.6995361328,257892.7328613281,257914.77677001953,257869.10917968748,257890.39965820312,257911.69013671874,257870.76186523438,257889.45179443358,257850.63798828123,257873.87280273438,257897.13192138672,257853.23853759764])
        expected['latSH'] = np.array([-65.4030594680147,-65.36853969194948,-65.33392429323584,-65.29933621527891,-65.27795772317677,-65.24334232446313,-65.21039349190698,-65.17743099897251,-65.15771907302786,-65.12481122160673,-65.09188970980728,-65.05929604708797,-65.03985732871013,-65.00733196788252,-64.97482026743324,-64.94233588774068,-64.92685867908142,-64.89839045062081,-64.87008614670029,-64.84191844656314,-64.82660516244397,-64.80876470833189,-64.79107451838158,-64.77350727183631,-64.76853489412053,-64.75121353438539,-64.73979345809312,-64.72856462709763,-64.7295481743381,-64.71857889053106,-64.70759594634566,-64.70083405906738,-64.706202587755,-64.6996865872868,-64.69318424719694,-64.68679119013382,-64.69480983221942,-64.69088930363583,-64.6869551146739,-64.68300726533363,-64.69120349233765])
        expected['lonSH'] = np.array([145.44090071447096,145.44158373338797,145.44225309192663,145.44301807311365,145.48011966068518,145.4813900758708,145.50502253039903,145.5286959660623,145.5889928760552,145.61328102874373,145.6377331059724,145.64491846497924,145.68905514739586,145.69670495926627,145.70445039378507,145.71211386603383,145.77631764423194,145.80395258961383,145.8315875349957,145.85922248037755,145.92520210775987,145.93458678767948,145.9438758449507,145.95323320411362,146.00164558495067,146.01171328378726,146.01959532208946,146.02729977547324,146.07519306193336,146.0834985719641,146.09185872350818,146.094864006743,146.13885042499788,146.14211525542115,146.1449702744942,146.14738816146038,146.1807331449884,146.1713074839338,146.16108952093543,146.15013389750675,146.1841072584384])
        expected['rhoSH'] = np.array([6371.2,6371.199620246887,6371.199620246887,6371.2,6371.2,6371.199240493775,6371.199620246887,6371.2,6371.2,6371.199620246887,6371.199620246887,6371.199240493775,6371.199620246887,6371.2,6371.2,6371.199620246887,6371.199620246887,6371.199240493775,6371.2,6371.199620246887,6371.2,6371.2,6371.199620246887,6371.2,6371.199620246887,6371.2,6371.200759506225,6371.2,6371.199620246887,6371.199240493775,6371.2,6371.200759506225,6371.2,6371.199240493775,6371.199620246887,6371.2,6371.2,6371.199620246887,6371.199620246887,6371.2,6371.199620246887])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_30S_90_120000(self):
        """Test for latitude = -30, longitude = 90, rho = 120000"""
        lat = -30
        lon = 90
        rho = 120000

        expected = {}
        expected['latNH'] = np.array([-51.78684513116252,-51.91977427278931,-52.04662454605477,-52.17520968736943,-52.302906904092,-52.423213856132605,-52.55846526207719,-52.69173591316249,-52.8250475453828,-52.954001516912626,-53.08116597887994,-53.198317383524,-53.317162675082216,-53.4279073622848,-53.54089235153515,-53.64921915177155,-53.784538859607835,-53.9109383403881,-54.03609472673941,-54.1601173016885,-54.291065688456,-54.39249399763068,-54.49679098625677,-54.59690789911082,-54.705166397455514,-54.80692255571037,-54.89902082647882,-54.99073660665377,-55.09144091577642,-55.18176333736068,-55.275077381801395,-55.36455285992855,-55.463727206677135,-55.55210985453709,-55.643579747901924,-55.73157990516836,-55.81870579822103,-55.8977993888098,-55.979980224903386,-56.05878694754699,-56.14535276508772])
        expected['lonNH'] = np.array([67.02278851388088,66.88610276821059,66.75623355133196,66.62098897557654,66.60290946484352,66.47415356879961,66.32789872810213,66.1822449440516,66.15575064026112,66.01026761093985,65.86526269486048,65.72338600542098,65.7022192491831,65.56602527713305,65.42416224807188,65.28885620061394,65.24890642415853,65.09205112986919,64.93548270352498,64.77890061680245,64.74035102912688,64.60631539685455,64.46594134903246,64.3320969620569,64.31759647044895,64.1763208376564,64.04806354542191,63.91979259280907,63.912279384722055,63.78284046976114,63.64697434679125,63.517241733696025,63.509585091636445,63.37845911995054,63.240769336472255,63.10945894967875,63.11643257282134,62.99212996011628,62.861311346943026,62.73693360215709,62.743709149813746])
        expected['rhoNH'] = np.array([255658.7880859375,255687.34552001953,255658.9096069336,255691.5987548828,255677.67244873047,255656.1875366211,255671.8880493164,255689.1197265625,255658.39921874998,255678.1342285156,255699.13305664062,255732.45411376952,255717.19107666015,255692.1091430664,255726.81553955076,255701.66069335936,255715.34395751954,255719.91314697266,255722.63521728516,255726.7183227539,255741.42236328125,255718.77084960937,255755.83475341796,255732.50272216796,255720.71518554687,255757.48743896483,255746.72067871093,255735.6622680664,255736.14835205078,255724.21499023438,255771.51096191406,255759.52899169922,255759.04290771484,255745.74851074218,255791.56192626953,255776.95510253907,255731.94372558594,255733.66932373046,255794.72147216796,255795.42629394532,255748.32475585936])
        expected['latSH'] = np.array([-63.63428635979153,-63.5861198657646,-63.53918280578827,-63.49503246299332,-63.47414574451142,-63.439380081636045,-63.4221270237926,-63.4702115555495,56.0084127085564,56.05491946661501,56.107904659101386,56.15312392650146,56.30637629600362,56.355816620310755,56.41154071865431,56.47029742098934,56.64737690541109,56.72624168466264,56.806834501774205,56.89592065911869,57.10355499479249,57.1875765668674,57.272451912588565,57.365192221139,57.579766029009534,57.68422352708112,57.77519140154194,57.869663163046965,58.08918885806576,58.19377271463699,58.302403458291465,58.398190031211726,58.62183433030003,58.725598564170866,58.8320743831422,58.94130276834905,59.164865105167316,59.26379698020037,59.36434077987754,59.469693032730405,59.70389680427555])
        expected['lonSH'] = np.array([142.59820330266834,142.59482918921833,142.61817477580144,142.6802338746002,142.81950143177676,142.99046106670215,143.37317022627633,144.51207694961926,166.2328981329602,165.81066949884837,165.40587150749838,165.06623352083034,164.76377908400383,164.43905823048308,164.1290086232995,163.82537939393578,163.4533116690885,163.08258266131855,162.7119219554403,162.35746245827332,162.02985926492283,161.73979479125072,161.44669771358713,161.1676435048571,160.91050054298447,160.65333026035515,160.40606375202233,160.1628816968132,159.9380728504714,159.7148349476387,159.49646013949507,159.28544827527668,159.09230418592705,158.90025292684464,158.71104302645696,158.5253301829243,158.39103500346351,158.2558792201673,158.12320962572898,158.0021923340147,157.89188477891898])
        expected['rhoSH'] = np.array([6371.199620246887,6371.2,6371.199620246887,6371.2,6371.2,6371.199620246887,6371.2,6371.2,258803.07094726563,258695.0630859375,258623.1469604492,258542.72436523438,258449.1531982422,258334.29155273436,258260.26096191406,258168.65843505858,258022.12841796875,257960.6387939453,257816.3447631836,257705.90648193358,257580.35098876953,257521.5834350586,257385.99030761718,257291.1067138672,257184.60571289062,257109.57864990234,257028.8887084961,256929.6060546875,256813.7479370117,256740.83533935546,256654.65264892578,256568.4942626953,256465.46876220702,256410.03088378906,256339.1841430664,256254.62983398436,256148.83365478515,256097.50318603514,256036.2322998047,256024.3475463867,255929.3181274414])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_0N_90_120000(self):
        """Test for latitude = 0, longitude = 90, rho = 120000"""
        lat = 0
        lon = 90
        rho = 120000

        expected = {}
        expected['latNH'] = np.array([28.63658328898662,28.632232458485326,28.608401928471153,28.54999698087837,45.159224117692254,28.160764990646854,28.326765908234847,17.18044359790764,-9.164668370531231,-29.260143588030104,-36.17614725477489,-38.99331341946001,-40.799283737903096,-42.134285192317094,-43.18698126795613,-44.06735167083576,-44.93391143121363,-45.67490499388995,-46.32904587108044,-46.91760327186043,-47.46605380183411,-47.87496356706444,-48.26141567030376,-48.62811486646339,-48.981235646553046,-49.309931670170755,-49.58987380349291,-49.86026733235536,-50.136111352175504,-50.384730237963964,-50.62606814209718,-50.84977049779346,-51.078882363312346,-51.291738378606624,-51.49593371403333,-51.70007440794669,-51.88942091211777,-52.05943798093773,-52.226613691062965,-52.391221250060255,-52.56955748928931])
        expected['lonNH'] = np.array([77.77349260710261,78.08391787469053,78.45874499596248,78.87440981828195,97.84403080394176,79.69693534908073,80.05870314865963,74.91897896803586,68.26593758433657,65.24036868769602,64.33882469838935,63.8656906643934,63.617153740874976,63.300813529465835,63.02142464146646,62.7577725093148,62.605411479499324,62.34764014022304,62.1007697828621,61.85999195424081,61.747908549960904,61.55817955519629,61.36803391889231,61.17732137688721,61.123581448497546,60.93655037845509,60.772625838374786,60.607949977485774,60.57243299380171,60.41095366144427,60.248927913953224,60.08472333611695,60.05729329641018,59.89111479390377,59.72984036722143,59.56269197785287,59.547194278626115,59.3961856262663,59.24496523804222,59.09341700073798,59.07750265997185])
        expected['rhoNH'] = np.array([133144.1391113281,132604.42791137696,131938.84526367186,131185.19635009766,113115.43740234374,129739.99575195312,145569.55159301756,218311.9833984375,266010.9430053711,257999.50120849608,256150.8265991211,255647.46232910155,255361.59633789063,255247.3666015625,255103.43713378906,255038.98239746093,255022.40693359374,254984.05490722656,254934.08547363282,254900.32694091796,254902.8302734375,254870.335559082,254870.01960449218,254899.25755615233,254856.1662109375,254874.224230957,254865.57193603515,254870.4327758789,254905.23638916016,254875.73109130858,254856.65229492186,254874.15131835936,254856.74951171875,254889.778918457,254870.62720947264,254916.78088378906,254915.07958984375,254902.90318603514,254895.02862548828,254891.50451660156,254906.76755371093])
        expected['latSH'] = np.array([14.077263261728234,14.103299942844316,14.444515703210655,15.086942805974545,16.32447746093247,17.568466644656056,19.199508988265933,19.78258857733158,15.894093580951619,14.603017073089958,14.825285089060515,8.180610687094486,2.8109618484405843,0.4565478302129975,-1.2915298048250463,0.6445351267392567,4.751582516181287,11.700439392833843,17.539479321818533,23.493232277913577,29.28950839250482,33.9764456726701,38.42559674707056,44.330592397775476,52.44171524473242,62.427229830143034,64.13853372668973,63.72523898001226,64.56208912504786,65.85969017111417,66.24328554773314,66.54192703145547,66.8943511322498,67.17264548243467,67.39461126253445,67.60062855092225,67.86251166407888,67.99742497565956,68.12429061685067,68.24332886125295,68.45996367870553])
        expected['lonSH'] = np.array([139.52818353490935,139.8178655179879,140.25040773774649,140.80745064569604,141.7654393183037,142.5742703198166,143.5799883543443,143.56489363627858,139.59341184148295,138.28032163392635,138.44693726853964,132.68037247683796,127.17447502462063,124.8022137220918,122.18166138285467,118.06655437019204,115.27920881142319,112.46421464689413,110.6402877611231,109.09039489504215,107.6828568316426,107.06992931590399,106.99762493335024,107.64182788529833,110.58233360601554,122.51379982181406,127.66993694701335,127.5308059936202,129.58400183926105,133.6271732995851,134.9768050192013,136.08186132501766,136.8794771559134,137.93893511883078,138.78044174533304,139.57334474570146,140.24032637853153,140.89498635009892,141.51968911196664,142.11866938142006,142.65232572165152])
        expected['rhoSH'] = np.array([221564.29842529297,220469.71020507812,220001.6356323242,220177.5251220703,221390.49909667968,223276.65078125,226313.26604003905,224474.2401977539,205091.47119140625,199491.18823852538,199066.32653198243,185953.5912963867,182243.56743774415,185233.9439575195,191998.44666137695,205204.53432617188,218527.8289916992,225831.16794433593,230561.2025878906,230946.76440429688,220912.02232666014,219277.20036621092,213185.88752441405,213534.55556640626,219246.11529541016,248026.44318847655,255124.4845703125,246547.09519042968,247594.29022216797,256187.50163574217,256140.40009765624,256139.1848876953,255664.06209716797,256144.94498291015,256102.46124267578,256097.77053222657,256156.46517333985,256115.26955566407,256095.07276611327,256095.0970703125,256086.17742919922])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_30N_90_120000(self):
        """Test for latitude = 30, longitude = 90, rho = 120000"""
        lat = 30
        lon = 90
        rho = 120000

        expected = {}
        expected['latNH'] = np.array([78.69128396574021,78.68101221500216,78.67095732277025,78.66081619940007,78.6351065135905,78.62493550814271,78.6131269648414,78.60142428947223,78.574055721468,78.56246489044648,78.55074087073615,78.53444830824473,78.50230116914243,78.48593347457013,78.46957687905524,78.45332359015156,78.41807298384512,78.39850876074127,78.37876866026627,78.35919163055773,78.32437730258454,78.30284342367878,78.28123868156038,78.2595622224557,78.22314963021671,78.2014578031864,78.17962766482539,78.15772837079903,78.12160862292072,78.09946173453694,78.07701602537699,78.06014801944801,78.02943692761869,78.01183126125933,77.99379273166133,77.97514973032177,77.9456262376344,-51.77685939459596,-51.91788914057838,-52.06132311314866,-52.22688689862974])
        expected['lonNH'] = np.array([184.05933669685666,184.07448605643575,184.08986764244662,184.10459353029717,184.30898011102062,184.32302297995417,184.31022320544957,184.29667211013626,184.4715659340236,184.45790555568357,184.44324796972472,184.33840456596502,184.42185581724425,184.3168211681878,184.2118821417797,184.1070660587767,184.1305755698999,183.96557185993072,183.7998031687745,183.63320119453957,183.6551670829103,183.45418193639352,183.25303286533665,183.05177451125306,183.0383463593448,182.83707434488286,182.59308632735167,182.34959008344072,182.2934732492199,182.05116545822452,181.81015540317145,181.4994910789626,181.37482646623153,181.06935308579187,180.7695077812283,180.47899251507098,180.39948911313203,54.938035777634354,54.86339888547904,54.78318514386641,54.85603594155377])
        expected['rhoNH'] = np.array([6371.199620246887,6371.199240493775,6371.199240493775,6371.199240493775,6371.198860740661,6371.198860740661,6371.1984809875485,6371.199240493775,6371.2,6371.199240493775,6371.198860740661,6371.198860740661,6371.199240493775,6371.199620246887,6371.199620246887,6371.2,6371.199240493775,6371.199240493775,6371.199620246887,6371.198860740661,6371.199240493775,6371.199620246887,6371.199620246887,6371.198860740661,6371.199620246887,6371.199620246887,6371.199620246887,6371.199240493775,6371.199620246887,6371.2,6371.199240493775,6371.2,6371.2,6371.199240493775,6371.198860740661,6371.199240493775,6371.199240493775,254966.06979980468,254928.08233642578,254946.57783203124,254951.63310546873])
        expected['latSH'] = np.array([-14.925646067491854,-16.22067042469378,-16.216367405516664,-17.3814952250833,-17.66684686822809,-14.423531540847534,-8.019348099557646,-10.483748653989949,12.584498097865264,18.26181280768239,22.827876230105957,26.748466285395807,30.633846715514245,34.61261290705968,38.88780247839449,43.68629040808442,50.43321615702013,58.72306114889421,64.35387934593648,66.57578769426581,67.84559157795746,68.52190495674108,69.04021898454938,69.45447678789982,69.87411678031624,70.16254371613482,70.37686822210065,70.56229932033004,70.80878377200288,70.95605972598128,71.0895062544377,71.18485740279837,71.35481983010496,71.43332943951967,71.50510448241275,71.56877721340291,71.695963873485,71.73526478196925,71.77119157700352,71.80387915482392,71.91547932322004])
        expected['lonSH'] = np.array([99.29184649287687,96.41234802182622,95.00018592035858,96.31499050539685,95.05519626393385,92.82048131091074,91.2763258037326,91.16591579579935,89.48400220325121,89.25952120598957,89.05225911562553,88.9397044282929,88.75222939595439,88.64634097325168,88.58905617668279,88.69167976896223,89.44350601166221,95.29311224329291,107.93839469906028,116.00327716533624,121.00300295854225,124.12666703204253,126.67738751720545,128.83753046487035,130.64399255693368,132.32353607383982,133.65090137676174,134.85439436889632,135.92502652129582,136.98009950276605,137.9802714236877,138.7991291429022,139.5490975741479,140.2996670620406,141.01823028348264,141.689159765653,142.2483336926236,142.81212482747313,143.35587618729784,143.88119969674187,144.35883482540086])
        expected['rhoSH'] = np.array([146642.26603393554,162472.83049926758,174005.91430664062,168248.4560974121,179255.02588500976,203733.52266845704,229206.7538696289,234666.8137451172,256314.51538085938,257645.21889648438,258994.56373291014,260271.31192626953,261775.47451171876,263318.0377319336,264970.6017578125,266737.15247802733,268610.2041992187,266921.74287109374,262246.4169799805,260347.28685302733,259507.6496826172,259067.67076416014,258776.67658691405,258553.87999267576,258378.8168457031,258234.49851074218,258158.37775878905,258040.01630859374,257988.17545166015,257916.11350097656,257883.78891601562,257783.9715698242,257778.64895019532,257726.5407470703,257694.48350830076,257623.24790039062,257626.26162109376,257570.53209228514,257525.86097412108,257491.4219238281,257479.7559082031])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_60N_90_120000(self):
        """Test for latitude = 60, longitude = 90, rho = 120000"""
        lat = 60
        lon = 90
        rho = 120000

        expected = {}
        expected['latNH'] = np.array([81.22530293083517,81.22124921356276,81.21671567550116,81.21200882138938,81.19306273040542,81.18876654141746,81.18253570134712,81.17604531408833,81.155106515414,81.14919071781912,81.14281132113433,81.13010033908894,81.10291447864499,81.09072856739205,81.07803380704593,81.0651708532915,81.03383821424772,81.01718535927758,81.00006719767023,80.98245128602713,80.95077372243026,80.93050940493647,80.90976697420079,80.88854643022322,80.85351353619657,80.83244923279625,80.80962957077924,80.78632155023656,80.74953073627229,80.72623637610796,80.70234266684396,80.68149607572344,80.64749624780876,80.62640376987812,80.60472731077344,80.58241991294418,80.5504230380036,80.53082039508567,80.51065511533486,80.48999976951109,80.457675899264])
        expected['lonNH'] = np.array([180.9367654536236,180.87552597752526,180.81414989764352,180.75427645937918,180.9025735266385,180.84062371086648,180.74512400589137,180.65123622556038,180.7647266488093,180.66955479291434,180.5746971257212,180.37505069628173,180.38345182896086,180.18369611649464,179.984404856892,179.78734023895882,179.72984370652566,179.46195002689942,179.195736573809,178.9317224416313,178.8775590415131,178.59314996447378,178.3107353026721,178.03064290518822,177.96075640960063,177.68089623854854,177.37001334828625,177.06142540158507,176.96394494175064,176.6563951838033,176.35068957693187,175.96981090805528,175.79958893356024,175.4203631704628,175.04427929438353,174.6711597204041,174.53626348429634,174.1923634595862,173.8514140765975,173.513606580627,173.38663336395646])
        expected['rhoNH'] = np.array([6371.199620246887,6371.2,6371.198860740661,6371.199620246887,6371.200759506225,6371.199240493775,6371.199240493775,6371.199240493775,6371.2,6371.199240493775,6371.199620246887,6371.198860740661,6371.199240493775,6371.2,6371.199620246887,6371.2,6371.199620246887,6371.199620246887,6371.2,6371.2,6371.199240493775,6371.199240493775,6371.199620246887,6371.199240493775,6371.199620246887,6371.199620246887,6371.2,6371.199240493775,6371.199620246887,6371.2,6371.2,6371.200759506225,6371.199620246887,6371.199620246887,6371.199620246887,6371.199240493775,6371.199240493775,6371.199620246887,6371.199240493775,6371.199620246887,6371.2])
        expected['latSH'] = np.array([18.67480702603639,18.73980310617823,18.805454884480383,18.870894926918282,18.955862480193247,19.020599013146622,19.136678078090995,19.25303035060216,19.385877529958904,19.499757273990525,19.613971697291475,19.7532938959814,19.905853001282807,20.04290757716828,20.17882834165154,20.314516879703007,20.52168334741866,20.715763172684575,20.908231073306368,21.099087049284037,21.291753025391756,21.466339490766444,21.639348182442873,21.811359666500465,21.980550282430855,22.147978709555375,22.33221623222731,22.514370547202375,22.689742484331617,22.868433893397494,23.046585717518937,23.25902509127384,23.46018782270906,23.669157460365597,23.878407135778104,24.089610245293244,24.277563390873652,24.48224366973143,24.700714100523456,24.942830646222063,25.248802630471133])
        expected['lonSH'] = np.array([42.978654578698,42.878401062060554,42.77610190376669,42.67368663225693,42.563017077135214,42.46142825851503,42.28233045319354,42.10105040243223,41.909941709455275,41.729798885190775,41.54714255131171,41.32342995033169,41.08760059376408,40.86283955874647,40.63729646706889,40.40928767710094,40.062307237075125,39.7272181563943,39.38933211324835,39.04850225857013,38.69335632739156,38.37198568165871,38.04855914898568,37.722284427428754,37.38230151620762,37.05674054941896,36.69346669312807,36.32954055377146,35.95180718700766,35.588639198648906,35.22387294602438,34.78430587670445,34.33442522173781,33.89865573759641,33.463661479925804,33.02928876946967,32.62803906139352,32.24031654296858,31.85719757204422,31.48196405451665,31.13810159584694])
        expected['rhoSH'] = np.array([253933.77324218748,254463.45895996093,255006.75502929688,255554.64459228516,256922.04744873047,257466.97189941406,258598.55111083985,259751.7367553711,261753.98959960937,262911.91456298827,264092.9771240234,265602.4866333008,268000.84931640624,269540.42312011716,271095.5030029297,272678.0952392578,276033.4600708008,278517.0818847656,281048.4857543945,283628.8625854492,287202.0659545898,289690.20834960934,292221.41778564453,294804.5895996094,298424.0924682617,301073.71196289064,304100.4111083984,307173.4826660156,311360.5371948242,314533.0372314453,317767.99906005856,321794.3542236328,327027.8260498047,331219.5955932617,335501.9225830078,339879.2789916992,345126.28825683595,349228.6669555664,353371.1475830078,357519.3153930664,362647.5500366211])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_90N_90_120000(self):
        """Test for latitude = 90, longitude = 90, rho = 120000"""
        lat = 90
        lon = 90
        rho = 120000

        expected = {}
        expected['latNH'] = np.array([78.8984418957194,78.90707440105666,78.91558737808343,78.92395179849576,78.89862204195877,78.90718368408338,78.91759374615212,78.92781000160318,78.90424499519298,78.9146729865083,78.9249327844153,78.93787172402425,78.91678351496184,78.9297173319289,78.94248295548765,78.95502403657744,78.93649117203826,78.95209815429173,78.96743961294123,78.98257531214198,78.96340126359446,78.979382198705,78.99510017153248,79.01055518207694,78.99158603920452,79.00691042238108,79.02556537655168,79.04393602409809,79.02769895689367,79.04587409027508,79.06365221891097,79.09216569737484,79.08588192333842,79.11393863290154,79.14157101696247,79.16872528778151,79.16107889100567,79.1878233504745,79.21402054103609,79.23979852873737,79.23086805639758])
        expected['lonNH'] = np.array([222.03207391586602,221.9699874963106,221.90740930313495,221.84420273255566,221.79726567257933,221.73515193226723,221.64709713348742,221.55822271200722,221.48625983891196,221.39868315337407,221.31038246778414,221.13775626670125,220.9828065951903,220.81105465832118,220.63863336291337,220.46533780329182,220.27212541205049,220.0598431326465,219.84644070221862,219.6319044603885,219.4388286729306,219.20795461860584,218.9758647906088,218.74253186818282,218.5328723814201,218.29949847785912,218.03881747799642,217.77659285538127,217.54065080069236,217.27835787618554,217.01458963081797,216.69424009836604,216.40249539815812,216.0810666958173,215.75787580467065,215.43290906433978,215.1539504782581,214.84212502189035,214.5286329993651,214.21382958051922,213.935089560491])
        expected['rhoNH'] = np.array([6371.2,6371.199620246887,6371.199620246887,6371.199620246887,6371.199620246887,6371.199620246887,6371.198860740661,6371.199620246887,6371.2,6371.199240493775,6371.199620246887,6371.198860740661,6371.199620246887,6371.2,6371.199240493775,6371.2,6371.199620246887,6371.199240493775,6371.2,6371.199620246887,6371.2,6371.2,6371.2,6371.199240493775,6371.199240493775,6371.199620246887,6371.2,6371.199620246887,6371.199620246887,6371.199620246887,6371.199620246887,6371.2,6371.199620246887,6371.199240493775,6371.2,6371.2,6371.199620246887,6371.199240493775,6371.2,6371.199620246887,6371.199240493775])
        expected['latSH'] = np.array([73.76546679576927,73.6725284117329,73.5846785186282,73.49383358757244,73.72931460449239,73.6331455409786,73.54314926092722,73.4522309053379,73.6852137805689,73.59044832092957,73.49639490851119,73.41110975143982,73.64449902292645,73.55596098826288,73.46222688718821,73.37188226748916,73.6103702751912,73.51583191934176,73.42088545968942,73.32817076434837,73.57029926287802,73.47759993546262,73.39053380656517,73.30273513987925,73.55243319555656,73.45981583041119,73.37157149388192,73.28712474253118,73.54256527975319,73.45781287743708,73.37191471088771,73.28943334647064,73.54950987459179,73.46764834984191,73.38075980586288,73.30005941327188,73.57014899871629,73.48558784169694,73.40441787360051,73.32345622627376,73.60148932172288])
        expected['lonSH'] = np.array([350.3579412496324,350.43211710401874,350.4985885050213,350.56877552893235,350.38744766684687,350.46648661592224,350.5413454892256,350.61713326825605,350.4496570298073,350.5321657149811,350.6124887396204,350.6834680654752,350.5244612615973,350.6013145501383,350.684424291959,350.7623977315239,350.6063142486107,350.7001883685634,350.7917948657116,350.8799862682748,350.724476521252,350.8160556976435,350.8970617411998,350.97855955837645,350.81900633936493,350.90911019489573,350.99768408805244,351.08030205625295,350.9240546487997,351.0074649189439,351.09259639675895,351.1788753463546,351.03057827909527,351.11713043625764,351.21089527318355,351.2948246377047,351.1359817583669,351.2243097647135,351.307774676371,351.3893544558177,351.22447368925356])
        expected['rhoSH'] = np.array([327743.56041259767,328264.4966186523,328804.7303588867,329309.40705566405,327946.1116088867,328462.8431884766,329007.79194335936,329528.7767578125,328135.9274047851,328669.76914062497,329199.3819458008,329737.8900878906,328291.8145385742,328852.0506347656,329376.3651245117,329890.90932617185,328487.8765136719,329023.95423583983,329577.99276123045,330110.0116821289,328679.73386230465,329194.0836303711,329747.1985961914,330278.97447509767,328802.1298095703,329332.95782470703,329836.68665771483,330333.5130981445,328807.93851318356,329354.3212158203,329858.12296142575,330370.86865234375,328782.75936279295,329328.58306884766,329813.1844970703,330318.12854003906,328725.0125854492,329232.3870483398,329724.6442993164,330217.48485107423,328624.97650146484])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_90S_180_120000(self):
        """Test for latitude = -90, longitude = 180, rho = 120000"""
        lat = -90
        lon = 180
        rho = 120000

        expected = {}
        expected['latNH'] = np.array([-75.8068582532915,-75.79483712035227,-75.78302089308815,-75.77142323187746,-75.79725500731846,-75.78517923286589,-75.77498859062422,-75.76504383519267,-75.79554746002594,-75.78228323265779,-75.77209259041612,-75.76370511811535,-75.79594361099782,-75.78707802545514,-75.77563062840619,-75.76720217497041,-75.80199515860244,-75.7954928185126,-75.7892090444762,-75.78315749687155,-75.81811440504367,-75.80915319685263,-75.80321093227471,-75.79751455450693,-75.83300421743431,-75.82681606604626,-75.8222534996807,-75.81792315974693,-75.8521833886237,-75.84737493544802,-75.8427304068124,-75.84073599157475,-75.8803784095175,-75.87787856028129,-75.87555629596349,-75.87345259769913,-75.91267154391335,-75.90674293971375,-75.90379229799231,-75.90104656194598,-75.94038845156524])
        expected['lonNH'] = np.array([29.12898779110935,29.070326711422695,29.01193883930284,28.953827589844373,29.08517895777289,29.026347123356985,28.950064155611695,28.873996338825265,28.987076950723996,28.910322699925977,28.833722128384284,28.74649378249405,28.84813382753301,28.759997066483166,28.672246211121426,28.584555119914924,28.660593908397384,28.547050551182387,28.43365233548725,28.32029339337984,28.395147144041303,28.28408485304231,28.173005486570393,28.062153223888377,28.1390662765846,28.0271399666556,27.90660932591968,27.78598647762996,27.853195539062884,27.731404728425094,27.610090323481913,27.469851171895918,27.516351099765366,27.374858608466674,27.233521503971602,27.092157078719847,27.145866271258242,27.012213129579433,26.878556572806037,26.745121997180668,26.797379774520437])
        expected['rhoNH'] = np.array([259169.2380126953,259157.98516845703,259146.90245361326,259136.0627807617,259160.22115478516,259148.8953979492,259139.34384765624,259130.03533935547,259093.5061279297,259146.10041503905,259136.62177734374,259128.7958251953,259093.84638671874,259085.6072631836,259139.78132324218,259131.80954589843,259099.02318115233,259092.77700195313,259086.7981689453,259080.9408569336,259048.32462158203,259104.90479736327,259099.2662231445,259093.7977783203,259061.69193115234,259055.8103149414,259051.48416748046,259047.35245361328,259079.1180419922,259074.59746093748,259070.1984008789,259068.2783691406,259039.98828125,259037.58216552733,259035.39478759764,259033.3775390625,259004.60136718748,259064.04943847656,259061.15723876952,259058.48377685546,259029.70760498047])
        expected['latSH'] = np.array([-67.90639210071609,-67.87263730583788,-67.83869126566293,-67.80471790473129,-67.78272469560383,-67.74846446672706,-67.715679558711,-67.68266242426316,-67.66180302653794,-67.62860830717167,-67.59524966326532,-67.56380347232658,-67.54455599924549,-67.51287758187496,-67.48113086261276,-67.4491655772971,-67.43124316091499,-67.40090346062178,-67.3703998357885,-67.33978692792851,-67.32142737943951,-67.30081386852441,-67.2801593764743,-67.25943658253249,-67.25095348758333,-67.2300531087231,-67.21420706984867,-67.19829272908254,-67.19468638920077,-67.17869008616458,-67.16261182085839,-67.15033114073069,-67.15027649921734,-67.13795483795462,-67.12552389366522,-67.11309294937578,-67.11633045904236,-67.10728728858129,-67.09817581622849,-67.08905068349733,-67.09211060824552])
        expected['lonSH'] = np.array([155.30156285694832,155.28167334608526,155.26160625030374,155.24132058846882,155.2706357603865,155.25040474006494,155.2522352307625,155.25406572146005,155.30511455531672,155.3066035365558,155.30791493287643,155.29123561092325,155.32388391515593,155.30713629131105,155.28976029006253,155.27237062843568,155.3217665565132,155.32130210364966,155.32044149981425,155.3190618016019,155.36699606919706,155.35257070966998,155.33768089727934,155.3223402924035,155.3569420307388,155.34125991640445,155.32477183974802,155.3077646687147,155.341041350351,155.32378829250754,155.30620738558395,155.28450104440162,155.31351568799585,155.29139953546334,155.2689965149857,155.24611538126615,155.26402413726993,155.23055621033689,155.19671945318862,155.16255484696023,155.17969862177696])
        expected['rhoSH'] = np.array([6371.199620246887,6371.199620246887,6371.199240493775,6371.199620246887,6371.199620246887,6371.199240493775,6371.2,6371.2,6371.200759506225,6371.198860740661,6371.199620246887,6371.199620246887,6371.199620246887,6371.199620246887,6371.2,6371.2,6371.199240493775,6371.199620246887,6371.2,6371.199240493775,6371.199620246887,6371.2,6371.2,6371.199240493775,6371.2,6371.199620246887,6371.199620246887,6371.199620246887,6371.2,6371.2,6371.199240493775,6371.2,6371.2,6371.199620246887,6371.199240493775,6371.199240493775,6371.199620246887,6371.2,6371.199620246887,6371.199620246887,6371.199620246887])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_60S_180_120000(self):
        """Test for latitude = -60, longitude = 180, rho = 120000"""
        lat = -60
        lon = 180
        rho = 120000

        expected = {}
        expected['latNH'] = np.array([-81.4980314169346,-81.50229345497667,-81.5044517947544,-81.50886409695823,-81.5056129269133,-81.509738361172,-81.5171149654756,-81.52690945674539,-81.53133541932758,-81.53858908022613,-81.54808304317243,-81.55891572319607,-81.56739881814522,-81.5780675736288,-81.59097663116012,-81.60170002815704,-81.61791489724664,-81.63800931378483,-81.65594539054527,-81.67620373162353,-81.69285573282002,-81.71001316801511,-81.72950652790632,-81.74681422726312,-81.76327498316286,-81.78261807889234,-81.80261687278212,-81.82495159136806,-81.8446908380694,-81.8645530281758,-81.88675114297834,-81.91252827690599,-81.9385376372654,-81.96640480907902,-81.9920589996016,-82.02006277519865,-82.0441733429688,-82.06736866539018,-82.09292723326436,-82.1162181783341,-82.14077953858947])
        expected['lonNH'] = np.array([76.546455952899,76.37006631758341,76.16607588783181,75.99278715839942,76.31164087942312,76.13370079116595,75.91147375633041,75.722837591833,76.04999682288745,75.82565925959838,75.63148381168408,75.4059646256686,75.73456502663791,75.50584931209087,75.30657854305575,75.07841607383148,75.3838006618119,75.15586358883024,74.89982028741397,74.6731399692396,74.97931685916376,74.73195472818257,74.51431075028012,74.26824635524123,74.58895788771919,74.36734556990895,74.11522279707627,73.89294795091655,74.21406246455552,73.95784157822084,73.73142080723491,73.46375252385128,73.77475835751865,73.53152849098532,73.25864877326498,73.0156579633526,73.34039247725168,73.07388532602695,72.83768372414957,72.57155906351836,72.89867048324862])
        expected['rhoNH'] = np.array([272483.73455810547,272445.23670654296,272466.64870605466,272429.244543457,272434.5914672851,272395.7047485351,272417.2625732422,272380.8548828125,272326.09752197267,272347.242175293,272309.1817993164,272333.0728271484,272281.3534912109,272304.4910888672,272268.42365722655,272292.12025146483,272240.93560791016,272204.50361328124,272228.2731201172,272192.81329345703,272141.6043457031,272167.02653808595,272132.02849121095,272157.86385498045,272108.74506835936,272074.23310546874,272102.1829345703,272071.0492553711,272024.6039306641,272052.0190673828,272020.3020874023,272050.9982910156,272006.9104736328,271976.91909179685,272007.0076904297,271978.06138916017,271934.02218017576,271963.67330322263,271934.3138305664,271965.13155517576,271921.0923461914])
        expected['latSH'] = np.array([43.814260832373776,43.7871962077876,43.760742885132146,43.73486671346155,43.79567247254759,43.76860443286683,43.74489684625772,43.72168103326884,43.78553647181929,43.76140199838705,43.73770465706169,43.71717310841663,43.78394845283726,43.76244360223548,43.74141686487559,43.72104582567603,43.791509472248464,43.77349143321797,43.75593101686187,43.738698449585925,43.809824624507854,43.79179975528819,43.77470037670106,43.758034715126236,43.829591191965875,43.81196588881265,43.79718194435416,43.78288635842132,43.85715100526687,43.841748928688496,43.82695473894625,43.81594788909877,43.89375057393438,43.881667969292636,43.86998834581191,43.858728778965144,43.93560255807364,43.9222871042867,43.90944634864707,43.897083706249354,43.97416922122212])
        expected['lonSH'] = np.array([200.65998853116758,200.6143628675119,200.5689011283963,200.5236442949558,200.5990769041494,200.55342391973704,200.49402859471462,200.43472889234056,200.4957361420071,200.43613591130958,200.37665862401713,200.3085343172354,200.36019786811738,200.2917730330122,200.22347114131207,200.15534683453035,200.1878175538446,200.1007599626836,200.01379799417103,199.9267540633884,199.95851444302895,199.87540470120823,199.7925681669543,199.70974529307873,199.74500272957434,199.6618110254836,199.5731824908135,199.4845539561434,199.5134866374676,199.42447561220396,199.33556020958875,199.232642919175,199.24650820319013,199.14305815802112,199.0396081128521,198.93628101108814,198.9553782200075,198.85781579790304,198.76032167769029,198.6629231801259,198.6811188040748])
        expected['rhoSH'] = np.array([265276.2756713867,265338.39720458986,265399.9597412109,265461.4979736328,265337.5951660156,265398.74453125,265457.29334716796,265514.845690918,265388.4638549805,265447.2071044922,265505.3913574219,265559.5897216797,265430.07264404296,265485.8264770508,265540.72966308595,265594.2718139648,265462.5673583984,265516.182421875,265568.6794921875,265620.37452392577,265487.0173828125,265538.2749389648,265586.8104248047,265635.953515625,265500.7735595703,265551.3262939453,265597.91744384763,265643.512121582,265504.34627685545,265551.6665527344,265597.82022705075,265640.30396728514,265498.27022705076,265542.406652832,265585.5466064453,265625.7943603516,265483.9550537109,265528.6747802734,265572.27651367185,265614.90607910155,265472.82373046875])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_30S_180_120000(self):
        """Test for latitude = -30, longitude = 180, rho = 120000"""
        lat = -30
        lon = 180
        rho = 120000

        expected = {}
        expected['latNH'] = np.array([-79.10753350932183,-79.12986822790776,-79.15217562573702,-79.1744147216746,-79.14365154965284,-79.16591796634708,-79.19590249680346,-79.22508106493774,-79.20306053505362,-79.23300408437495,-79.26208702986088,-79.29606039079252,-79.27849314424725,-79.31235722215217,-79.3457158660585,-79.37974386850351,-79.37280439630678,-79.41672251266996,-79.46137828946351,-79.50614334928378,-79.49949074503218,-79.54134614426602,-79.58404848695693,-79.62666886737782,-79.61739347048493,-79.66013679431086,-79.70606298629005,-79.75196185751253,-79.7460195929346,-79.79202774718382,-79.8380632221897,-79.89077862220387,-79.89301892425163,-79.94662224885789,-80.00022557346415,-80.05313221877506,-80.05193010548115,-80.10207735436737,-80.15150060320158,-80.20163419170947,-80.20056868219896])
        expected['lonNH'] = np.array([104.87760251686998,104.71471616554352,104.55294313505176,104.39218780274635,104.71146499549859,104.54807321017354,104.38505708525285,104.25292707575896,104.54609245531424,104.38300119831268,104.25276998140805,104.09897461186686,104.39779538805493,104.2467457545601,104.11731366978835,103.96183124352218,104.271730586544,104.14442269060413,103.98872852847369,103.8316136869959,104.14546770954715,104.02566619150512,103.87346908622973,103.72504907556535,104.07957004443486,103.92759833540208,103.78163036264974,103.63936435242753,104.00633675615398,103.85972674561967,103.7140114898666,103.60830748227148,103.96154437557703,103.82118398813328,103.68268824233293,103.57643098941504,103.9347222227064,103.79477847680201,103.68731228040103,103.55069483662244,103.91451169295233])
        expected['rhoNH'] = np.array([281771.389855957,281765.0464599609,281759.14053955075,281753.7450073242,281689.4604003906,281683.14130859374,281674.6834472656,281609.621105957,281601.11463623046,281593.09425048827,281528.78533935547,281523.36550292966,281514.39725341793,281510.14401855465,281445.2275024414,281439.90488281247,281431.2039794922,281364.00286865234,281355.5693115234,281346.89271240233,281338.3133300781,281275.7300170898,281270.2129638672,281266.71315917966,281203.9111083984,281198.75861816405,281195.5018554687,281194.1894287109,281133.6233642578,281130.3909057617,281127.9361816406,281069.6061035156,281069.2901489258,281066.90833740233,281065.7660400391,281007.654699707,281008.26230468747,281007.8977416992,280947.81776123046,280948.4253662109,280948.4253662109])
        expected['latSH'] = np.array([40.46382081805074,40.445392967670045,40.427361268261215,40.41500887114725,40.48385717798097,40.4651287992768,40.44922811888901,40.43924579741704,40.510614444054504,40.49440299005948,40.48386742326473,40.46946596939976,40.54229286142502,40.52697957730585,40.51744121812993,40.503015858602865,40.578755826309134,40.57234910886766,40.56127737222307,40.54914012606796,40.629760263936205,40.616308206365865,40.605106696127045,40.59182197819137,40.672254285857434,40.65904811509722,40.646931359509615,40.6354327360419,40.716735892827145,40.70384732586333,40.69166568347861,40.68679234350581,40.76493995289451,40.75413459362755,40.74357512117071,40.738585667982015,40.81549018294177,40.80329488017872,40.79679937027804,40.785328067567,40.862536525944826])
        expected['lonSH'] = np.array([195.71159843976338,195.67854032418052,195.64555051048936,195.61437752711743,195.67080855004008,195.63765481180883,195.59366839355394,195.55155344713165,195.59676929943714,195.55270091891222,195.5104493687065,195.46038408209031,195.499220537711,195.44895034541972,195.40051064382598,195.3503497345614,195.37381826454958,195.31050241094357,195.2455746326934,195.180114099688,195.20449787502497,195.14189236109263,195.07992888494226,195.0171457860915,195.04405673142136,194.98138291559732,194.91411921265103,194.8469101512181,194.8686164924004,194.80105226113065,194.7335973128876,194.6570445526701,194.66573255329436,194.58730832124428,194.50882944768082,194.4320034798965,194.44495351856287,194.37124211704008,194.29921094205312,194.22554052166538,194.23795780557646])
        expected['rhoSH'] = np.array([281252.2278564453,281237.28077392577,281221.3129150391,281262.26549072267,281225.73627929686,281211.421105957,281195.5018554687,281235.82252197264,281198.53988037107,281183.17962646484,281224.7884155273,281207.96990966797,281170.201184082,281155.32701416017,281197.1545410156,281180.1659057617,281142.37287597655,281183.37406005856,281165.0243896484,281149.0565307617,281170.2740966797,281156.00753173826,281136.41834716796,281121.5684814453,281142.32426757814,281127.2556640625,281111.50654296874,281094.201953125,281115.03065185546,281100.9099121094,281085.087878418,281126.81818847655,281089.70567626954,281075.0016357422,281059.5198608398,281101.0557373047,281064.7938720703,281050.77034912107,281093.52143554686,281077.6021850586,281040.8299316406])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_0N_180_120000(self):
        """Test for latitude = 0, longitude = 180, rho = 120000"""
        lat = 0
        lon = 180
        rho = 120000

        expected = {}
        expected['latNH'] = np.array([-76.4772276599499,-76.50307309576922,-76.5289321919669,-76.55472298627288,-76.52950592785717,-76.55458638248948,-76.59018532844357,-76.62577061401936,-76.61088080162872,-76.64638412493446,-76.68127273121488,-76.72206262093817,-76.71292382782872,-76.75364541566032,-76.79433968273526,-76.83455583656828,-76.83930964823062,-76.89350036910551,-76.94767742960204,-77.0019227919903,-77.00720935840789,-77.05836747529128,-77.10907479968944,-77.16031487884288,-77.16300597337587,-77.21419141101595,-77.26920175459122,-77.32430772081489,-77.33078274014807,-77.38583406485836,-77.440899049947,-77.5054716583603,-77.52231490485357,-77.58688751326687,-77.65152842357185,-77.7161829942552,-77.72883250459807,-77.78893816929417,-77.84907115474698,-77.90884897036293,-77.92183999016427])
        expected['lonNH'] = np.array([97.13352037553119,96.95056009823405,96.76895219839258,96.58884694016852,96.88371986701631,96.72267766676575,96.53345410599971,96.34542582833843,96.63781256632834,96.44773523191606,96.28329159745883,96.09630833874056,96.39752651132729,96.2120732149831,96.02906512636179,95.8664588127913,96.16387940019949,95.9645334990835,95.76645118296396,95.56857377251953,95.87086428480595,95.67892913893942,95.51270282510882,95.32373881153124,95.63887690964647,95.44440776359787,95.25688491993516,95.07048222729634,95.42320685641414,95.23242601251735,95.0420208290249,94.85583670243952,95.19114434917378,95.00081429776222,94.81105115205175,94.6206459685593,94.96751029536924,94.77809548930644,94.58872849456783,94.4241482563272,94.77645624390563])
        expected['rhoNH'] = np.array([278606.83729248046,278580.12697753904,278554.60756835935,278529.9874145508,278542.0909057617,278457.41507568356,278426.4758300781,278396.4115356445,278403.7514038086,278372.8121582031,278285.60869140626,278255.9575683594,278264.99873046874,278236.1496459961,278208.6859008789,278122.260168457,278124.88502197264,278087.45655517577,278051.3162109375,278015.75916748046,278018.9187133789,277987.22603759763,277898.95318603516,277870.03118896484,277877.88144531247,277846.60194091796,277818.5548950195,277791.77166748047,277744.96177978517,277716.2585205078,277688.4545166016,277661.76850585936,277672.3165283203,277642.3737548828,277613.16010742186,277585.2345825195,277598.6018920898,277573.1553955078,277548.70537109376,277466.5571777344,277480.7022216797])
        expected['latSH'] = np.array([42.53400334415742,42.5213435885308,42.508776040457974,42.49660464335701,42.56253304432056,42.549835722653505,42.539464080398844,42.52905145700916,42.5970084241562,42.586281612064695,42.57593046037754,42.56593106343264,42.629308388741194,42.62383740721601,42.61371506686605,42.603821537853285,42.67016999545079,42.662393825080734,42.660054485290004,42.65277350363477,42.71882826309796,42.70882203596389,42.702377752481986,42.69687603510554,42.76231607754343,42.75304409574514,42.744263887567094,42.73568516996956,42.805913175015625,42.79650800452852,42.78746483406742,42.77985941842661,42.846474253401745,42.83815849808725,42.835026856352805,42.82720628975314,42.892765860501505,42.883316293784794,42.87419116105366,42.865366556646,42.935980467380176])
        expected['lonSH'] = np.array([192.70407490291,192.6790217690344,192.65391399364543,192.62886085976984,192.67661754244656,192.65153708781426,192.6176866702877,192.5836996489777,192.62241316119335,192.58845346064004,192.55453474122174,192.515534361061,192.54672100481125,192.50990628518488,192.47087858426744,192.4318235625933,192.45074318659422,192.39961239046752,192.35068091525355,192.29942717572177,192.31777306383242,192.26826785272817,192.21965056621602,192.171962185431,192.19209758310419,192.14266067389164,192.08928957571717,192.03585017565098,192.05364964862804,192.0000599844001,191.94648398055054,191.88411069305,191.8905310708698,191.8279801984508,191.76745106202617,191.70483188771547,191.71472200163367,191.65598237477155,191.5972564082878,191.53853044180403,191.54999149923128])
        expected['rhoSH'] = np.array([277997.09354248043,277965.20643310546,277933.1491943359,277900.265612793,277953.1758544922,277921.3616577148,277889.15859375,277857.10135498043,277910.37615966797,277878.9022216797,277846.67485351564,277816.1001708984,277812.7947998047,277841.5709716797,277811.2879394531,277780.47021484375,277776.99471435545,277747.70815429685,277775.8524169922,277745.39925537107,277742.8473144531,277717.0362548828,277683.52076416014,277717.0848632812,277714.8245727539,277687.28791503905,277660.48038330075,277633.1867675781,277691.83280029293,277666.2161743164,277639.7732055664,277614.3510131836,277615.9793945312,277591.91823730466,277625.846899414,277600.5462280273,277602.5634765625,277578.67244873045,277554.0279907226,277528.6544067383,277589.1475585937])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_30N_180_120000(self):
        """Test for latitude = 30, longitude = 180, rho = 120000"""
        lat = 30
        lon = 180
        rho = 120000

        expected = {}
        expected['latNH'] = np.array([-72.17965897379955,-72.21961558044413,-72.25958584746704,-72.29935120881484,-72.31731460633199,-72.35582321287251,-72.40760970715957,-72.45900005047471,-72.48953099606467,-72.53967824495092,-72.58955228627036,-72.64665266773164,-72.68375425530317,-72.73958422157884,-72.79523660293611,-72.85067041823993,-72.90378196922595,-72.97462469129732,-73.04512590391019,-73.11536756933461,-73.16764583724188,-73.23025135117422,-73.2926929405665,-73.35495694504033,-73.40063725020937,-73.46172646214595,-73.52572533466898,-73.58957394303025,-73.63804096538067,-73.70090602650146,-73.7635115404338,-73.83804256465697,-73.89857170108164,-73.972105517686,-74.0455163908853,-74.11873601878781,-74.1744293812801,-74.24187066914482,-74.30920267398281,-74.3763980750374,-74.43209143752966])
        expected['lonNH'] = np.array([81.20026681558971,80.96445453449502,80.72904523456135,80.49365642519521,80.67449251366047,80.43499876060314,80.1748027041715,79.91303570423077,80.07512292342435,79.80956516849425,79.54376835694319,79.29078498027509,79.4690802383691,79.21100837076935,78.95258816352191,78.6937103336001,78.83734238165628,78.53464888820884,78.23041860219813,77.92534137273033,78.07062632656567,77.78223524924023,77.49292209637683,77.20285762270473,77.37406997462944,77.07764659484005,76.78948091375722,76.49986040238116,76.68183030224864,76.38674563953658,76.08989878801866,75.7882298229467,75.96831459060326,75.65959004011869,75.34954043293513,75.0378652407291,75.23877525516502,74.93895044116898,74.63780057047394,74.33570813367345,74.53867403504955])
        expected['rhoNH'] = np.array([239238.70096435546,239149.11568603516,239058.9714111328,238969.31322021483,239062.93299560546,238970.50412597656,238871.24577636717,238770.35904541015,238852.9933227539,238750.67264404296,238648.570703125,238550.35743408202,238635.6165649414,238535.1430053711,238436.34643554688,238336.4561767578,238405.9418823242,238289.47615966797,238173.54512939454,238055.49963378906,238123.40556640623,238013.8422363281,237904.83790283202,237796.36826171874,237872.2702758789,237761.88060302733,237653.87274169922,237546.05931396483,237623.41958007813,237514.3909423828,237404.75469970703,237295.4587158203,237371.84681396483,237261.14118652343,237150.1439086914,237040.45905761718,237122.2912963867,237017.2728515625,236913.17796630858,236808.8400390625,236891.49862060547])
        expected['latSH'] = np.array([50.32868352686767,50.32126252633445,50.31760496003391,50.310720129350536,50.36420392564632,50.35677951001852,50.354849981577985,50.349682943470874,50.40504504178841,50.39931109798019,50.397303022364206,50.39211549368958,50.44413421440839,50.44187342179312,50.43639561007877,50.43460951561081,50.48940470822724,50.48620817969567,50.48669995331591,50.48407374558005,50.54243429694322,50.53725359845777,50.53283105097018,50.532072899972306,50.58500003585074,50.58380816784057,50.57865137501721,50.573781450138995,50.63012368060243,50.62470051040144,50.62284952913637,50.6185806609051,50.67205762701172,50.67059938162392,50.66585923033993,50.661371796055235,50.717365686871,50.711232176996326,50.708889422111014,50.70325451604575,50.75574793491189])
        expected['lonSH'] = np.array([191.77157649628484,191.7509493249914,191.73290396520423,191.71218117126242,191.75791611794483,191.73711136173296,191.71123860515695,191.68240154648117,191.71996758691623,191.69107588672708,191.66502554523265,191.63135271262448,191.66105037513572,191.63010961819555,191.59632750256065,191.56529112297213,191.58407414318967,191.53941836639612,191.49749466527058,191.452715945072,191.47382122960732,191.4302719434593,191.3868182799597,191.34606937137139,191.36533050483084,191.32448597359416,191.27677027205246,191.22899992899738,191.24670377932605,191.1988378136226,191.15356731980376,191.0973412025562,191.10352935394425,191.0497621047979,190.99324911960522,190.93670881365586,190.94862066356836,190.89545447106897,190.84489741083254,190.7916765768198,190.80048752084912])
        expected['rhoSH'] = np.array([265160.5633789062,265111.56611328124,265123.6209960937,265074.23486328125,265124.64177246095,265075.984765625,265089.1576416016,265040.91380615236,265091.66097412107,265043.63587646483,265056.4198852539,265009.658605957,265001.2007446289,265016.26934814453,264969.92124023434,264984.3822387695,264977.0909790039,264932.66290283203,264948.8251953125,264903.23051757814,264956.6997558594,264913.7542358398,264869.7879394531,264886.6064453125,264880.992175293,264898.3939819336,264856.85810546874,264814.8604492187,264871.99962158204,264830.7310913086,264850.41749267577,264810.8016479492,264809.3190917969,264831.60604248045,264792.47628173826,264752.90904541017,264812.4543334961,264773.22735595703,264794.66365966795,264754.99920654297,264753.46804199216])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_60N_180_120000(self):
        """Test for latitude = 60, longitude = 180, rho = 120000"""
        lat = 60
        lon = 180
        rho = 120000

        expected = {}
        expected['latNH'] = np.array([76.45915338554431,76.4611836592751,76.46300048959432,76.46490952746734,76.45599015418495,76.45798713074353,76.45997898466024,76.46203401782677,76.45333406437146,76.45531994187263,76.45727849861714,76.45648705044707,76.44479718168259,76.44384607784066,76.44284118625902,76.44177994561673,76.43107020899815,76.4312281571227,76.4310582561671,76.4308422514346,76.41966976949976,76.41798954296394,76.41623247679995,76.41426623609263,76.4015415936689,76.39900161707129,76.39814784342505,76.39683730087805,76.3849707009688,76.38341512538533,76.38152230921159,76.38745774360032,76.38284736591056,76.38818601252058,76.39321303174971,76.39776791415247,76.39254964962657,76.39702683862751,76.4012461879873,76.4052427024254,76.39891709348032])
        expected['lonNH'] = np.array([205.99014521604047,205.9348616648984,205.8791683024061,205.82351592104885,205.80829825957807,205.75315131221936,205.67718594827048,205.6011522824299,205.56618171387944,205.49042125560567,205.4147290992236,205.27472388161667,205.17587738394823,205.03645956260993,204.89698709975826,204.75755561804164,204.61555598519706,204.43261619846746,204.24947150606272,204.06617654949625,203.92434084119176,203.72138860019402,203.51839537806123,203.31518358987503,203.15410040848943,202.95087495992487,202.72285592467318,202.49463198374636,202.30900110248376,202.08132357669055,201.8534274848439,201.5787445971827,201.34699627864416,201.07285980611653,200.79884627699394,200.5248054271147,200.31171718538863,200.0558719594583,199.8004502052565,199.54531531899985,199.33375703964788])
        expected['rhoNH'] = np.array([6371.199620246887,6371.199240493775,6371.198860740661,6371.198860740661,6371.199240493775,6371.199620246887,6371.198860740661,6371.1984809875485,6371.199240493775,6371.199240493775,6371.198860740661,6371.1984809875485,6371.198860740661,6371.2,6371.199240493775,6371.2,6371.198860740661,6371.199240493775,6371.199620246887,6371.199620246887,6371.199620246887,6371.198860740661,6371.199240493775,6371.198860740661,6371.2,6371.198860740661,6371.2,6371.199240493775,6371.1984809875485,6371.199620246887,6371.2,6371.2,6371.199240493775,6371.199620246887,6371.199620246887,6371.198860740661,6371.198860740661,6371.199240493775,6371.198860740661,6371.199620246887,6371.198860740661])
        expected['latSH'] = np.array([62.87688508886707,62.87156095640904,62.86695057871928,62.86258779538694,62.90390873231823,62.89857606212374,62.895517844922864,62.892727712646916,62.93576131951258,62.931960319239465,62.928885026565666,62.926241743356876,62.96911654832434,62.965971246211545,62.96305475543595,62.960368783544844,63.00568879623517,63.00486405089289,63.004259579151345,63.0033579941809,63.049253450308804,63.04662895012022,63.04472844998367,63.043046515900556,63.08724979266158,63.085055594390724,63.08283236781588,63.08081916955802,63.12482437083312,63.122292078198335,63.11947462516571,63.118014672230615,63.162648250909356,63.16063163755691,63.15884042044708,63.15727630712714,63.20093829139645,63.197857876080775,63.19448717772537,63.191857554894916,63.23552295425881])
        expected['lonSH'] = np.array([194.6204893802322,194.60009443537052,194.58318288698558,194.5662030367089,194.62921836199146,194.60839994540126,194.5821993397451,194.5556845453871,194.6093288511284,194.5793716414287,194.55278854517903,194.52014024094635,194.56389443276947,194.53105488324005,194.49816069219725,194.46519819926277,194.4963985033914,194.45093676427578,194.4053794025118,194.3562293612444,194.39024370331106,194.34166739793392,194.2963695833584,194.2509761461345,194.28187592193964,194.2361956167706,194.18480527345542,194.1332646659785,194.1579762903956,194.10617613573024,194.05098820723651,193.98849197633092,194.0019747697525,193.93905506711835,193.8759987607008,193.81284683163486,193.8295124932097,193.76996690402552,193.7071291636614,193.64743331031548,193.66342961335167])
        expected['rhoSH'] = np.array([255350.41640625,255291.81898193358,255296.4853881836,255301.1517944336,255345.48265380858,255286.7880126953,255292.98558349608,255299.25606689454,255345.16669921874,255288.17335205077,255294.5410522461,255302.1725708008,255286.10749511718,255293.9091430664,255301.63787841797,255309.39091796873,255295.65904541014,255305.91541748046,255316.19609374998,255263.0428100586,255312.6962890625,255259.78604736328,255270.0667236328,255280.2987915039,255266.73704833983,255277.16354980468,255288.80526123047,255300.34975585938,255288.0761352539,255299.81506347656,255248.16864013672,255261.92481689452,255251.74135742188,255265.2301879883,255278.67041015625,255292.06202392577,255281.05222167968,255293.93344726562,255243.45362548827,255256.23763427735,255245.3007446289])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_90N_180_120000(self):
        """Test for latitude = 90, longitude = 180, rho = 120000"""
        lat = 90
        lon = 180
        rho = 120000

        expected = {}
        expected['latNH'] = np.array([78.8984418957194,78.90707440105666,78.91558737808343,78.92395179849576,78.89862204195877,78.90718368408338,78.91759374615212,78.92781000160318,78.90424499519298,78.9146729865083,78.9249327844153,78.93787172402425,78.91678351496184,78.9297173319289,78.94248295548765,78.95502403657744,78.93649117203826,78.95209815429173,78.96743961294123,78.98257531214198,78.96340126359446,78.979382198705,78.99510017153248,79.01055518207694,78.99158603920452,79.00691042238108,79.02556537655168,79.04393602409809,79.02769895689367,79.04587409027508,79.06365221891097,79.09216569737484,79.08588192333842,79.11393863290154,79.14157101696247,79.16872528778151,79.16107889100567,79.1878233504745,79.21402054103609,79.23979852873737,79.23086805639758])
        expected['lonNH'] = np.array([222.03207391586602,221.9699874963106,221.90740930313495,221.84420273255566,221.79726567257933,221.73515193226723,221.64709713348742,221.55822271200722,221.48625983891196,221.39868315337407,221.31038246778414,221.13775626670125,220.9828065951903,220.81105465832118,220.63863336291337,220.46533780329182,220.27212541205049,220.0598431326465,219.84644070221862,219.6319044603885,219.4388286729306,219.20795461860584,218.9758647906088,218.74253186818282,218.5328723814201,218.29949847785912,218.03881747799642,217.77659285538127,217.54065080069236,217.27835787618554,217.01458963081797,216.69424009836604,216.40249539815812,216.0810666958173,215.75787580467065,215.43290906433978,215.1539504782581,214.84212502189035,214.5286329993651,214.21382958051922,213.935089560491])
        expected['rhoNH'] = np.array([6371.2,6371.199620246887,6371.199620246887,6371.199620246887,6371.199620246887,6371.199620246887,6371.198860740661,6371.199620246887,6371.2,6371.199240493775,6371.199620246887,6371.198860740661,6371.199620246887,6371.2,6371.199240493775,6371.2,6371.199620246887,6371.199240493775,6371.2,6371.199620246887,6371.2,6371.2,6371.2,6371.199240493775,6371.199240493775,6371.199620246887,6371.2,6371.199620246887,6371.199620246887,6371.199620246887,6371.199620246887,6371.2,6371.199620246887,6371.199240493775,6371.2,6371.2,6371.199620246887,6371.199240493775,6371.2,6371.199620246887,6371.199240493775])
        expected['latSH'] = np.array([73.76546679576927,73.6725284117329,73.5846785186282,73.49383358757244,73.72931460449239,73.6331455409786,73.54314926092722,73.4522309053379,73.6852137805689,73.59044832092957,73.49639490851119,73.41110975143982,73.64449902292645,73.55596098826288,73.46222688718821,73.37188226748916,73.6103702751912,73.51583191934176,73.42088545968942,73.32817076434837,73.57029926287802,73.47759993546262,73.39053380656517,73.30273513987925,73.55243319555656,73.45981583041119,73.37157149388192,73.28712474253118,73.54256527975319,73.45781287743708,73.37191471088771,73.28943334647064,73.54950987459179,73.46764834984191,73.38075980586288,73.30005941327188,73.57014899871629,73.48558784169694,73.40441787360051,73.32345622627376,73.60148932172288])
        expected['lonSH'] = np.array([350.3579412496324,350.43211710401874,350.4985885050213,350.56877552893235,350.38744766684687,350.46648661592224,350.5413454892256,350.61713326825605,350.4496570298073,350.5321657149811,350.6124887396204,350.6834680654752,350.5244612615973,350.6013145501383,350.684424291959,350.7623977315239,350.6063142486107,350.7001883685634,350.7917948657116,350.8799862682748,350.724476521252,350.8160556976435,350.8970617411998,350.97855955837645,350.81900633936493,350.90911019489573,350.99768408805244,351.08030205625295,350.9240546487997,351.0074649189439,351.09259639675895,351.1788753463546,351.03057827909527,351.11713043625764,351.21089527318355,351.2948246377047,351.1359817583669,351.2243097647135,351.307774676371,351.3893544558177,351.22447368925356])
        expected['rhoSH'] = np.array([327743.56041259767,328264.4966186523,328804.7303588867,329309.40705566405,327946.1116088867,328462.8431884766,329007.79194335936,329528.7767578125,328135.9274047851,328669.76914062497,329199.3819458008,329737.8900878906,328291.8145385742,328852.0506347656,329376.3651245117,329890.90932617185,328487.8765136719,329023.95423583983,329577.99276123045,330110.0116821289,328679.73386230465,329194.0836303711,329747.1985961914,330278.97447509767,328802.1298095703,329332.95782470703,329836.68665771483,330333.5130981445,328807.93851318356,329354.3212158203,329858.12296142575,330370.86865234375,328782.75936279295,329328.58306884766,329813.1844970703,330318.12854003906,328725.0125854492,329232.3870483398,329724.6442993164,330217.48485107423,328624.97650146484])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_90S_270_120000(self):
        """Test for latitude = -90, longitude = 270, rho = 120000"""
        lat = -90
        lon = 270
        rho = 120000

        expected = {}
        expected['latNH'] = np.array([-75.8068582532915,-75.79483712035227,-75.78302089308815,-75.77143689225582,-75.79725500731846,-75.78517923286589,-75.77498859062422,-75.76505749557103,-75.79554746002594,-75.78229689303612,-75.77209259041612,-75.76370511811535,-75.79594361099782,-75.78707802545514,-75.77561696802786,-75.76720217497041,-75.80199515860244,-75.7954928185126,-75.7892090444762,-75.78315749687155,-75.81811440504367,-75.80915319685263,-75.80321093227471,-75.79751455450693,-75.83300421743431,-75.82681606604626,-75.8222534996807,-75.81792315974693,-75.8521833886237,-75.84737493544802,-75.8427304068124,-75.84073599157475,-75.8803784095175,-75.87787856028129,-75.87555629596349,-75.87345259769913,-75.91267154391335,-75.90675660009211,-75.90379229799231,-75.90104656194598,-75.94038845156524])
        expected['lonNH'] = np.array([29.12900828167686,29.07033695670645,29.011952499681183,28.9538446653173,29.085189203056643,29.02635736864074,28.950077815990035,28.874016829392772,28.987097441291503,28.910336360304317,28.833735788762624,28.74650744287239,28.84814748791135,28.760010726861506,28.672253041310597,28.584567072745973,28.66061098387031,28.547064211560727,28.43366599586559,28.320305346210887,28.395159096872348,28.284100220967943,28.173020854496023,28.062166884266716,28.13907993696294,28.02715191948665,27.906621278750727,27.7860001380083,27.853207491893933,27.73142009635073,27.61010056876567,27.469863124726967,27.516363052596414,27.37486885375043,27.233538579444527,27.092169031550895,27.145881639183877,27.01222508241048,26.878568525637085,26.745135657559008,26.79739514244607])
        expected['rhoNH'] = np.array([259169.2380126953,259157.98516845703,259146.90245361326,259136.08708496092,259160.22115478516,259148.87109375,259139.34384765624,259130.05964355468,259093.5061279297,259146.1247192383,259136.62177734374,259128.7958251953,259093.84638671874,259085.6072631836,259139.78132324218,259131.80954589843,259099.02318115233,259092.77700195313,259086.7981689453,259080.9408569336,259048.32462158203,259104.88049316406,259099.2662231445,259093.7734741211,259061.69193115234,259055.8103149414,259051.48416748046,259047.35245361328,259079.1180419922,259074.59746093748,259070.1984008789,259068.2783691406,259039.98828125,259037.58216552733,259035.39478759764,259033.3775390625,259004.60136718748,259064.02513427733,259061.15723876952,259058.48377685546,259029.70760498047])
        expected['latSH'] = np.array([-67.90639210071609,-67.87263730583788,-67.83869126566293,-67.80470424435293,-67.78272469560383,-67.74846446672706,-67.71565223795432,-67.68266242426316,-67.66180302653794,-67.62860830717167,-67.59526332364368,-67.56380347232658,-67.54455599924549,-67.51287758187496,-67.4811172022344,-67.44915191691877,-67.43124316091499,-67.40090346062178,-67.37041349616686,-67.33978692792851,-67.32142737943951,-67.30081386852441,-67.28011839533929,-67.25942292215413,-67.25093982720497,-67.2300531087231,-67.214220730227,-67.19829272908254,-67.19467272882241,-67.17867642578625,-67.16261182085839,-67.15035846148737,-67.15027649921734,-67.13795483795462,-67.12552389366522,-67.11309294937578,-67.11634411942072,-67.1072599678246,-67.09816215585013,-67.08906434387569,-67.09213792900218])
        expected['lonSH'] = np.array([155.30154919657,155.28167334608526,155.26157892954708,155.24130692809047,155.2706357603865,155.25040474006494,155.25233085341088,155.25406572146005,155.30512821569508,155.30658987617744,155.3077646687147,155.29123561092325,155.32388391515593,155.30713629131105,155.28976029006253,155.27238428881404,155.3217665565132,155.32130210364966,155.3204278394359,155.3190618016019,155.36699606919706,155.35257070966998,155.33777651992773,155.3223402924035,155.35695569111712,155.34127357678278,155.32463523596462,155.3077646687147,155.341082331486,155.32380195288587,155.30620738558395,155.28447372364496,155.31352934837417,155.29139953546334,155.26898285460737,155.24610172088782,155.2640104768916,155.2305971914719,155.19673311356698,155.16251386582522,155.1796849613986])
        expected['rhoSH'] = np.array([6371.2,6371.199620246887,6371.199240493775,6371.199240493775,6371.199620246887,6371.199620246887,6371.199240493775,6371.199620246887,6371.2,6371.199240493775,6371.199620246887,6371.199620246887,6371.199620246887,6371.2,6371.2,6371.2,6371.199240493775,6371.2,6371.2,6371.199240493775,6371.199620246887,6371.2,6371.2,6371.199620246887,6371.199240493775,6371.2,6371.2,6371.199620246887,6371.199240493775,6371.199620246887,6371.199620246887,6371.2,6371.2,6371.199620246887,6371.199620246887,6371.199240493775,6371.2,6371.2,6371.2,6371.2,6371.2])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_60S_270_120000(self):
        """Test for latitude = -60, longitude = 270, rho = 120000"""
        lat = -60
        lon = 270
        rho = 120000

        expected = {}
        expected['latNH'] = np.array([-74.57817552349789,-74.57629039128699,-74.57395446659083,-74.57172782492142,-74.63602722576792,-74.63259847080457,-74.62821348935742,-74.62366458337019,-74.685887606709,-74.67971311569931,-74.67371620960805,-74.66531507692892,-74.72395908114265,-74.71441047668299,-74.70483455146663,-74.69562745646544,-74.75166232841622,-74.73928602564015,-74.72682776059406,-74.7142465521429,-74.76920225420483,-74.75433976257088,-74.73901281807338,-74.72371319433253,-74.77668814153515,-74.76050059320224,-74.74300164854864,-74.72501093027483,-74.77552700937625,-74.75673032878038,-74.73864398785818,-74.71837198640159,-74.76604670680828,-74.74440866751766,-74.72346730752241,-74.7026762116889,-74.75070610193242,-74.72995598723392,-74.70936979707551,-74.6882781729185,-74.73595289332519])
        expected['lonNH'] = np.array([335.9678254986827,336.1695073244949,336.3876362458284,336.5853565619219,336.78690178395067,336.98372051507374,337.1762772081547,337.366593599188,337.5630571604742,337.76943815643534,337.9550553773196,338.11176723763634,338.27735834387414,338.4316113360897,338.58400651685105,338.71602041312906,338.8727869149592,339.01512805726225,339.1544912370872,339.2907671714073,339.441249899201,339.5304794905181,339.6352272716294,339.73759814690953,339.8389581541925,339.93958050104516,339.9944405804587,340.06470956663975,340.1357162132512,340.2044005955449,340.2537965236224,340.27068075125067,340.3065255840149,340.3391465674909,340.3525610590208,340.3641450598531,340.39291381663725,340.4007821945611,340.40712061011084,340.42881329091483,340.4538937455471])
        expected['rhoNH'] = np.array([257992.33146972655,257973.90888671874,258015.76071777343,257998.6262573242,257988.3698852539,257970.7493408203,257954.36831054688,257938.497668457,257930.06411132813,257974.00610351562,257958.59724121093,257955.09743652344,257959.39927978514,257956.0939086914,257953.2503173828,257891.1287841797,257897.83674316405,257897.496484375,257897.98256835938,257899.12486572264,257907.65563964844,257861.23461914062,257875.40396728515,257890.2538330078,257852.16915283204,257867.11623535157,257834.13543701172,257861.8665283203,257836.66307373045,257864.66151123046,257832.94453125,257815.27537841795,257804.87318115233,257847.62426757812,257830.90297851563,257814.8135986328,257807.81398925782,257793.6932495117,257780.2044189453,257827.69482421875,257821.8132080078])
        expected['latSH'] = np.array([44.420675762738774,44.38099919385017,44.34334777605048,44.30771467915052,44.32644647294928,44.29336445170432,44.26850256312547,44.24587756149981,44.27877516763718,44.2594764681373,44.24273225938702,44.22430099391174,44.262259770224084,44.246997712523694,44.23391448516853,44.223481371211335,44.28274692263954,44.28883945137919,44.29786554636736,44.309941320819945,44.380845514593844,44.397938062991805,44.41739385684259,44.439298273510815,44.520003788743686,44.54525841319981,44.57533173611537,44.60742679502526,44.69840491476983,44.73290420026757,44.76946278780006,44.81148894176315,44.91273283583025,44.95682170692268,45.002816200793546,45.050706072159095,45.15254419268398,45.19676966755981,45.24262414255269,45.29032276862148,45.397853851819576])
        expected['lonSH'] = np.array([222.99917406082648,223.11370267282925,223.22724773759154,223.34028736835523,223.63253750256175,223.74266747273904,223.85137676356896,223.95988114872378,224.24721354672786,224.35308147886306,224.45879914683653,224.55253666300578,224.82489728634923,224.917009217496,225.0093943562096,225.1019844005983,225.3716402690304,225.46164850191283,225.55194360274038,225.64264851491816,225.9107471002195,225.97429518025731,226.03829405278032,226.1025934536268,226.34363082943656,226.4068100792592,226.4457558179066,226.4850020848775,226.70004376070617,226.7380059521131,226.77628233222185,226.79949131502156,226.99751215943857,227.01924582137755,227.04130733239668,227.06386061703608,227.25957285751363,227.2795579910251,227.30017150194018,227.32115384307045,227.5154044230656])
        expected['rhoSH'] = np.array([254385.05361328126,254538.36450195312,254683.36335449218,254820.41473388672,254953.2371826172,255074.8310913086,255179.5821899414,255275.58377685546,255362.86015624998,255440.41485595703,255508.75826416016,255569.4701538086,255621.65126953126,255666.34669189452,255700.49409179686,255728.24948730468,255714.85787353516,255696.82415771484,255667.27025146483,255626.22045898438,255565.94604492188,255502.2447387695,255428.82175292968,255346.527734375,255244.74174804686,255144.92440185547,255031.6911376953,254909.9757080078,254767.57740478514,254632.13010253906,254489.0755859375,254330.85524902344,254149.13275146484,253978.1284057617,253799.27380371094,253612.61755371094,253419.8123413086,253240.54456787108,253054.22857666016,252861.08310546874,252640.9356689453])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_30S_270_120000(self):
        """Test for latitude = -30, longitude = 270, rho = 120000"""
        lat = -30
        lon = 270
        rho = 120000

        expected = {}
        expected['latNH'] = np.array([-63.257560445930324,-63.987898913501425,-64.60028001410643,-65.12109559869825,-65.65503880687481,-66.05276072224467,-66.43033357956298,-66.76643352824095,-67.14845966889811,-67.41963183932597,-67.66751306468407,-67.8766397966915,-68.15304389202359,-68.32987748963521,-68.49436210522745,-68.64774083322928,-68.88465277478033,-69.02659776611154,-69.15728660569056,-69.28017536923744,-69.47639304371356,-69.55873780434723,-69.63738060245075,-69.71049094732658,-69.86210748652252,-69.92702160439433,-69.9756115701498,-70.02156508288564,-70.14756841269403,-70.18756600047362,-70.22469490880181,-70.2548570241766,-70.36424933392351,-70.38986254331107,-70.41337205443426,-70.43551552772342,-70.53619251608941,-70.55240738517904,-70.56822610329678,-70.5826378024455,-70.67827411120402])
        expected['lonNH'] = np.array([320.2464785577409,321.3452374291425,322.35493063376714,323.27558549237153,324.1015739290795,324.9129457609636,325.72590219673526,326.4956098746823,327.19209792472685,327.8914546542228,328.570894552099,329.15984810385083,329.72153554043604,330.27210342905244,330.80996716581257,331.3357551281202,331.8755586386046,332.4113459978571,332.91975795891614,333.4299457691594,333.91543561536395,334.30601315286196,334.7026558983429,335.0769775856163,335.4509714238095,335.8288174886946,336.1287720762849,336.42247021059546,336.7224794396991,337.0085550828959,337.27493246052643,337.51286893045295,337.73299226702414,337.9642078308074,338.17640814794134,338.3841278609798,338.5749360256333,338.74599128320705,338.9274284283193,339.09140760991295,339.27407418907575])
        expected['rhoNH'] = np.array([255061.14782714844,255072.3763671875,255145.58061523436,255173.53044433592,255226.82955322266,255255.21685791016,255303.58221435547,255351.6073120117,255366.2627441406,255388.86564941405,255443.96326904296,255460.66025390624,255530.00013427733,255529.00366210938,255545.79786376952,255578.53562011718,255612.85314941406,255632.4909423828,255608.01661376952,255656.6007080078,255689.0954223633,255657.42705078123,255692.95979003905,255676.65167236328,255698.35532226562,255753.9633300781,255746.283203125,255743.99860839843,255777.83005371093,255783.71166992188,255733.9609741211,255784.2463623047,255750.85239257812,255807.5783935547,255807.8700439453,255811.394152832,255815.45295410155,255788.2565551758,255823.74068603516,255801.42943115233,255814.50509033204])
        expected['latSH'] = np.array([33.3712157801261,33.533863074831615,33.74698546750352,33.99865744785098,34.34821628428848,34.696566177242886,35.142287247004994,35.63725398068289,36.21431617308976,36.79196917685983,37.39021861607208,37.94949841097482,38.56911951210004,39.163673818971304,39.77553582519939,40.3870255861177,41.13410484734453,41.8329766334094,42.522200777271635,43.19317124057701,43.87180517613113,44.41919361168888,44.94490644191559,45.460233969509304,45.97512436499613,46.451717889806694,46.8704016557393,47.27738530762368,47.68454654442648,48.06269996782424,48.43577173047951,48.78897447283921,49.14244700767112,49.47734825814977,49.804763621298086,50.12473749334568,50.41743500494282,50.70019459129759,50.973115290152954,51.245195875740414,51.50987253626758])
        expected['lonSH'] = np.array([235.0752217209758,235.36375623227383,235.65308304551556,235.949267368684,236.400387702985,236.6935940636753,236.99625340617692,237.2929021822089,237.73776606323017,238.01171129046105,238.27929078138547,238.54430212118197,238.94602652740545,239.18543831819272,239.40769267378494,239.61964710410876,239.94154025931314,240.10371627096592,240.24474601694834,240.36809923335878,240.60521608058494,240.6501860460803,240.68775208651536,240.70870710688897,240.85225036248596,240.8535617588066,240.81965669976665,240.7775554137227,240.86279617456447,240.80968462357845,240.74460658116655,240.67450151952553,240.73430665589817,240.65106031029407,240.56234981335393,240.46833908961787,240.52166920665735,240.4262651243306,240.3318992307577,240.22802571386015,240.27086466033447])
        expected['rhoSH'] = np.array([262176.591015625,261800.0460571289,261450.3329345703,261013.02747802733,260658.08895263672,260198.9340209961,259748.13973388672,259312.04948730467,258821.4692260742,258431.21669921876,257969.9473022461,257638.55954589843,257269.13571777343,256937.99100341796,256673.24536132812,256366.4291503906,256121.97751464843,255885.1087890625,255694.8312133789,255502.3662597656,255359.57908935545,255292.30506591796,255176.27681884766,255125.5296508789,255088.24700927734,255004.66486816405,254970.71190185545,254946.82087402343,254948.1819091797,254889.4872680664,254897.6777832031,254871.74520263672,254880.08154296875,254872.7659790039,254871.76950683593,254878.03999023436,254878.28303222655,254909.36810302734,254886.86241455076,254928.05803222655,254901.3963256836])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_0N_270_120000(self):
        """Test for latitude = 0, longitude = 270, rho = 120000"""
        lat = 0
        lon = 270
        rho = 120000

        expected = {}
        expected['latNH'] = np.array([-61.879597101636904,-62.259724449704805,-62.62400575889828,-62.97189461408371,-63.40699132459184,-63.72290123408328,-64.04424797415405,-64.35201629815481,-64.74236160922104,-65.01813732714947,-65.28213779894881,-65.52092121233247,-65.847923349036,-66.06430374194198,-66.27049349260633,-66.46705267654096,-66.76525873570372,-66.95537022106186,-67.13564623401516,-67.30645560477885,-67.56094845325353,-67.68146031096921,-67.79765548912948,-67.90777179892842,-68.10501400178006,-68.20406540512357,-68.2833912221441,-68.35865990679764,-68.52162822039415,-68.58937003658235,-68.65504913564118,-68.7113298944021,-68.85502341416083,-68.90586734234239,-68.95417044015272,-69.00106651899404,-69.130949396251,-69.16947166316987,-69.2066552130114,-69.24243174388394,-69.36461016775712])
        expected['lonNH'] = np.array([335.14907706249494,335.4017667410287,335.6616417785694,335.9224730425938,336.20980544059796,336.48178357334785,336.76206721612846,337.05502769000867,337.36388884427663,337.6593628277714,337.9662568875584,338.2263231703958,338.533545079263,338.80929347643473,339.0851238358765,339.36095419531836,339.7060426729441,340.0124722798675,340.3176451319837,340.6212607009691,340.9585354421843,341.2022092710137,341.4564015911649,341.69693353297606,341.9876263840518,342.22826760888967,342.43456664258076,342.6270413733917,342.873283353349,343.06578540491665,343.2684234572126,343.41120173162255,343.61102574598044,343.7653333797094,343.9060625973683,344.0572556648357,344.22689024306214,344.3488227801252,344.46927999632754,344.58872634453274,344.7585794888126])
        expected['rhoNH'] = np.array([255133.67155761717,255074.8310913086,255033.24660644532,254976.05882568358,254975.06235351562,254924.67974853516,254879.9114135742,254893.32733154297,254871.76950683593,254862.24226074218,254907.2293334961,254854.92669677734,254899.79224853514,254900.8859375,254900.32694091796,254898.4555175781,254957.9278930664,254974.3818359375,254991.880859375,255011.27561035156,255020.2681640625,255000.11998291014,255042.16624755858,255025.78521728516,255062.7762084961,255050.4782836914,255093.95849609375,255079.08432617187,255120.37716064454,255109.10001220703,255160.4061767578,255128.34893798828,255155.42381591795,255187.57827148438,255161.13530273436,255197.1055175781,255203.20587158203,255211.37208251952,255220.92363281248,255231.73900146483,255245.5680908203])
        expected['latSH'] = np.array([-23.028156045905405,-12.601961070340153,-7.533632857110533,2.5901828137090916,12.303046492736556,19.554419277918143,27.04019049503622,33.25083369600463,37.26576573920528,39.71440904722236,41.456421474277434,42.73544952844319,43.81066473777577,44.71280295354022,45.499111406265015,46.20255258888463,46.93035364117909,47.579074763263144,48.17533320233233,48.72197714727055,49.235002901113965,49.64485181735516,50.03646754360702,50.4071214192961,50.762082935367076,51.09954892187906,51.39599962242513,51.679438812602314,51.95799783261753,52.22521190842136,52.481610379674464,52.73385951100679,52.975907754813704,53.216712904191674,53.44894275106669,53.67676371083247,53.88042287640932,54.08028445680765,54.27340122540059,54.467156616680924,54.65821408323911])
        expected['lonSH'] = np.array([242.64984686900658,248.28581844377763,249.6560636743089,252.18162174256952,253.5284257638693,253.46823813690315,252.51340501169204,251.05289200108987,249.92290550480297,249.07328461356676,248.41974479302326,247.93769736216043,247.62736088703173,247.2500885580369,246.90754091078242,246.58605756692825,246.34541634209037,246.0061745063942,245.67944557725744,245.3693003474255,245.19597746704727,244.92823405158276,244.66294950421948,244.40534208948327,244.28756230743556,244.03856093105358,243.79879397042944,243.56580255746198,243.47078096572878,243.23855453394833,243.01266651771766,242.7812050671243,242.70290377847925,242.47065002594215,242.24424291533455,242.01758991791687,241.96065346099562,241.75093933271955,241.54690792183294,241.33662005766658,241.2811316008494])
        expected['rhoSH'] = np.array([223675.31256103516,248053.88262939453,261716.75556640624,265075.7417236328,259314.11534423826,256973.52374267578,255674.90177001953,255136.7824951172,254957.6848510742,254890.75108642576,254849.8471191406,254887.73736572266,254883.67856445312,254928.95728759764,254928.47120361327,254950.70954589843,254973.55549316405,254986.87419433592,255027.7781616211,255024.47279052733,255045.73896484374,255058.03688964844,255102.22192382812,255116.4398803711,255128.3732421875,255132.38343505858,255163.0067260742,255149.17763671876,255186.48458251954,255199.2928955078,255164.0031982422,255205.1259033203,255179.50927734375,255238.8115234375,255245.51948242186,255258.81387939453,255259.08122558592,255277.79545898436,255241.16903076172,255268.14669189454,255291.16276855467])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_30N_270_120000(self):
        """Test for latitude = 30, longitude = 270, rho = 120000"""
        lat = 30
        lon = 270
        rho = 120000

        expected = {}
        expected['latNH'] = np.array([67.85860308832635,67.88037602385305,67.90208065748806,67.92394238547398,67.93536416931353,67.95715759540775,67.98462007851307,68.01188790122706,68.02888653452393,68.05610142327185,68.08292869878437,68.1127561348898,68.13166722115429,68.16058794964741,68.18934304605317,68.21765759525745,68.24351669145511,68.27933932610455,68.31417329087161,68.3480681046278,68.36853135138116,68.40107720277626,68.43179768611569,68.46053229195394,68.47159890595665,68.49188456779159,68.51556141854944,68.53009093846134,68.49336671884149,-67.38333621407651,-66.96841588237658,-67.03476433997409,-67.20307386150154,-67.27182654568688,-67.34045628646717,-67.40888112157236,-67.56618037815775,-67.62640898625892,-67.68648733019836,-67.7462651458143,-38.01008036767999])
        expected['lonNH'] = np.array([242.65897200173774,242.55050859771794,242.4412802125111,242.33166933671072,242.26686450186563,242.15687113547176,242.02482991843706,241.89196907870198,241.80492514791933,241.6725560818045,241.53950399677265,241.36842141844215,241.2440300132779,241.0739309821879,240.9039685548813,240.73441593892488,240.595817740287,240.4108015760497,240.22758858175328,240.04699838009813,239.9250112015217,239.75330024578759,239.58628846020244,239.42605222227394,239.34236874456295,239.21163892384888,239.08648253749757,238.99422034218904,239.1038312179894,342.6798250752976,345.0306122630759,345.1189675901792,344.94916908741266,344.67964982276396,344.4076170485007,344.13279755705605,343.96122320510534,343.69143073288984,343.4194526001399,343.14493363701877,287.0796536840493])
        expected['rhoNH'] = np.array([6371.198860740661,6371.199240493775,6371.199240493775,6371.199620246887,6371.2,6371.198860740661,6371.198860740661,6371.199240493775,6371.199620246887,6371.199240493775,6371.199240493775,6371.199620246887,6371.199240493775,6371.199620246887,6371.2,6371.199240493775,6371.199240493775,6371.199240493775,6371.2,6371.199620246887,6371.198860740661,6371.2,6371.2,6371.198860740661,6371.199620246887,6371.2,6371.2,6371.199620246887,6371.198860740661,217148.05529785156,241707.1326538086,243694.6571533203,243104.13802490235,242582.18104248046,242040.63487548826,241480.0342163086,240889.46647949217,240354.33662109374,239804.06524658203,239238.33640136718,109575.27559204101])
        expected['latSH'] = np.array([51.19711134398352,51.39575373561501,51.586070126648245,51.77220644190943,51.96248868199682,52.13928129847343,52.32875416114416,52.518394363449566,52.7100563017493,52.88752852204832,53.06178713834286,53.228402772956144,53.39665765297024,53.55743347584317,53.71591435515498,53.86869544160441,54.052943209560084,54.2308969581956,54.40296991395573,54.576115209415555,54.748741410498454,54.892202703825404,55.03429795931835,55.174900818477646,55.3154217153669,55.452486536536135,55.575382130272175,55.70066146002855,55.826032997338714,55.94552715686809,56.06736065618819,56.18923172154873,56.31128720201686,56.427899021716485,56.54705167178736,56.66561692558961,56.771478027535636,56.87823046916835,56.98150634451353,57.08740159740541,57.19089945389861])
        expected['lonSH'] = np.array([248.9195233949714,248.7387419480195,248.56500925629106,248.3924240363432,248.32884863554872,248.15842175537855,247.97733978010316,247.7907663327351,247.7184756105597,247.53955197506204,247.36120207545466,247.19200462933512,247.14124266342358,246.9720998588174,246.80325758253466,246.64108157088188,246.5662773390919,246.36847506072834,246.17717512245463,245.97959141014448,245.909868839097,245.73397780759083,245.55797749305793,245.38208646155178,245.33777219421674,245.16122546455023,244.9973555659833,244.82687404429979,244.79146634364244,244.62650361480829,244.45484730058752,244.28155174096597,244.2465811724155,244.07847655656315,243.90345978927073,243.72808785214147,243.7110943414865,243.5444377257382,243.38422880856638,243.21697113617108,243.20101581426994])
        expected['rhoSH'] = np.array([255883.62623291014,255947.10880126953,255957.3408691406,255971.29147949218,255921.80812988282,255943.05,255939.64741210936,255998.85244140626,255998.8038330078,256004.73405761717,256012.63292236326,256032.82971191406,255998.97396240235,256023.93437499998,256049.45378417967,256015.7681640625,256002.98415527344,256042.4784790039,256021.77130126953,256060.02611083983,256050.83912353514,256069.57766113282,256087.24681396483,256104.08962402344,256076.91752929686,256092.32639160156,256066.39381103514,256098.8642211914,256090.98966064453,256061.60588378905,256090.62509765624,256117.0194580078,256106.39852294922,256070.0637451172,256091.91322021483,256111.86696777344,256062.6995727539,256104.38127441405,256084.0872680664,256122.12333984373,256070.1123535156])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_60N_270_120000(self):
        """Test for latitude = 60, longitude = 270, rho = 120000"""
        lat = 60
        lon = 270
        rho = 120000

        expected = {}
        expected['latNH'] = np.array([71.84224945003375,71.85619669631892,71.87015248034055,71.88409801907842,71.86700034803859,71.88087929243206,71.89789670874913,71.91487997412037,71.90065269007924,71.9175608233696,71.93443480571412,71.95505002417651,71.94419343849077,71.96459350599432,71.98494576217365,72.00526386740715,71.9987649424119,72.02380612345644,72.04877387996743,72.07375529685675,72.06644016425567,72.09387361905702,72.12124218706126,72.1485885569507,72.14334809431001,72.1704998038081,72.2045312213477,72.2385336105833,72.2392166295003,72.27291507531785,72.30655717207476,72.35451193023741,72.36913707279771,72.41676227433291,72.46428673057787,72.51167458303941,72.52501906513032,72.5720568703969,72.61892392093424,72.6654904431481,72.67758329307361])
        expected['lonNH'] = np.array([239.47932769780004,239.43971260061397,239.39987893737444,239.35977206656813,239.26073432360295,239.22103726414684,239.1642100902523,239.10691846349425,238.99042275701052,238.93356826235933,238.87657716392474,238.77111904313975,238.60593774825216,238.5006981935206,238.39502150668216,238.2889623292502,238.10859069364852,237.98805151517612,237.86680199703005,237.74506070526377,237.5628312582078,237.43486083391846,237.30618006995542,237.17684360783204,236.98647257528546,236.85664433954184,236.71310108394488,236.5687382056475,236.3627123795232,236.21739327474202,236.07155507558392,235.8991611009328,235.6642572349977,235.49041526024254,235.31548045522018,235.13931621614722,234.9026638217846,234.72802954508572,234.55230243811963,234.3752639348329,234.1347593137784])
        expected['rhoNH'] = np.array([6371.199240493775,6371.199620246887,6371.198860740661,6371.2,6371.2,6371.199240493775,6371.199240493775,6371.199240493775,6371.199240493775,6371.198860740661,6371.199240493775,6371.198860740661,6371.199240493775,6371.2,6371.2,6371.199620246887,6371.199620246887,6371.199240493775,6371.2,6371.199620246887,6371.199240493775,6371.2,6371.2,6371.2,6371.199240493775,6371.199240493775,6371.2,6371.2,6371.199240493775,6371.2,6371.199620246887,6371.2,6371.199620246887,6371.199620246887,6371.199240493775,6371.199620246887,6371.199240493775,6371.199240493775,6371.199620246887,6371.2,6371.199240493775])
        expected['latSH'] = np.array([68.19033513103011,68.20945283051698,68.22899058663779,68.2461872954206,68.24377794619087,68.26302371172468,68.28557358126947,68.3079834319363,68.31122606424475,68.3347868017867,68.35740326567591,68.37991727672757,68.38591076772425,68.41023990154784,68.43356499756344,68.45422973489731,68.47084075495877,68.50015592687647,68.53037097621731,68.55812203481509,68.57567562098201,68.60291270784472,68.6285003040229,68.65279187180604,68.66973415604225,68.69686537497284,68.72252810323187,68.74628179361788,68.76513994591629,68.79189208934794,68.81610169486105,68.84304849868404,68.86826555709973,68.89614638929172,68.92370961768731,68.94916231762936,68.97429570622771,68.99933517972498,69.02380262487925,69.04682548502407,69.073036335964])
        expected['lonSH'] = np.array([267.22120652131736,267.629405946874,268.0199561636153,268.4199866829246,267.31163822592833,267.7164771984133,268.1253050013736,268.52375091679545,267.42048412054163,267.8318254331165,268.2374567075452,268.64347047256746,267.53848246864277,267.9508892907281,268.36023618806536,268.77859893510697,267.66178104353986,268.094869678432,268.5076316703542,268.9297100403043,267.8231374324922,268.2360360281978,268.65221311470503,269.0661772199212,267.9475561584132,268.36130169757587,268.7715501798835,269.18524107753285,268.0650080913807,268.47599423411873,268.8968704907749,269.3055890107085,268.1749194955046,268.5998119033927,269.01292906515175,269.42749422701485,268.2916337680417,268.70849387346595,269.1165566952392,269.5227617055582,268.39288449229804])
        expected['rhoSH'] = np.array([271209.2223510742,271492.90096435545,271835.7359985351,272134.53182373045,271281.5030395508,271585.69439697266,271890.7607055664,272233.49852294923,271363.65123291017,271679.0954345703,272004.38283691404,272331.7847045898,271454.4760253906,271776.9927490234,272109.40128173825,272390.4793457031,271583.5799316406,271869.275793457,272232.4291381836,272550.35236816405,271677.63718261715,272019.40283203125,272340.023828125,272659.21087646484,271781.05155029293,272131.95557861327,272463.36763916013,272773.0274414062,271870.24796142575,272215.6106323242,272518.125,272857.58175048826,271992.935559082,272299.24138183595,272637.0454467773,272945.02825927734,272081.86462402344,272401.00306396483,272739.9737304687,273070.77818603517,272170.5020385742])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

    def test_90N_270_120000(self):
        """Test for latitude = 90, longitude = 270, rho = 120000"""
        lat = 90
        lon = 270
        rho = 120000

        expected = {}
        expected['latNH'] = np.array([78.8984418957194,78.90707440105666,78.91558737808343,78.92395179849576,78.89862204195877,78.90718368408338,78.91759374615212,78.92781000160318,78.90424499519298,78.9146729865083,78.9249327844153,78.93787172402425,78.91678351496184,78.9297173319289,78.94248295548765,78.95502403657744,78.93649117203826,78.95209815429173,78.96743961294123,78.98257531214198,78.96340126359446,78.979382198705,78.99510017153248,79.01055518207694,78.99158603920452,79.00691042238108,79.02556537655168,79.04393602409809,79.02769895689367,79.04587409027508,79.06365221891097,79.09216569737484,79.08588192333842,79.11393863290154,79.14157101696247,79.16872528778151,79.16107889100567,79.1878233504745,79.21402054103609,79.23979852873737,79.23086805639758])
        expected['lonNH'] = np.array([222.03207391586602,221.9699874963106,221.90740930313495,221.84420273255566,221.79726567257933,221.73515193226723,221.64709713348742,221.55822271200722,221.48625983891196,221.39868315337407,221.31038246778414,221.13775626670125,220.9828065951903,220.81105465832118,220.63863336291337,220.46533780329182,220.27212541205049,220.0598431326465,219.84644070221862,219.6319044603885,219.4388286729306,219.20795461860584,218.9758647906088,218.74253186818282,218.5328723814201,218.29949847785912,218.03881747799642,217.77659285538127,217.54065080069236,217.27835787618554,217.01458963081797,216.69424009836604,216.40249539815812,216.0810666958173,215.75787580467065,215.43290906433978,215.1539504782581,214.84212502189035,214.5286329993651,214.21382958051922,213.935089560491])
        expected['rhoNH'] = np.array([6371.2,6371.199620246887,6371.199620246887,6371.199620246887,6371.199620246887,6371.199620246887,6371.198860740661,6371.199620246887,6371.2,6371.199240493775,6371.199620246887,6371.198860740661,6371.199620246887,6371.2,6371.199240493775,6371.2,6371.199620246887,6371.199240493775,6371.2,6371.199620246887,6371.2,6371.2,6371.2,6371.199240493775,6371.199240493775,6371.199620246887,6371.2,6371.199620246887,6371.199620246887,6371.199620246887,6371.199620246887,6371.2,6371.199620246887,6371.199240493775,6371.2,6371.2,6371.199620246887,6371.199240493775,6371.2,6371.199620246887,6371.199240493775])
        expected['latSH'] = np.array([73.76546679576927,73.6725284117329,73.5846785186282,73.49383358757244,73.72931460449239,73.6331455409786,73.54314926092722,73.4522309053379,73.6852137805689,73.59044832092957,73.49639490851119,73.41110975143982,73.64449902292645,73.55596098826288,73.46222688718821,73.37188226748916,73.6103702751912,73.51583191934176,73.42088545968942,73.32817076434837,73.57029926287802,73.47759993546262,73.39053380656517,73.30273513987925,73.55243319555656,73.45981583041119,73.37157149388192,73.28712474253118,73.54256527975319,73.45781287743708,73.37191471088771,73.28943334647064,73.54950987459179,73.46764834984191,73.38075980586288,73.30005941327188,73.57014899871629,73.48558784169694,73.40441787360051,73.32345622627376,73.60148932172288])
        expected['lonSH'] = np.array([350.3579412496324,350.43211710401874,350.4985885050213,350.56877552893235,350.38744766684687,350.46648661592224,350.5413454892256,350.61713326825605,350.4496570298073,350.5321657149811,350.6124887396204,350.6834680654752,350.5244612615973,350.6013145501383,350.684424291959,350.7623977315239,350.6063142486107,350.7001883685634,350.7917948657116,350.8799862682748,350.724476521252,350.8160556976435,350.8970617411998,350.97855955837645,350.81900633936493,350.90911019489573,350.99768408805244,351.08030205625295,350.9240546487997,351.0074649189439,351.09259639675895,351.1788753463546,351.03057827909527,351.11713043625764,351.21089527318355,351.2948246377047,351.1359817583669,351.2243097647135,351.307774676371,351.3893544558177,351.22447368925356])
        expected['rhoSH'] = np.array([327743.56041259767,328264.4966186523,328804.7303588867,329309.40705566405,327946.1116088867,328462.8431884766,329007.79194335936,329528.7767578125,328135.9274047851,328669.76914062497,329199.3819458008,329737.8900878906,328291.8145385742,328852.0506347656,329376.3651245117,329890.90932617185,328487.8765136719,329023.95423583983,329577.99276123045,330110.0116821289,328679.73386230465,329194.0836303711,329747.1985961914,330278.97447509767,328802.1298095703,329332.95782470703,329836.68665771483,330333.5130981445,328807.93851318356,329354.3212158203,329858.12296142575,330370.86865234375,328782.75936279295,329328.58306884766,329813.1844970703,330318.12854003906,328725.0125854492,329232.3870483398,329724.6442993164,330217.48485107423,328624.97650146484])

        years = np.arange(1965,2006)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt])

# --------------------------------------------------------------------------------------------------

class Trace2006to2015(unittest.TestCase):
    def test_vs_2010_90S_0_30000(self):
        """Test for latitude = -90, longitude = 0, rho = 30000"""
        lat = -90
        lon = 0
        rho = 30000

        expected = {}
        expected['latNH'] = np.array([-7.3281192951740195,-7.340816616841067,-7.353971561182519,-7.436289001059507,-7.448781417051464,-7.464545493655848,-7.480869645772188,-7.566247010397348,-7.581908634164179,-7.5981508240104745])
        expected['lonNH'] = np.array([351.36719732215016,351.3801473608165,351.3928788334294,351.522024050256,351.5348648058956,351.5524047316842,351.5698080536894,351.703652440665,351.72116504569686,351.7386230092154])
        expected['rhoNH'] = np.array([293211.9597290039,293222.58066406247,293233.7119873047,293306.79471435543,293317.6100830078,293332.1196899414,293347.40703125,293424.52425537107,293439.3741210937,293455.0746337891])
        expected['latSH'] = np.array([-78.47459353931507,-78.47418372796488,-78.47374659585799,-78.47433399212662,-78.47386953926306,-78.47363731283127,-78.47336410526447,-78.47412908645151,-78.47384221850638,-78.47354169018288])
        expected['lonSH'] = np.array([136.39874112137124,136.33131349388486,136.26379024375012,136.2005426920358,136.1329648003877,136.06678026733027,136.00058207389452,135.93868689963585,135.87227014014664,135.80578507876575])
        expected['rhoSH'] = np.array([6371.198860740661,6371.1984809875485,6371.198101234436,6371.198860740661,6371.1984809875485,6371.198860740661,6371.198860740661,6371.198101234436,6371.1984809875485,6371.198860740661])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_60S_0_30000(self):
        """Test for latitude = -60, longitude = 0, rho = 30000"""
        lat = -60
        lon = 0
        rho = 30000

        expected = {}
        expected['latNH'] = np.array([5.0232259696618655,5.006649100546241,4.98987415594469,4.931558000811123,4.91578709401756,4.898137885202246,4.880352072603529,4.820635728690107,4.803819802953541,4.786805801731035])
        expected['lonNH'] = np.array([355.50921528014266,355.51599082779927,355.5227390546993,355.59737936194915,355.6040456265791,355.6131980800669,355.6222685712847,355.69944970890583,355.70849287936693,355.717454087558])
        expected['rhoNH'] = np.array([320921.68764648435,320929.82955322263,320937.8256347656,320973.2854614258,320980.5038085937,320989.3991455078,320998.3673950195,321035.309777832,321043.5489013672,321051.69080810546])
        expected['latSH'] = np.array([-79.77159182118714,-79.75668834841818,-79.74173023413584,-79.72716827082539,-79.71215551502968,-79.69798970269107,-79.68379656959578,-79.66999958747238,-79.65575181286371,-79.64146305712006])
        expected['lonSH'] = np.array([59.71240289427038,59.66866919301479,59.6250720955426,59.57657092224634,59.53308310780087,59.48595480252778,59.438826497254695,59.386835097292554,59.33989120712706,59.292940486772395])
        expected['rhoSH'] = np.array([6371.192404937744,6371.192784690857,6371.192784690857,6371.193544197083,6371.193923950195,6371.1946834564205,6371.195442962647,6371.196202468872,6371.196961975097,6371.198101234436])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_30S_0_30000(self):
        """Test for latitude = -30, longitude = 0, rho = 30000"""
        lat = -30
        lon = 0
        rho = 30000

        expected = {}
        expected['latNH'] = np.array([64.7283734954864,64.79994534025167,64.87163159068554,64.94208840706881,65.01305578009253,65.08579387965858,65.15784725276033,65.22924492770177,65.30090727247355,65.37225372099621])
        expected['lonNH'] = np.array([339.16337048300824,339.348004156652,339.5335667360229,339.7293745991488,339.9171228390541,340.11678292887194,340.31756316971365,340.52897118490387,340.7321556523334,340.93640562927345])
        expected['rhoNH'] = np.array([6371.197341728211,6371.195063209533,6371.198860740661,6371.195063209533,6371.196961975097,6371.199240493775,6371.196961975097,6371.195442962647,6371.196202468872,6371.196961975097])
        expected['latSH'] = np.array([-69.43951002219549,-69.4165059450709,-69.39348820756794,-69.3697191492563,-69.34659212872663,-69.32502239132774,-69.30342533317216,-69.28107695420786,-69.25938427340392,-69.23769159259996])
        expected['lonSH'] = np.array([31.191066297765804,31.154087653599355,31.11711242452749,31.07922536520143,31.042205739899963,30.9990799254805,30.955923375209775,30.911858409779438,30.86857550100907,30.825234535630752])
        expected['rhoSH'] = np.array([6371.185569381713,6371.183670616149,6371.182911109924,6371.1844301223755,6371.185189628601,6371.187847900391,6371.192025184631,6371.196202468872,6371.196961975097,6371.192025184631])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_0N_0_30000(self):
        """Test for latitude = 0, longitude = 0, rho = 30000"""
        lat = 0
        lon = 0
        rho = 30000

        expected = {}
        expected['latNH'] = np.array([61.922361029715915,61.969045372692946,62.015700687366014,62.061433926501124,62.107206439223965,62.15413325391654,62.20096956860261,62.24664304358248,62.292579480845404,62.33846981433143])
        expected['lonNH'] = np.array([347.01773285868603,347.17488185110966,347.33244065488356,347.49049123227763,347.64897894177864,347.8158541235804,347.98319375824565,348.15113444955796,348.3195122729771,348.4883272285031])
        expected['rhoNH'] = np.array([6371.194303703308,6371.194303703308,6371.197341728211,6371.196202468872,6371.194303703308,6371.195063209533,6371.198860740661,6371.196202468872,6371.193923950195,6371.1965822219845])
        expected['latSH'] = np.array([-63.42145766525394,-63.39043494604374,-63.35941222683354,-63.328526111406745,-63.297271165764755,-63.26869365427743,-63.23995221825001,-63.211524970924415,-63.182633270735266,-63.15352300449268])
        expected['lonSH'] = np.array([29.302969784742498,29.229138854909248,29.1553523213056,29.078983976195687,29.004913989741482,28.923156625376432,28.841122638349994,28.75678687757326,28.67455481506089,28.592003441204824])
        expected['rhoSH'] = np.array([6371.186708641052,6371.192025184631,6371.180252838135,6371.188607406616,6371.188607406616,6371.180632591248,6371.192025184631,6371.185949134827,6371.181392097473,6371.196961975097])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_30N_0_30000(self):
        """Test for latitude = 30, longitude = 0, rho = 30000"""
        lat = 30
        lon = 0
        rho = 30000

        expected = {}
        expected['latNH'] = np.array([66.59965749786772,66.62916049998759,66.65847567190528,66.6876696079652,66.71663985532982,66.74593112158541,66.77502260480779,66.8040150502872,66.83262159007852,66.86099590343804])
        expected['lonNH'] = np.array([349.72175010958074,349.87403600731534,350.02656779186003,350.1811486331558,350.3341995120774,350.49440842924923,350.65491787474457,350.81747637699084,350.9785868791331,351.14002523035555])
        expected['rhoNH'] = np.array([6371.196202468872,6371.196202468872,6371.196202468872,6371.196961975097,6371.198101234436,6371.198101234436,6371.1984809875485,6371.198860740661,6371.199620246887,6371.199240493775])
        expected['latSH'] = np.array([-66.8985976886807,-66.88152221575567,-66.86433745980392,-66.85254855329649,-66.83498130675122,-66.82126628689781,-66.80736002174768,-66.79880862490683,-66.78456085029816,-66.77017647190613])
        expected['lonSH'] = np.array([42.69778353964873,42.5716982475703,42.44550708755973,42.305682869965814,42.178996521240414,42.04304160581131,41.90675201111288,41.75721184942462,41.62043389620053,41.48373107505731])
        expected['rhoSH'] = np.array([6371.195063209533,6371.185569381713,6371.189746665955,6371.184809875488,6371.199240493775,6371.1844301223755,6371.192025184631,6371.184050369263,6371.198860740661,6371.184809875488])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_60N_0_30000(self):
        """Test for latitude = 60, longitude = 0, rho = 30000"""
        lat = 60
        lon = 0
        rho = 30000

        expected = {}
        expected['latNH'] = np.array([77.05787154648834,77.08250035486176,77.10698999813084,77.13115947628258,77.15516332234695,77.17953343730555,77.203631198471,77.22746172848518,77.25112491886469,77.27452173186657])
        expected['lonNH'] = np.array([345.6819117815716,345.90167994830597,346.1219672094172,346.3412436025313,346.56289690147656,346.7944129935833,347.02672138763376,347.2579096306604,347.4914747795181,347.72585955107627])
        expected['rhoNH'] = np.array([6371.198860740661,6371.199240493775,6371.199240493775,6371.198860740661,6371.199240493775,6371.198860740661,6371.199620246887,6371.199620246887,6371.199620246887,6371.199240493775])
        expected['latSH'] = np.array([30.298381974429063,30.30234348414767,30.30601129573197,30.244068310149125,30.248624046325524,30.25242846169322,30.255911858169924,30.19425574053222,30.198647552168538,30.202704684535526])
        expected['lonSH'] = np.array([4.958868028477821,4.911843456702752,4.864743752846814,4.875867142797002,4.828820372907131,4.77938773256281,4.729949969576612,4.738684500864589,4.689289426560703,4.639807694231722])
        expected['rhoSH'] = np.array([343078.7323852539,343083.8119628906,343088.79432373046,343067.81979980465,343073.11811523436,343078.2706054687,343083.03422851564,343061.54931640625,343066.628894043,343071.82999267575])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_90N_0_30000(self):
        """Test for latitude = 90, longitude = 0, rho = 30000"""
        lat = 90
        lon = 0
        rho = 30000

        expected = {}
        expected['latNH'] = np.array([86.945733209788,86.98966071766128,87.03336282929197,87.07595524862593,87.11921553239468,87.16409926675178,87.20874864024297,87.25223047827292,87.29633813238556,87.34016959072365])
        expected['lonNH'] = np.array([257.0690319050638,256.6581823661092,256.23536633572877,255.8076052483892,255.36047374456348,254.87995627607475,254.38515005184234,253.88236616665935,253.35564929862466,252.81199356144833])
        expected['rhoNH'] = np.array([6371.200759506225,6371.199620246887,6371.199240493775,6371.199620246887,6371.199620246887,6371.2,6371.2,6371.199620246887,6371.199620246887,6371.199620246887])
        expected['latSH'] = np.array([47.56281549794393,47.556425855975384,47.549564930954105,47.476884887996,47.47059428377042,47.46291715114332,47.454649207153025,47.3810402584678,47.37349631452952,47.36552206867353])
        expected['lonSH'] = np.array([8.948007996712033,8.864925575647998,8.781669838533775,8.810213199075257,8.72738605633145,8.640441163291774,8.553371619299744,8.578152399382196,8.491493520514014,8.40469120767326])
        expected['rhoSH'] = np.array([327456.9409912109,327457.6458129883,327457.7916381836,327413.63090820314,327413.9954711914,327412.7802612305,327411.1275756836,327365.14403076173,327363.78299560543,327362.0573974609])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_90S_90_30000(self):
        """Test for latitude = -90, longitude = 90, rho = 30000"""
        lat = -90
        lon = 90
        rho = 30000

        expected = {}
        expected['latNH'] = np.array([-7.328112464984841,-7.340802956462724,-7.35396473099334,-7.4362753406811635,-7.448774586862299,-7.464545493655848,-7.480855985393845,-7.566240180208169,-7.581894973785836,-7.5981508240104745])
        expected['lonNH'] = np.array([351.36719732215016,351.3801200400598,351.3928788334294,351.522024050256,351.5348648058956,351.55237741092753,351.5697807329327,351.703652440665,351.7211377249402,351.7386230092154])
        expected['rhoNH'] = np.array([293211.9597290039,293222.55635986326,293233.7362915039,293306.8190185547,293317.58577880857,293332.1196899414,293347.4313354492,293424.52425537107,293439.4227294922,293455.0746337891])
        expected['latSH'] = np.array([-78.47459353931507,-78.47418372796488,-78.47374659585799,-78.47434765250495,-78.47386953926306,-78.47363731283127,-78.47336410526447,-78.47412908645151,-78.47384221850638,-78.47354169018288])
        expected['lonSH'] = np.array([136.39874112137124,136.33131349388486,136.26380390412845,136.2005426920358,136.13297846076605,136.06679392770863,136.00059573427285,135.9387005600142,135.87227014014664,135.80579873914408])
        expected['rhoSH'] = np.array([6371.199240493775,6371.1984809875485,6371.198101234436,6371.198860740661,6371.1984809875485,6371.198860740661,6371.198860740661,6371.1984809875485,6371.1984809875485,6371.198860740661])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_60S_90_30000(self):
        """Test for latitude = -60, longitude = 90, rho = 30000"""
        lat = -60
        lon = 90
        rho = 30000

        expected = {}
        expected['latNH'] = np.array([9.196485212917992,9.266870312314978,9.337214430576935,9.315835938474791,9.387443641733213,9.463736854762246,9.540043728169636,9.523944972295908,9.60158373259145,9.679229323076157])
        expected['lonNH'] = np.array([28.24647612392493,28.263452559106994,28.280391428248624,28.36820887795477,28.38538509617006,28.405013352297384,28.424542570681744,28.514779614901368,28.53452910688646,28.554259815851335])
        expected['rhoNH'] = np.array([293541.9621459961,293480.76417236327,293419.27454833983,293478.844140625,293416.1636108398,293350.7853149414,293285.13967285154,293340.89350585936,293274.1055664062,293206.637109375])
        expected['latSH'] = np.array([-66.62857299003343,-66.62911940516702,-66.62962483916561,-66.63082695245953,-66.63131872607977,-66.63301261299392,-66.63466551877306,-66.63700144346922,-66.63864068887003,-66.64026627389248])
        expected['lonSH'] = np.array([110.18320467167668,110.14914934847499,110.11497791205741,110.07910575853651,110.04482503909222,110.01254556507473,109.98022510992223,109.94610148482886,109.91356929381209,109.88104393298448])
        expected['rhoSH'] = np.array([6371.198101234436,6371.1984809875485,6371.198101234436,6371.197721481323,6371.198101234436,6371.1984809875485,6371.198101234436,6371.198860740661,6371.198101234436,6371.198101234436])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_30S_90_30000(self):
        """Test for latitude = -30, longitude = 90, rho = 30000"""
        lat = -30
        lon = 90
        rho = 30000

        expected = {}
        expected['latNH'] = np.array([73.20916667089195,73.14699658151919,73.08451913363379,73.02332234621777,72.96045557754968,72.89167557260765,72.82277433180786,72.75509910996408,72.68586318989495,72.61652652453557])
        expected['lonNH'] = np.array([67.11983184160842,67.35636812275513,67.59134029058191,67.85212374328216,68.08226013717658,68.32648038113956,68.56874036081074,68.83570513470985,69.0725282838017,69.307199923305])
        expected['rhoNH'] = np.array([6371.198860740661,6371.199620246887,6371.198101234436,6371.199620246887,6371.1984809875485,6371.1984809875485,6371.199240493775,6371.199240493775,6371.199620246887,6371.199620246887])
        expected['latSH'] = np.array([-55.033411628588,-55.04495464828531,-55.05647034722597,-55.067726498978146,-55.079214877162116,-55.0937221989592,-55.10821586037798,-55.1224226538516,-55.136902654892026,-55.15130069366242])
        expected['lonSH'] = np.array([101.76356901009943,101.7352851967464,101.7069740626367,101.67780915488075,101.64943654906851,101.62430145292286,101.5991731869664,101.57315699641781,101.54792627762379,101.52271604939727])
        expected['rhoSH'] = np.array([6371.197341728211,6371.197341728211,6371.197341728211,6371.198101234436,6371.197721481323,6371.198101234436,6371.1984809875485,6371.198101234436,6371.199240493775,6371.199240493775])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_0N_90_30000(self):
        """Test for latitude = 0, longitude = 90, rho = 30000"""
        lat = 0
        lon = 90
        rho = 30000

        expected = {}
        expected['latNH'] = np.array([66.42930916487302,66.37336137783414,66.31721722285664,66.26029784140835,66.2043876204099,66.14312765374407,66.08148690403199,66.01947390901016,65.95828224423602,65.89708716436728])
        expected['lonNH'] = np.array([87.46753228477752,87.4971001736945,87.52654511920643,87.5588041026564,87.58764116133219,87.61918297491931,87.65063599604721,87.68471864000558,87.71548181202732,87.74599909723894])
        expected['rhoNH'] = np.array([6371.1984809875485,6371.199620246887,6371.198860740661,6371.198860740661,6371.198860740661,6371.199240493775,6371.198860740661,6371.1984809875485,6371.199240493775,6371.2])
        expected['latSH'] = np.array([-48.464887005678435,-48.49215312084513,-48.519378254876784,-48.54592036999148,-48.573282107806534,-48.60515177047381,-48.63680286708765,-48.66775728440615,-48.699558645181725,-48.73137366633566])
        expected['lonSH'] = np.array([100.75286493747763,100.72533927512247,100.69775897125396,100.66929757298252,100.64157383514143,100.61787307872149,100.59407669965316,100.56935141485772,100.54545258295184,100.52148544915427])
        expected['rhoSH'] = np.array([6371.198101234436,6371.196961975097,6371.195822715759,6371.196961975097,6371.1984809875485,6371.198101234436,6371.197341728211,6371.195442962647,6371.196961975097,6371.198860740661])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_30N_90_30000(self):
        """Test for latitude = 30, longitude = 90, rho = 30000"""
        lat = 30
        lon = 90
        rho = 30000

        expected = {}
        expected['latNH'] = np.array([68.19689211263332,68.15419489258429,68.11161720084571,68.06875947135117,68.0263200909433,67.9798543140197,67.93312898990764,67.8861509487963,67.83963736054851,67.79324159306391])
        expected['lonNH'] = np.array([89.4486081629722,89.46342284328196,89.47807359905164,89.49413137379034,89.5085567333174,89.52557756472908,89.54269401878913,89.56117651068318,89.5779377949064,89.5944941734545])
        expected['rhoNH'] = np.array([6371.198860740661,6371.198860740661,6371.1984809875485,6371.199620246887,6371.199240493775,6371.2,6371.199240493775,6371.198860740661,6371.198860740661,6371.198860740661])
        expected['latSH'] = np.array([-49.87922793749132,-49.91968997813447,-49.959851490454156,-49.99952122915357,-50.03981934525666,-50.085322065507285,-50.13098871029797,-50.1759723361717,-50.221516037557336,-50.26688215402456])
        expected['lonSH'] = np.array([103.33552338719952,103.31183629115792,103.28803991208959,103.26107432524638,103.237155002773,103.21839930331214,103.19960262271627,103.1775479418863,103.15863514807454,103.13958575047937])
        expected['rhoSH'] = np.array([6371.197341728211,6371.198860740661,6371.197721481323,6371.196961975097,6371.198860740661,6371.197341728211,6371.198860740661,6371.196961975097,6371.1984809875485,6371.198101234436])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_60N_90_30000(self):
        """Test for latitude = 60, longitude = 90, rho = 30000"""
        lat = 60
        lon = 90
        rho = 30000

        expected = {}
        expected['latNH'] = np.array([77.97575761715791,77.9388037324272,77.90185497033838,77.86574973661203,77.82893757830661,77.78901768392882,77.74915669993263,77.71001203202565,77.67018434520165,77.63037458762423])
        expected['lonNH'] = np.array([88.93361189955324,88.97780322348324,89.0217008492789,89.07070062638458,89.11428406347842,89.16252568958622,89.2106580326673,89.2639335081934,89.31165603992429,89.35900974143998])
        expected['rhoNH'] = np.array([6371.199620246887,6371.199620246887,6371.198860740661,6371.199240493775,6371.199240493775,6371.199620246887,6371.2,6371.199620246887,6371.199620246887,6371.2])
        expected['latSH'] = np.array([-58.71163242117996,-58.75992185861193,-58.80791076772044,-58.85210209165044,-58.90017296302898,-58.95257417434132,-59.0051256498154,-59.05341508724737,-59.10559773250628,-59.15790332117024])
        expected['lonSH'] = np.array([118.48912451376238,118.44333492556662,118.39668473353542,118.30976374615784,118.26294962958659,118.2194413245736,118.17552320821042,118.09085618325894,118.04614576495203,118.00075232772814])
        expected['rhoSH'] = np.array([6371.199240493775,6371.199240493775,6371.198860740661,6371.199240493775,6371.2,6371.199240493775,6371.199620246887,6371.199620246887,6371.199240493775,6371.199620246887])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_90N_90_30000(self):
        """Test for latitude = 90, longitude = 90, rho = 30000"""
        lat = 90
        lon = 90
        rho = 30000

        expected = {}
        expected['latNH'] = np.array([86.945733209788,86.98966071766128,87.03336282929197,87.07595524862593,87.11921553239468,87.16409926675178,87.20874864024297,87.25223047827292,87.29633813238556,87.34016959072365])
        expected['lonNH'] = np.array([257.0690319050638,256.6581823661092,256.23536633572877,255.8076052483892,255.36047374456348,254.87995627607475,254.38515005184234,253.88236616665935,253.35564929862466,252.81199356144833])
        expected['rhoNH'] = np.array([6371.200759506225,6371.199620246887,6371.199240493775,6371.199620246887,6371.199620246887,6371.2,6371.2,6371.199620246887,6371.199620246887,6371.199620246887])
        expected['latSH'] = np.array([47.56281549794393,47.556425855975384,47.549564930954105,47.476884887996,47.47059428377042,47.46291715114332,47.454649207153025,47.3810402584678,47.37349631452952,47.36552206867353])
        expected['lonSH'] = np.array([8.948007996712033,8.864925575647998,8.781669838533775,8.810213199075257,8.72738605633145,8.640441163291774,8.553371619299744,8.578152399382196,8.491493520514014,8.40469120767326])
        expected['rhoSH'] = np.array([327456.9409912109,327457.6458129883,327457.7916381836,327413.63090820314,327413.9954711914,327412.7802612305,327411.1275756836,327365.14403076173,327363.78299560543,327362.0573974609])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_90S_180_30000(self):
        """Test for latitude = -90, longitude = 180, rho = 30000"""
        lat = -90
        lon = 180
        rho = 30000

        expected = {}
        expected['latNH'] = np.array([-7.328112464984841,-7.340809786651903,-7.35396473099334,-7.436282170870342,-7.448781417051464,-7.464545493655848,-7.480862815583009,-7.566247010397348,-7.581908634164179,-7.5981508240104745])
        expected['lonNH'] = np.array([351.36719732215016,351.3801473608165,351.3928788334294,351.522024050256,351.5348648058956,351.5524047316842,351.5698080536894,351.703652440665,351.72116504569686,351.7386230092154])
        expected['rhoNH'] = np.array([293211.9840332031,293222.58066406247,293233.7362915039,293306.8433227539,293317.6100830078,293332.1439941406,293347.40703125,293424.52425537107,293439.398425293,293455.0746337891])
        expected['latSH'] = np.array([-78.47459353931507,-78.47418372796488,-78.47374659585799,-78.47434765250495,-78.47386953926306,-78.47363731283127,-78.47336410526447,-78.47412908645151,-78.47384221850638,-78.47354169018288])
        expected['lonSH'] = np.array([136.3987274609929,136.33131349388486,136.26379024375012,136.20051537127912,136.13295114000937,136.06676660695194,136.00058207389452,135.93868689963585,135.87227014014664,135.80579873914408])
        expected['rhoSH'] = np.array([6371.198860740661,6371.1984809875485,6371.198101234436,6371.198860740661,6371.1984809875485,6371.199240493775,6371.199240493775,6371.198860740661,6371.198860740661,6371.1984809875485])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_60S_180_30000(self):
        """Test for latitude = -60, longitude = 180, rho = 30000"""
        lat = -60
        lon = 180
        rho = 30000

        expected = {}
        expected['latNH'] = np.array([-15.76401080697589,-15.476446182540016,-18.751521889561133,-15.166635631977414,-16.68979513764694,-18.12761825982632,-17.71140702237325,-17.298638200261877,-17.01099161355596,-16.296089373509062])
        expected['lonNH'] = np.array([279.34208754317865,279.00412978304644,279.9351938499459,278.3579665668065,278.63890590774747,280.1508639031782,280.4342621122204,280.2115433037646,279.9809287966283,278.89492871859625])
        expected['rhoNH'] = np.array([100597.54744262695,100418.40119018554,99819.82521972655,99877.53554077148,99479.82162475586,100223.43290405274,100717.40360107421,100629.19151000977,100578.65092773437,99872.52887573242])
        expected['latSH'] = np.array([-67.69509336855256,-67.69923246318959,-67.70341253896166,-67.70710084111346,-67.71129457726386,-67.7154063511442,-67.7195044646462,-67.72316544604132,-67.7273182010567,-67.73142997493704])
        expected['lonSH'] = np.array([159.61459509137958,159.58727433469954,159.55987161574944,159.53281040625785,159.50525742314602,159.47871530803135,159.452104891025,159.42574036082874,159.39892503814727,159.37212337584415])
        expected['rhoSH'] = np.array([6371.199620246887,6371.199240493775,6371.198860740661,6371.199620246887,6371.199240493775,6371.2,6371.2,6371.199240493775,6371.199620246887,6371.199240493775])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_30S_180_30000(self):
        """Test for latitude = -30, longitude = 180, rho = 30000"""
        lat = -30
        lon = 180
        rho = 30000

        expected = {}
        expected['latNH'] = np.array([67.31295805855424,67.31980873829177,67.32636401234768,67.334240928008,67.34015416428194,67.34689385344545,67.35331935390714,67.36105454314219,67.36680043978146,67.37211603450302])
        expected['lonNH'] = np.array([206.17471058779256,205.9669498936191,205.75925750133737,205.54379235378013,205.33618192376844,205.1181213043266,204.9001016660198,204.6743092724375,204.45634427564406,204.23842025998565])
        expected['rhoNH'] = np.array([6371.197341728211,6371.197341728211,6371.1965822219845,6371.1965822219845,6371.1965822219845,6371.196961975097,6371.197721481323,6371.198101234436,6371.198860740661,6371.2])
        expected['latSH'] = np.array([-58.072231092218374,-58.08046830035741,-58.08873282925313,-58.09676513171706,-58.10502966061276,-58.11336249140018,-58.12168166180925,-58.12978226616491,-58.13814241770899,-58.14652989000976])
        expected['lonSH'] = np.array([163.73630006678047,163.72788527372302,163.7194568202872,163.71176602728178,163.70328293233263,163.69630247900088,163.68930836529077,163.68305191201105,163.67598949640927,163.66888609967245])
        expected['rhoSH'] = np.array([6371.198101234436,6371.198101234436,6371.197721481323,6371.197721481323,6371.198101234436,6371.197341728211,6371.197721481323,6371.198101234436,6371.197721481323,6371.1984809875485])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_0N_180_30000(self):
        """Test for latitude = 0, longitude = 180, rho = 30000"""
        lat = 0
        lon = 180
        rho = 30000

        expected = {}
        expected['latNH'] = np.array([64.34564896798662,64.34032654307588,64.33456869360556,64.32865204223704,64.3226465984093,64.31650455079817,64.31004319184333,64.30328471965962,64.2963845210506,64.28944846394845])
        expected['lonNH'] = np.array([195.6190083953747,195.4736892905935,195.32852044997404,195.18288715649103,195.03830571214021,194.88593785213556,194.73378855818436,194.5811065094779,194.42946264952528,194.27816029903116])
        expected['rhoNH'] = np.array([6371.195063209533,6371.1984809875485,6371.1965822219845,6371.1946834564205,6371.1946834564205,6371.196961975097,6371.198101234436,6371.1946834564205,6371.195063209533,6371.1965822219845])
        expected['latSH'] = np.array([-53.001362048617494,-53.01589669117129,-53.03045865448175,-53.044911334765516,-53.05956892072436,-53.07439043122329,-53.08925292285721,-53.104006131464445,-53.11888228347675,-53.13364915246231])
        expected['lonSH'] = np.array([162.9938311832434,162.99685012685654,162.99984174971303,163.00374861791826,163.0066582785047,163.01180824113888,163.01693088301639,163.02299609099936,163.02809141212018,163.03324137475437])
        expected['rhoSH'] = np.array([6371.200759506225,6371.1984809875485,6371.1965822219845,6371.1965822219845,6371.196202468872,6371.196961975097,6371.197721481323,6371.198860740661,6371.199620246887,6371.198101234436])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_30N_180_30000(self):
        """Test for latitude = 30, longitude = 180, rho = 30000"""
        lat = 30
        lon = 180
        rho = 30000

        expected = {}
        expected['latNH'] = np.array([67.65232966784467,67.64489671448041,67.63735277054212,67.62971661905004,67.62193020339623,67.61367591978427,67.60527137201058,67.59675412611557,67.58809515379528,67.57929274750242])
        expected['lonNH'] = np.array([191.68409543339533,191.54836591420883,191.41300522523753,191.27772649853625,191.14300784734692,191.00113115790742,190.8595549967914,190.71810177908043,190.57718131612472,190.43657504187084])
        expected['rhoNH'] = np.array([6371.199620246887,6371.198860740661,6371.196961975097,6371.197721481323,6371.196961975097,6371.1965822219845,6371.196202468872,6371.195822715759,6371.196202468872,6371.196961975097])
        expected['latSH'] = np.array([-54.971161284492496,-54.99748483355373,-55.023849363749974,-55.05006362978449,-55.07648280149411,-55.10357133174236,-55.13074182426067,-55.15772107148223,-55.18489156400054,-55.2120757168972])
        expected['lonSH'] = np.array([157.89122908075865,157.9025398740242,157.91385066728975,157.92756568714313,157.93883549927364,157.95379361355597,157.9687517278383,157.9861277290868,158.00105852261245,158.01597565575977])
        expected['rhoSH'] = np.array([6371.197721481323,6371.196961975097,6371.197341728211,6371.196961975097,6371.197341728211,6371.198101234436,6371.198101234436,6371.197721481323,6371.1984809875485,6371.198101234436])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_60N_180_30000(self):
        """Test for latitude = 60, longitude = 180, rho = 30000"""
        lat = 60
        lon = 180
        rho = 30000

        expected = {}
        expected['latNH'] = np.array([76.64365216295198,76.63789004461343,76.63194094984635,76.62627445415617,76.61997189709955,76.61333636832089,76.6065104480191,76.59993980603755,76.59272883382131,76.58531893234549])
        expected['lonNH'] = np.array([192.5914450834965,192.38917586141574,192.1874257337119,191.98342164358198,191.7827233650103,191.57254478387068,191.36287163672964,191.15086256489244,190.9422549272619,190.73426200665668])
        expected['rhoNH'] = np.array([6371.198860740661,6371.198860740661,6371.198860740661,6371.199240493775,6371.1984809875485,6371.1984809875485,6371.198860740661,6371.199240493775,6371.198860740661,6371.198860740661])
        expected['latSH'] = np.array([60.71026712186898,60.86970422766459,61.02630338986006,61.27526037001244,61.428861079162274,61.579729712644095,61.72415577019131,61.96046324000083,62.09339408917491,62.21921983406489])
        expected['lonSH'] = np.array([189.27710944912616,189.21872499210087,189.15560038379164,189.10639570101085,189.04810686663396,188.99179878711638,188.93943855693905,188.88792527021883,188.84260013488662,188.7955674522619])
        expected['rhoSH'] = np.array([256241.94304199217,256216.44793701172,256087.53846435546,256049.7211303711,255973.86772460936,255905.28127441407,255839.46550292967,255765.2161743164,255737.67951660155,255636.84139404297])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_90N_180_30000(self):
        """Test for latitude = 90, longitude = 180, rho = 30000"""
        lat = 90
        lon = 180
        rho = 30000

        expected = {}
        expected['latNH'] = np.array([86.945733209788,86.98966071766128,87.03336282929197,87.07595524862593,87.11921553239468,87.16409926675178,87.20874864024297,87.25223047827292,87.29633813238556,87.34016959072365])
        expected['lonNH'] = np.array([257.0690319050638,256.6581823661092,256.23536633572877,255.8076052483892,255.36047374456348,254.87995627607475,254.38515005184234,253.88236616665935,253.35564929862466,252.81199356144833])
        expected['rhoNH'] = np.array([6371.200759506225,6371.199620246887,6371.199240493775,6371.199620246887,6371.199620246887,6371.2,6371.2,6371.199620246887,6371.199620246887,6371.199620246887])
        expected['latSH'] = np.array([47.56281549794393,47.556425855975384,47.549564930954105,47.476884887996,47.47059428377042,47.46291715114332,47.454649207153025,47.3810402584678,47.37349631452952,47.36552206867353])
        expected['lonSH'] = np.array([8.948007996712033,8.864925575647998,8.781669838533775,8.810213199075257,8.72738605633145,8.640441163291774,8.553371619299744,8.578152399382196,8.491493520514014,8.40469120767326])
        expected['rhoSH'] = np.array([327456.9409912109,327457.6458129883,327457.7916381836,327413.63090820314,327413.9954711914,327412.7802612305,327411.1275756836,327365.14403076173,327363.78299560543,327362.0573974609])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_90S_270_30000(self):
        """Test for latitude = -90, longitude = 270, rho = 30000"""
        lat = -90
        lon = 270
        rho = 30000

        expected = {}
        expected['latNH'] = np.array([-7.3281192951740195,-7.340816616841067,-7.353971561182519,-7.436282170870342,-7.448781417051464,-7.464565984223356,-7.480869645772188,-7.566253840586512,-7.581915464353358,-7.598157654199639])
        expected['lonNH'] = np.array([351.36719732215016,351.3801473608165,351.3928788334294,351.5220513710127,351.5348648058956,351.5524047316842,351.5698080536894,351.703652440665,351.7211923664536,351.7386230092154])
        expected['rhoNH'] = np.array([293211.9597290039,293222.58066406247,293233.7362915039,293306.79471435543,293317.58577880857,293332.1196899414,293347.40703125,293424.5485595703,293439.398425293,293455.0746337891])
        expected['latSH'] = np.array([-78.47457987893674,-78.47418372796488,-78.47374659585799,-78.47434765250495,-78.47386953926306,-78.47363731283127,-78.47336410526447,-78.47412908645151,-78.47384221850638,-78.47352802980456])
        expected['lonSH'] = np.array([136.3987274609929,136.33129983350653,136.26376292299344,136.20051537127912,136.13295114000937,136.06676660695194,136.00058207389452,135.93865957887917,135.872283800525,135.80579873914408])
        expected['rhoSH'] = np.array([6371.198860740661,6371.1984809875485,6371.198101234436,6371.198860740661,6371.198860740661,6371.1984809875485,6371.199240493775,6371.1984809875485,6371.1984809875485,6371.1984809875485])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_60S_270_30000(self):
        """Test for latitude = -60, longitude = 270, rho = 30000"""
        lat = -60
        lon = 270
        rho = 30000

        expected = {}
        expected['latNH'] = np.array([62.841192227811874,62.94631737687483,63.05164060142373,63.14791382532235,63.25352221026908,63.36417639746517,63.4750013393905,63.57660040329444,63.68750218484794,63.79892476832565])
        expected['lonNH'] = np.array([287.60596074073374,287.54724843462833,287.48755258128244,287.38753129107675,287.326715286707,287.26357701801936,287.1991546737678,287.0942702888731,287.0285911898142,286.96165533594814])
        expected['rhoNH'] = np.array([6371.1984809875485,6371.198101234436,6371.1984809875485,6371.198101234436,6371.198101234436,6371.198860740661,6371.2,6371.1984809875485,6371.1984809875485,6371.2])
        expected['latSH'] = np.array([-80.5908183706168,-80.59994350334796,-80.60905497570073,-80.61905437264565,-80.62823414689015,-80.63641671351581,-80.64458561976315,-80.65369709211595,-80.66193430025498,-80.67022614990736])
        expected['lonSH'] = np.array([212.6251412399526,212.60646750276177,212.5876298410309,212.58406448228413,212.56492629222976,212.54880704578855,212.53256485594224,212.53162228983678,212.5151068924237,212.4984958723622])
        expected['rhoSH'] = np.array([6371.195822715759,6371.195442962647,6371.1946834564205,6371.195442962647,6371.195063209533,6371.195063209533,6371.195063209533,6371.195063209533,6371.195063209533,6371.195442962647])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_30S_270_30000(self):
        """Test for latitude = -30, longitude = 270, rho = 30000"""
        lat = -30
        lon = 270
        rho = 30000

        expected = {}
        expected['latNH'] = np.array([53.2311929052321,53.3166283264652,53.40257259679147,53.487584546296034,53.573621024176106,53.66400491746288,53.7541975654529,53.844397043632085,53.93496193693187,54.026230339716165])
        expected['lonNH'] = np.array([273.04623773231435,272.98831772815265,272.9301518371808,272.8681063987604,272.8094487341683,272.74917914493216,272.6886090273725,272.6241047208509,272.56301550891425,272.50165308941087])
        expected['rhoNH'] = np.array([6371.197341728211,6371.196961975097,6371.199240493775,6371.196961975097,6371.1965822219845,6371.1984809875485,6371.1965822219845,6371.1984809875485,6371.196961975097,6371.1984809875485])
        expected['latSH'] = np.array([-73.49690193637153,-73.50453808786361,-73.51206495632894,-73.51953718328096,-73.52707771212465,-73.53270578800073,-73.53836118463352,-73.54400292088792,-73.54972661941241,-73.5554639783152])
        expected['lonSH'] = np.array([237.50974702797848,237.57395080617658,237.63861903723827,237.70566417413113,237.7710154241098,237.84128441029088,237.91177196252542,237.98455445832107,238.05558842568922,238.1269502421375])
        expected['rhoSH'] = np.array([6371.196961975097,6371.198860740661,6371.198101234436,6371.195442962647,6371.193544197083,6371.193164443969,6371.192025184631,6371.191645431519,6371.192784690857,6371.1946834564205])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_0N_270_30000(self):
        """Test for latitude = 0, longitude = 270, rho = 30000"""
        lat = 0
        lon = 270
        rho = 30000

        expected = {}
        expected['latNH'] = np.array([51.77645140447859,51.84417956028844,51.91208871611129,51.979837362488645,52.04791044285158,52.118927334746786,52.19004667947954,52.26114553364479,52.3325722368902,52.40443607224249])
        expected['lonNH'] = np.array([270.9376490525047,270.88560301102916,270.8333110827436,270.78006292797414,270.72733386758165,270.67269235422157,270.61780495405134,270.5619340066406,270.50655483285016,270.4509024514929])
        expected['rhoNH'] = np.array([6371.196202468872,6371.197721481323,6371.198860740661,6371.1965822219845,6371.195822715759,6371.198101234436,6371.1984809875485,6371.196202468872,6371.195822715759,6371.199620246887])
        expected['latSH'] = np.array([-71.68421071178517,-71.68658761761631,-71.6884864102056,-71.69149169344038,-71.69358173132642,-71.69263916522095,-71.6918741840339,-71.6918741840339,-71.69072671225337,-71.6897841461479])
        expected['lonSH'] = np.array([237.07788782713692,237.18290881581504,237.28945976686722,237.3987974351008,237.5055942729631,237.6200955642092,237.7345695346986,237.85248592052972,237.96827128733977,238.08408397490652])
        expected['rhoSH'] = np.array([6371.192404937744,6371.2,6371.191645431519,6371.194303703308,6371.195822715759,6371.192025184631,6371.1946834564205,6371.196202468872,6371.191645431519,6371.194303703308])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_30N_270_30000(self):
        """Test for latitude = 30, longitude = 270, rho = 30000"""
        lat = 30
        lon = 270
        rho = 30000

        expected = {}
        expected['latNH'] = np.array([58.673699371762524,58.73398262137706,58.79446053138294,58.854808667794586,58.91536170988134,58.97763937473351,59.04017317167956,59.1026420818285,59.16549006747637,59.22846441162389])
        expected['lonNH'] = np.array([270.75033794470625,270.7090836021194,270.66761069347905,270.62471710549136,270.5828070647442,270.53914849556946,270.4951620773146,270.449782300469,270.4053860708639,270.3607712752054])
        expected['rhoNH'] = np.array([6371.198101234436,6371.199240493775,6371.198860740661,6371.2,6371.199240493775,6371.198860740661,6371.1984809875485,6371.198101234436,6371.197721481323,6371.198860740661])
        expected['latSH'] = np.array([-73.95306295027999,-73.97035698925848,-73.98761004710192,-74.01614657745424,-74.0332357107576,-74.0489041647136,-74.06454529791296,-74.09123767718935,-74.10674220660528,-74.12224673602122])
        expected['lonSH'] = np.array([209.92794051784958,210.09502060532643,210.26348039101563,210.47076297194718,210.64098494644225,210.82806382780888,211.01612625641602,211.24402234826266,211.4336557203789,211.62425897935728])
        expected['rhoSH'] = np.array([6371.196202468872,6371.196961975097,6371.195442962647,6371.198101234436,6371.195442962647,6371.195442962647,6371.195822715759,6371.195063209533,6371.196202468872,6371.197341728211])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_60N_270_30000(self):
        """Test for latitude = 60, longitude = 270, rho = 30000"""
        lat = 60
        lon = 270
        rho = 30000

        expected = {}
        expected['latNH'] = np.array([71.53985990000436,71.59616114933277,71.65247776658683,71.7079013366069,71.76425722744867,71.82196037310423,71.87971133008398,71.93659656058642,71.99441411191059,72.05228630474811])
        expected['lonNH'] = np.array([267.8858932105863,267.8327816596003,267.77915101423736,267.72267901017966,267.66828338362967,267.61148353049185,267.55424654524717,267.494058918281,267.4359749895792,267.3775085702839])
        expected['rhoNH'] = np.array([6371.2,6371.2,6371.198860740661,6371.2,6371.2,6371.199620246887,6371.199620246887,6371.199240493775,6371.199620246887,6371.199620246887])
        expected['latSH'] = np.array([30.943985115157012,30.86866861917928,30.79264861371704,30.663134566675254,30.586971127240446,30.5025021777749,30.417281907500644,30.277338161596255,30.19170124978264,30.105128602052723])
        expected['lonSH'] = np.array([329.4654854088306,329.4284931042858,329.3917193657945,329.47742457949977,329.4409240485752,329.40319408360006,329.3658739299751,329.4504043511432,329.4134120465984,329.3766109873504])
        expected['rhoSH'] = np.array([318596.09173583984,318550.3026245117,318503.9788208008,318366.70870361326,318318.8537353515,318263.0512939453,318206.2523803711,318057.24333496095,317998.5243896484,317938.80897216796])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_90N_270_30000(self):
        """Test for latitude = 90, longitude = 270, rho = 30000"""
        lat = 90
        lon = 270
        rho = 30000

        expected = {}
        expected['latNH'] = np.array([86.945733209788,86.98966071766128,87.03336282929197,87.07595524862593,87.11921553239468,87.16409926675178,87.20874864024297,87.25223047827292,87.29633813238556,87.34016959072365])
        expected['lonNH'] = np.array([257.0690319050638,256.6581823661092,256.23536633572877,255.8076052483892,255.36047374456348,254.87995627607475,254.38515005184234,253.88236616665935,253.35564929862466,252.81199356144833])
        expected['rhoNH'] = np.array([6371.200759506225,6371.199620246887,6371.199240493775,6371.199620246887,6371.199620246887,6371.2,6371.2,6371.199620246887,6371.199620246887,6371.199620246887])
        expected['latSH'] = np.array([47.56281549794393,47.556425855975384,47.549564930954105,47.476884887996,47.47059428377042,47.46291715114332,47.454649207153025,47.3810402584678,47.37349631452952,47.36552206867353])
        expected['lonSH'] = np.array([8.948007996712033,8.864925575647998,8.781669838533775,8.810213199075257,8.72738605633145,8.640441163291774,8.553371619299744,8.578152399382196,8.491493520514014,8.40469120767326])
        expected['rhoSH'] = np.array([327456.9409912109,327457.6458129883,327457.7916381836,327413.63090820314,327413.9954711914,327412.7802612305,327411.1275756836,327365.14403076173,327363.78299560543,327362.0573974609])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_90S_0_60000(self):
        """Test for latitude = -90, longitude = 0, rho = 60000"""
        lat = -90
        lon = 0
        rho = 60000

        expected = {}
        expected['latNH'] = np.array([-32.81628157939724,-33.36795595865917,-33.88125833516396,-34.159602204220334,-34.56946819593445,-34.89078761524853,-35.20709367571182,-35.39500584015721,-35.68117710600241,-35.958045654198045])
        expected['lonNH'] = np.array([359.99083024366814,0.10453858655766407,0.20852302065805797,0.35878522138699476,0.42696192852624065,0.45543861468203695,0.48535991252771743,0.5997951963987853,0.6229003389787633,0.645179882442816])
        expected['rhoNH'] = np.array([301835.1625244141,301978.9704711914,302095.6792358398,302250.47268066404,301891.91282958986,300719.23521728517,299689.63642578124,299259.52501220704,298259.4801269531,297342.2396484375])
        expected['latSH'] = np.array([-74.65030232113324,-74.65449605728364,-74.6587171141907,-74.67026013388801,-74.67442654928172,-74.67912571943069,-74.68383854995801,-74.69592798478891,-74.7006271549379,-74.7053399854652])
        expected['lonSH'] = np.array([142.24952214553917,142.20630070847133,142.16280606383668,142.1375207035293,142.09408070040803,142.05357767862986,142.01278778890654,141.9902891457805,141.94952657681387,141.9086137436855])
        expected['rhoSH'] = np.array([6371.199240493775,6371.198860740661,6371.1984809875485,6371.199620246887,6371.199240493775,6371.199240493775,6371.2,6371.199620246887,6371.199620246887,6371.2])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_60S_0_60000(self):
        """Test for latitude = -60, longitude = 0, rho = 60000"""
        lat = -60
        lon = 0
        rho = 60000

        expected = {}
        expected['latNH'] = np.array([-1.131156963113142,-1.136586963503305,-1.1423174922169466,-1.190197118298741,-1.1949714205285744,-1.2011322511599332,-1.2074843270880393,-1.2563543305994784,-1.261791161178806,-1.2674124068657306])
        expected['lonNH'] = np.array([357.476337081863,357.47557210067595,357.47472515721887,357.54846387949834,357.54758961528455,357.54827263420157,357.54884637009184,357.62414237550206,357.62471611139233,357.62515324349926])
        expected['rhoNH'] = np.array([340407.65228271484,340418.4919555664,340429.8420166015,340484.3077270508,340494.4911865234,340506.69189453125,340519.1356445312,340574.86517333984,340586.26384277345,340597.95416259766])
        expected['latSH'] = np.array([-80.1105467889382,-80.10624376976108,-80.1019134298273,-80.10419471301009,-80.09980973156294,-80.09664052378804,-80.09344399525648,-80.09683176908482,-80.09356693866155,-80.0902747874816])
        expected['lonSH'] = np.array([99.28549441694877,99.20063614670052,99.11542270661545,99.00513564208725,98.92016808881229,98.83586306388682,98.75146924650214,98.64151003105411,98.55715036461528,98.47257896231218])
        expected['rhoSH'] = np.array([6371.199620246887,6371.199620246887,6371.1984809875485,6371.196961975097,6371.1965822219845,6371.196202468872,6371.196202468872,6371.195063209533,6371.1946834564205,6371.1946834564205])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_30S_0_60000(self):
        """Test for latitude = -30, longitude = 0, rho = 60000"""
        lat = -30
        lon = 0
        rho = 60000

        expected = {}
        expected['latNH'] = np.array([10.348949861763415,10.35219420161917,10.355213145232312,10.31158872700344,10.315290689533583,10.318664802983577,10.321895482460988,10.27786125288192,10.281795441843855,10.285483743995655])
        expected['lonNH'] = np.array([358.4570976051635,358.4514422085307,358.4457321703846,358.5048269670835,358.49914424969404,358.49436311727504,358.4895273433427,358.5496056872821,358.54485187561977,358.53998878093074])
        expected['rhoNH'] = np.array([360496.70131835935,360492.90986328124,360489.3371459961,360524.99140625,360520.7624755859,360516.6793701172,360516.9710205078,360552.1635009766,360549.56295166013,360546.74366455077])
        expected['latSH'] = np.array([-75.65801477089857,-75.64252390186098,-75.62699205168838,-75.61120065432732,-75.59562782301967,-75.58173521824787,-75.56777431158437,-75.55352653697574,-75.53949732842051,-75.52537249721692])
        expected['lonSH'] = np.array([50.06135242723154,49.999433347310784,49.937418644741655,49.84677178917183,49.78500297341282,49.71712455344124,49.64929735988842,49.552844843524085,49.48524646130847,49.41763441871451])
        expected['rhoSH'] = np.array([6371.197341728211,6371.198860740661,6371.194303703308,6371.19050617218,6371.188607406616,6371.187847900391,6371.188607406616,6371.19050617218,6371.193164443969,6371.1965822219845])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_0N_0_60000(self):
        """Test for latitude = 0, longitude = 0, rho = 60000"""
        lat = 0
        lon = 0
        rho = 60000

        expected = {}
        expected['latNH'] = np.array([66.31657689262195,66.36463581116945,66.41259739952129,66.45917587456618,66.50655860438586,66.55490780597309,66.60307088490543,66.64941030332938,66.69691939164869,66.7441808856106])
        expected['lonNH'] = np.array([344.14230518038073,344.3210375705816,344.50023441364607,344.69046884240925,344.871004402551,345.06145739736763,345.2525114488312,345.45495825583043,345.64748762815475,345.84067269863937])
        expected['rhoNH'] = np.array([6371.1984809875485,6371.195822715759,6371.195822715759,6371.197721481323,6371.195442962647,6371.196202468872,6371.197341728211,6371.196202468872,6371.195442962647,6371.196202468872])
        expected['latSH'] = np.array([-68.84245586608799,-68.81670605291706,-68.79084695671938,-68.767651634298,-68.74160129280358,-68.71821472508546,-68.69463691207059,-68.67364091056197,-68.64994015414203,-68.62623939772206])
        expected['lonSH'] = np.array([38.041308903181715,37.95837333118483,37.8754275139042,37.77927894095793,37.6961726142318,37.6054062303515,37.51447250683653,37.41025748048048,37.31914275695251,37.22819195796462])
        expected['rhoSH'] = np.array([6371.193164443969,6371.185189628601,6371.193923950195,6371.184050369263,6371.199240493775,6371.183670616149,6371.198101234436,6371.1844301223755,6371.192404937744,6371.185569381713])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_30N_0_60000(self):
        """Test for latitude = 30, longitude = 0, rho = 60000"""
        lat = 30
        lon = 0
        rho = 60000

        expected = {}
        expected['latNH'] = np.array([71.4688327628254,71.50501910504812,71.54098517367012,71.57711687437948,71.6125553108881,71.64851454932092,71.68426034434219,71.72017006390354,71.75534383058181,71.79022902176764])
        expected['lonNH'] = np.array([344.15946261557576,344.35865825253,344.55845494613123,344.7520225072094,344.9530759556179,345.16421076324133,345.3760012690251,345.5816172837992,345.7947738274169,346.00864071070833])
        expected['rhoNH'] = np.array([6371.197721481323,6371.196961975097,6371.196961975097,6371.197721481323,6371.197721481323,6371.197341728211,6371.198101234436,6371.1984809875485,6371.198860740661,6371.199240493775])
        expected['latSH'] = np.array([22.323268684414586,22.339217176126567,22.35482415838004,22.304553966088747,22.32087128801591,22.33682660991707,22.352426761981377,22.302088267798382,22.318398759536365,22.334367741815853])
        expected['lonSH'] = np.array([1.3079217820673215,1.2880450778089383,1.2681857691885972,1.300302385883055,1.28040294990134,1.260021238531199,1.2396562824688655,1.271183155017175,1.2508037915245611,1.2304272027962972])
        expected['rhoSH'] = np.array([377097.7818115234,377099.75045166013,377101.8163085937,377095.61873779295,377097.7818115234,377099.9691894531,377101.8163085937,377095.64304199215,377097.8547241211,377099.9205810547])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_60N_0_60000(self):
        """Test for latitude = 60, longitude = 0, rho = 60000"""
        lat = 60
        lon = 0
        rho = 60000

        expected = {}
        expected['latNH'] = np.array([80.33390945640879,80.3746421432978,80.41507771695792,80.45565245572239,80.49548953405649,80.53638870680652,80.57698393613849,80.61772174566939,80.65763907872623,80.69721660987187])
        expected['lonNH'] = np.array([333.48906788661503,333.7822469265487,334.0777209100434,334.35540908093947,334.6553090270164,334.9713008987779,335.2897789593972,335.59058049044455,335.91405824953637,336.2400768389994])
        expected['rhoNH'] = np.array([6371.199240493775,6371.199620246887,6371.198860740661,6371.1984809875485,6371.199240493775,6371.199240493775,6371.199620246887,6371.199620246887,6371.199620246887,6371.199620246887])
        expected['latSH'] = np.array([34.06346569779065,34.07143994364664,34.07916830269251,34.026831978177285,34.035325318410194,34.04316296048279,34.05076496102901,33.99844571198671,34.00678195786871,34.01480743014348])
        expected['lonSH'] = np.array([3.26219119548212,3.2281903003503847,3.194143728328575,3.2308399868615263,3.1968378110693223,3.1615434488635157,3.126152823679095,3.161515914663424,3.1262185642498563,3.0908467220856526])
        expected['rhoSH'] = np.array([369586.47182617185,369593.9089111328,369601.1515625,369569.8963623047,369577.6737060547,369585.03787841793,369592.11040039064,369560.90380859375,369568.60823974607,369576.19114990236])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_90N_0_60000(self):
        """Test for latitude = 90, longitude = 0, rho = 60000"""
        lat = 90
        lon = 0
        rho = 60000

        expected = {}
        expected['latNH'] = np.array([85.31520697234728,85.36239034602055,85.40917756872196,85.45064322028628,85.49670772359615,85.5444648331597,85.59185823514994,85.6338190754291,85.6802997933915,85.72633270707645])
        expected['lonNH'] = np.array([246.50248337224397,246.04163684856488,245.57136466383116,245.0926503652833,244.6047016509776,244.08607172692018,243.5572784813778,243.0197425936978,242.46928398810815,241.90710477790273])
        expected['rhoNH'] = np.array([6371.2,6371.2,6371.199240493775,6371.2,6371.199620246887,6371.199240493775,6371.2,6371.199620246887,6371.199620246887,6371.2])
        expected['latSH'] = np.array([47.059112952317584,47.05838895226557,47.05738491445757,46.99775736300336,46.99764807997664,46.99663379688489,46.99530190999674,46.935486528340356,46.935052811328056,46.93450981128904])
        expected['lonSH'] = np.array([5.141759576996429,5.088336398629528,5.034762956100887,5.0960045666333365,5.042612551004524,4.98711854465864,4.931449514715274,4.990621151042387,4.935170260265639,4.8795533105146935])
        expected['rhoSH'] = np.array([353011.4211303711,353011.4454345703,353010.95935058594,352959.92053222656,352960.47952880856,352959.77470703126,352958.9240600586,352907.66650390625,352907.54498291016,352907.3262451172])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_90S_90_60000(self):
        """Test for latitude = -90, longitude = 90, rho = 60000"""
        lat = -90
        lon = 90
        rho = 60000

        expected = {}
        expected['latNH'] = np.array([-32.78726693580303,-33.35443218410255,-33.88109441062389,-34.17279812969679,-34.56926329025936,-34.89078761524853,-35.20710733609016,-35.39474629296875,-35.683007596699966,-35.95842814479157])
        expected['lonNH'] = np.array([359.978973035269,0.09893877192328582,0.20847611646836703,0.36431319230306225,0.4268974152550957,0.4554372272998618,0.4853535625862234,0.599687460836799,0.6236752986452954,0.6453464750255409])
        expected['rhoNH'] = np.array([301620.19188232423,301876.0421875,302095.6549316406,302354.4946533203,301891.6940917969,300719.23521728517,299689.61212158203,299257.79941406247,298274.45151367184,297345.9095825195])
        expected['latSH'] = np.array([-74.65030232113324,-74.65449605728364,-74.6587171141907,-74.67026013388801,-74.67444020966008,-74.67912571943069,-74.68383854995801,-74.69592798478891,-74.7006271549379,-74.7053399854652])
        expected['lonSH'] = np.array([142.24953580591753,142.2063143688497,142.16280606383668,142.1375207035293,142.09408070040803,142.05357767862986,142.01280144928486,141.9902891457805,141.94952657681387,141.9086137436855])
        expected['rhoSH'] = np.array([6371.198860740661,6371.198860740661,6371.1984809875485,6371.2,6371.199620246887,6371.199240493775,6371.2,6371.199620246887,6371.199620246887,6371.199620246887])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_60S_90_60000(self):
        """Test for latitude = -60, longitude = 90, rho = 60000"""
        lat = -60
        lon = 90
        rho = 60000

        expected = {}
        expected['latNH'] = np.array([3.216285764356641,3.2677034284285043,3.318649809447635,3.283228448411947,3.3352676596982747,3.3896223051132353,3.443744724096419,3.4109529858911856,3.4661340841957156,3.5209805032309163])
        expected['lonNH'] = np.array([25.57456759231847,25.584394526986824,25.594122423912214,25.676371561897508,25.68652293055144,25.698887280496457,25.71126529081981,25.795751315758285,25.80855792045206,25.821209138342216])
        expected['rhoNH'] = np.array([313004.47322998045,312956.1564819336,312908.39873046876,312993.317602539,312944.44185791013,312894.1807739258,312843.9682983398,312927.3073974609,312876.26857910154,312825.10823974607])
        expected['latSH'] = np.array([-68.24503287976532,-68.2513029934234,-68.2575184655681,-68.26791401348487,-68.27417046676459,-68.28145144841983,-68.28869144894003,-68.3001115252323,-68.30737884650921,-68.3146461677861])
        expected['lonSH'] = np.array([122.99187208257993,122.9642507975764,122.93646558803279,122.89848973624751,122.87064988519055,122.84547380790987,122.82020210798083,122.78453486013503,122.75922217907096,122.73377289422349])
        expected['rhoSH'] = np.array([6371.199620246887,6371.2,6371.198860740661,6371.199620246887,6371.2,6371.199620246887,6371.199620246887,6371.199620246887,6371.199240493775,6371.199620246887])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_30S_90_60000(self):
        """Test for latitude = -30, longitude = 90, rho = 60000"""
        lat = -30
        lon = 90
        rho = 60000

        expected = {}
        expected['latNH'] = np.array([80.67901927837566,80.6058636834966,80.53267137635075,80.462471545835,80.3891528801895,80.30961788862564,80.23003679328488,80.15345244344246,80.0735537443053,79.99365419139448])
        expected['lonNH'] = np.array([76.16140403843953,76.36816069480498,76.57127003015364,76.83948472867088,77.03297715766817,77.2305608699783,77.42333612911274,77.68213199676453,77.8658094439245,78.04667968333561])
        expected['rhoNH'] = np.array([6371.2,6371.199620246887,6371.198860740661,6371.2,6371.199620246887,6371.2,6371.2,6371.2,6371.2,6371.199620246887])
        expected['latSH'] = np.array([-60.90368601264714,-60.91714148531207,-60.93054231646366,-60.940746619083654,-60.95414745023521,-60.96961099851612,-60.984978924148635,-60.99715032124962,-61.01258654877384,-61.027968134784714])
        expected['lonSH'] = np.array([112.77576006550592,112.7318965906561,112.6878487006987,112.63412243268738,112.58992427856822,112.5478161623351,112.50561242345358,112.45381909897738,112.41139679404243,112.36885837589159])
        expected['rhoSH'] = np.array([6371.199620246887,6371.199240493775,6371.1984809875485,6371.198860740661,6371.198860740661,6371.199240493775,6371.199240493775,6371.1984809875485,6371.1984809875485,6371.199240493775])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_0N_90_60000(self):
        """Test for latitude = 0, longitude = 90, rho = 60000"""
        lat = 0
        lon = 90
        rho = 60000

        expected = {}
        expected['latNH'] = np.array([73.84171732011599,73.7839988065348,73.72665424581066,73.66440048662058,73.60696371834266,73.54400132702618,73.48112260552705,73.41378377049989,73.35099896410185,73.28795461051533])
        expected['lonNH'] = np.array([75.74096491389022,75.88070375411951,76.01911070746064,76.20301355086325,76.33819665491613,76.48247074075431,76.6256246755686,76.81220495312584,76.95175937824754,77.09052150142553])
        expected['rhoNH'] = np.array([6371.199240493775,6371.199240493775,6371.199240493775,6371.199240493775,6371.199620246887,6371.198860740661,6371.199240493775,6371.199240493775,6371.199620246887,6371.198860740661])
        expected['latSH'] = np.array([-55.122313370824884,-55.14597314610981,-55.169728544043124,-55.187459715128455,-55.21095556587332,-55.238003114986554,-55.26514628674818,-55.28622425052686,-55.31312153547836,-55.34016908459162])
        expected['lonSH'] = np.array([107.28229355757803,107.25853815964473,107.23470762963055,107.19839834400277,107.17442438001602,107.15490369936812,107.13524641493683,107.10304890318939,107.08330965648805,107.06354308903003])
        expected['rhoSH'] = np.array([6371.198101234436,6371.198101234436,6371.199620246887,6371.199620246887,6371.198101234436,6371.198860740661,6371.199620246887,6371.198860740661,6371.198101234436,6371.199240493775])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_30N_90_60000(self):
        """Test for latitude = 30, longitude = 90, rho = 60000"""
        lat = 30
        lon = 90
        rho = 60000

        expected = {}
        expected['latNH'] = np.array([74.78937191650941,74.74171256402835,74.69420518325633,74.64520199105607,74.59749994989271,74.5457049178692,74.49406015000744,74.44107324997378,74.38930383115967,74.33766418593979])
        expected['lonNH'] = np.array([86.9494077947187,87.00212319473285,87.05444244377514,87.12273067509693,87.17406637689875,87.22965728655349,87.28462664899375,87.35523031444417,87.40909318623889,87.46260771838594])
        expected['rhoNH'] = np.array([6371.2,6371.199620246887,6371.198860740661,6371.2,6371.199240493775,6371.199240493775,6371.2,6371.199620246887,6371.199620246887,6371.199620246887])
        expected['latSH'] = np.array([-55.66734880621357,-55.705939375024144,-55.74436601929463,-55.7794458708718,-55.817940817034014,-55.86062949934657,-55.90305863447071,-55.942154637279856,-55.98470671580904,-56.027094869798134])
        expected['lonSH'] = np.array([114.26461836116364,114.25850534185648,114.25211228479336,114.22664933956754,114.22009235796433,114.21996941455927,114.2195527730199,114.19970424329185,114.19922613004994,114.19849529980876])
        expected['rhoSH'] = np.array([6371.198860740661,6371.199620246887,6371.1984809875485,6371.199240493775,6371.199240493775,6371.199620246887,6371.199620246887,6371.198860740661,6371.199620246887,6371.199620246887])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_60N_90_60000(self):
        """Test for latitude = 60, longitude = 90, rho = 60000"""
        lat = 60
        lon = 90
        rho = 60000

        expected = {}
        expected['latNH'] = np.array([83.10845737510714,83.05805015214563,83.00771720749132,82.95983715452272,82.90951189383124,82.85563109278995,82.80181219033801,82.75049783287736,82.69679888562271,82.64318958460093])
        expected['lonNH'] = np.array([102.6303541667199,102.65264790417082,102.67486650954086,102.71750055034009,102.73830530655195,102.75968379865408,102.78070712091939,102.821066708725,102.84079229504799,102.8602651643717])
        expected['rhoNH'] = np.array([6371.2,6371.2,6371.198860740661,6371.2,6371.199240493775,6371.199620246887,6371.2,6371.199620246887,6371.199620246887,6371.199620246887])
        expected['latSH'] = np.array([-25.32009432379489,-24.73749284797114,-24.15422201360873,-23.44903230256159,-22.864661807742806,-22.23320398878596,-21.599895188564034,-20.853068644336503,-20.22202746691903,-19.59168296879689])
        expected['lonSH'] = np.array([81.31842225804176,80.53605823956265,79.76210901414099,78.91104695298989,78.15723312524143,77.35505472798012,76.5610315765878,75.70620608120402,74.93668281836453,74.17702917887571])
        expected['rhoSH'] = np.array([79730.13819885254,80603.72225952148,81485.78848571777,82566.67521362305,83473.29475708008,84467.88942565917,85479.44842529297,86706.33655395507,87751.7756072998,88814.06354675292])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_90N_90_60000(self):
        """Test for latitude = 90, longitude = 90, rho = 60000"""
        lat = 90
        lon = 90
        rho = 60000

        expected = {}
        expected['latNH'] = np.array([85.31520697234728,85.36239034602055,85.40917756872196,85.45064322028628,85.49670772359615,85.5444648331597,85.59185823514994,85.6338190754291,85.6802997933915,85.72633270707645])
        expected['lonNH'] = np.array([246.50248337224397,246.04163684856488,245.57136466383116,245.0926503652833,244.6047016509776,244.08607172692018,243.5572784813778,243.0197425936978,242.46928398810815,241.90710477790273])
        expected['rhoNH'] = np.array([6371.2,6371.2,6371.199240493775,6371.2,6371.199620246887,6371.199240493775,6371.2,6371.199620246887,6371.199620246887,6371.2])
        expected['latSH'] = np.array([47.059112952317584,47.05838895226557,47.05738491445757,46.99775736300336,46.99764807997664,46.99663379688489,46.99530190999674,46.935486528340356,46.935052811328056,46.93450981128904])
        expected['lonSH'] = np.array([5.141759576996429,5.088336398629528,5.034762956100887,5.0960045666333365,5.042612551004524,4.98711854465864,4.931449514715274,4.990621151042387,4.935170260265639,4.8795533105146935])
        expected['rhoSH'] = np.array([353011.4211303711,353011.4454345703,353010.95935058594,352959.92053222656,352960.47952880856,352959.77470703126,352958.9240600586,352907.66650390625,352907.54498291016,352907.3262451172])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_90S_180_60000(self):
        """Test for latitude = -90, longitude = 180, rho = 60000"""
        lat = -90
        lon = 180
        rho = 60000

        expected = {}
        expected['latNH'] = np.array([-32.8055172012653,-33.34575784385663,-33.88121735402895,-34.159602204220334,-34.56926329025936,-34.89606052128778,-35.20709367571182,-35.39469165145539,-35.68117710600241,-35.95842814479157])
        expected['lonNH'] = np.array([359.9864316018427,0.09533582712578426,0.20851112118786333,0.3587865820887435,0.426904378846398,0.45768046419453495,0.4853584717846894,0.5996799369565414,0.6229003389787633,0.6453522379976531])
        expected['rhoNH'] = np.array([301755.5176635742,301809.3271606445,302095.6549316406,302250.49698486325,301891.7183959961,300761.8404785156,299689.61212158203,299257.79941406247,298259.4801269531,297345.9095825195])
        expected['latSH'] = np.array([-74.65031598151157,-74.65449605728364,-74.6587171141907,-74.67026013388801,-74.67444020966008,-74.67912571943069,-74.68383854995801,-74.69592798478891,-74.70064081531623,-74.7053399854652])
        expected['lonSH'] = np.array([142.2494948247825,142.20630070847133,142.16280606383668,142.1375207035293,142.0940670400297,142.05357767862986,142.01278778890654,141.9902891457805,141.94951291643554,141.90860008330716])
        expected['rhoSH'] = np.array([6371.199620246887,6371.199240493775,6371.1984809875485,6371.199620246887,6371.199620246887,6371.199240493775,6371.2,6371.199620246887,6371.199240493775,6371.2])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_60S_180_60000(self):
        """Test for latitude = -60, longitude = 180, rho = 60000"""
        lat = -60
        lon = 180
        rho = 60000

        expected = {}
        expected['latNH'] = np.array([-72.31265641731804,-72.2453380728584,-72.17916720017931,-72.19760871093834,-72.1290609324281,-72.06007602181097,-71.99173314897581,-72.01398590529172,-71.94311586246366,-71.87266929136416])
        expected['lonNH'] = np.array([16.209365664686533,15.909981397891949,15.605911621326737,15.707734373925994,15.4054370314504,15.10104965108878,14.793868723356628,14.889971192526,14.58536524611094,14.279100417501216])
        expected['rhoNH'] = np.array([256248.699609375,256238.15158691406,256160.49967041015,256177.22095947264,256128.58825683594,256126.81405029297,256078.05982666014,256042.81873779296,256031.4686767578,255985.3393066406])
        expected['latSH'] = np.array([-67.89773142084852,-67.90633745920272,-67.91495715793528,-67.92622697006581,-67.93488764993339,-67.94382153736777,-67.95274176442379,-67.96429844449946,-67.97328697344719,-67.9822345212599])
        expected['lonSH'] = np.array([154.46696838188612,154.4411229460668,154.41514090646407,154.41090618917866,154.38476022503585,154.3609911667242,154.33709916500752,154.33492716485145,154.31087123859464,154.28677433120285])
        expected['rhoSH'] = np.array([6371.199620246887,6371.2,6371.199240493775,6371.199620246887,6371.199620246887,6371.199620246887,6371.199620246887,6371.199620246887,6371.199240493775,6371.199620246887])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_30S_180_60000(self):
        """Test for latitude = -30, longitude = 180, rho = 60000"""
        lat = -30
        lon = 180
        rho = 60000

        expected = {}
        expected['latNH'] = np.array([71.74763425455615,71.76485999164292,71.78173738908202,71.80503174924635,71.82092559944498,71.8380915723765,71.8549484792481,71.87793718844706,71.89368248203124,71.90908114351504])
        expected['lonNH'] = np.array([211.43284975805685,211.1738626451083,210.91464330572796,210.62666886994188,210.3666435682395,210.0936409071141,209.82044700069193,209.51821112991885,209.24402001587788,208.96967863767514])
        expected['rhoNH'] = np.array([6371.198101234436,6371.1984809875485,6371.197721481323,6371.199620246887,6371.198101234436,6371.198101234436,6371.199240493775,6371.198860740661,6371.198101234436,6371.1984809875485])
        expected['latSH'] = np.array([-63.46775268744827,-63.481235480869884,-63.494690953534814,-63.50837865263151,-63.52190242718814,-63.53575405082492,-63.54959201408337,-63.56363488301693,-63.5775821293021,-63.59155669634393])
        expected['lonSH'] = np.array([157.06659302150635,157.05267309597787,157.03871218931434,157.03540637775606,157.0213635088225,157.0099980740436,156.99857799775134,156.99789497883435,156.98632463838035,156.97468599603465])
        expected['rhoSH'] = np.array([6371.199240493775,6371.199620246887,6371.198860740661,6371.199620246887,6371.2,6371.198860740661,6371.199240493775,6371.199620246887,6371.199240493775,6371.2])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_0N_180_60000(self):
        """Test for latitude = 0, longitude = 180, rho = 60000"""
        lat = 0
        lon = 180
        rho = 60000

        expected = {}
        expected['latNH'] = np.array([71.3871778512979,71.38973404959478,71.39240123846567,71.39571046511854,71.3976758520522,71.39997079561333,71.40192081462138,71.4048970695522,71.4061060130353,71.40733203199132])
        expected['lonNH'] = np.array([202.59086934915186,202.36888820112642,202.1473441852079,201.92258998037946,201.7013464927844,201.46929764592238,201.2373990632221,201.00252251804372,200.77085616177524,200.53968157912698])
        expected['rhoNH'] = np.array([6371.2,6371.198101234436,6371.198860740661,6371.198101234436,6371.198860740661,6371.1984809875485,6371.198860740661,6371.1984809875485,6371.197721481323,6371.2])
        expected['latSH'] = np.array([-60.81453838360014,-60.83282963019744,-60.85109355603805,-60.86986291587726,-60.88812684171788,-60.90704646571879,-60.925966089719736,-60.94524088355752,-60.96428345096351,-60.98313477307275])
        expected['lonSH'] = np.array([156.8333010802154,156.8293532308751,156.82540538153486,156.83215360843482,156.8282194194729,156.82731783450245,156.82640258915367,156.83642930685525,156.8353911181014,156.834530514266])
        expected['rhoSH'] = np.array([6371.199240493775,6371.199240493775,6371.198860740661,6371.199240493775,6371.199240493775,6371.199620246887,6371.2,6371.1984809875485,6371.199240493775,6371.198860740661])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_30N_180_60000(self):
        """Test for latitude = 30, longitude = 180, rho = 60000"""
        lat = 30
        lon = 180
        rho = 60000

        expected = {}
        expected['latNH'] = np.array([73.32765337751874,73.32536867924136,73.32268953753943,73.3204406977552,73.31733466923015,73.31434816901555,73.3111482253894,73.30810025347228,73.30408922488219,73.29988353590076])
        expected['lonNH'] = np.array([198.78768341550534,198.56888513563317,198.3503737237061,198.13744940652015,197.9196619946451,197.69173858204178,197.46425230154534,197.24199794595313,197.01497611832025,196.78845972468594])
        expected['rhoNH'] = np.array([6371.199240493775,6371.199620246887,6371.198101234436,6371.1984809875485,6371.1984809875485,6371.198860740661,6371.2,6371.1984809875485,6371.198860740661,6371.1984809875485])
        expected['latSH'] = np.array([-62.08565024851785,-62.11100391071696,-62.13635757291604,-62.16186149927685,-62.18725614261098,-62.21353871053719,-62.23979395770672,-62.266240450173,-62.29264596150426,-62.319051472835525])
        expected['lonSH'] = np.array([153.31392316696125,153.31048075161956,153.30692905325117,153.32082165802296,153.3172562992762,153.3177617332748,153.31821252576003,153.33624422516885,153.336572074249,153.3367769799241])
        expected['rhoSH'] = np.array([6371.199620246887,6371.198860740661,6371.199620246887,6371.199240493775,6371.199620246887,6371.199620246887,6371.198860740661,6371.2,6371.2,6371.2])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_60N_180_60000(self):
        """Test for latitude = 60, longitude = 180, rho = 60000"""
        lat = 60
        lon = 180
        rho = 60000

        expected = {}
        expected['latNH'] = np.array([78.14186696399898,78.14356170468679,78.14496018591935,78.14312884144813,78.14393992641207,78.14479199251103,78.14532901613453,78.14270110085135,78.14262596877049,78.14223323289322])
        expected['lonNH'] = np.array([201.90063775238704,201.61853727928718,201.33654608921404,201.0776682592922,200.79645571078444,200.50192429339515,200.20755680054594,199.93675346033328,199.6432192505628,199.34990360684577])
        expected['rhoNH'] = np.array([6371.199620246887,6371.199620246887,6371.199240493775,6371.199620246887,6371.199620246887,6371.198860740661,6371.2,6371.199620246887,6371.199240493775,6371.2])
        expected['latSH'] = np.array([81.36498029936192,81.39737930168988,81.4296946342005,81.51969262179918,81.5488421616295,81.5778602203183,81.60116653331367,81.68600516676804,81.71322005551596,81.73888705264322])
        expected['lonSH'] = np.array([196.43219705757807,196.4792434005811,196.52594823412568,196.48194815549243,196.5338439328062,196.56777631260283,196.6114485421559,196.55055057551604,196.58628612525357,196.62132499569572])
        expected['rhoSH'] = np.array([263510.96446533204,263558.01739501953,263599.3102294922,263640.74888916017,263735.6567871094,263752.0378173828,263853.75089111325,263867.4098510742,263912.5913574219,263956.67917480465])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_90N_180_60000(self):
        """Test for latitude = 90, longitude = 180, rho = 60000"""
        lat = 90
        lon = 180
        rho = 60000

        expected = {}
        expected['latNH'] = np.array([85.31520697234728,85.36239034602055,85.40917756872196,85.45064322028628,85.49670772359615,85.5444648331597,85.59185823514994,85.6338190754291,85.6802997933915,85.72633270707645])
        expected['lonNH'] = np.array([246.50248337224397,246.04163684856488,245.57136466383116,245.0926503652833,244.6047016509776,244.08607172692018,243.5572784813778,243.0197425936978,242.46928398810815,241.90710477790273])
        expected['rhoNH'] = np.array([6371.2,6371.2,6371.199240493775,6371.2,6371.199620246887,6371.199240493775,6371.2,6371.199620246887,6371.199620246887,6371.2])
        expected['latSH'] = np.array([47.059112952317584,47.05838895226557,47.05738491445757,46.99775736300336,46.99764807997664,46.99663379688489,46.99530190999674,46.935486528340356,46.935052811328056,46.93450981128904])
        expected['lonSH'] = np.array([5.141759576996429,5.088336398629528,5.034762956100887,5.0960045666333365,5.042612551004524,4.98711854465864,4.931449514715274,4.990621151042387,4.935170260265639,4.8795533105146935])
        expected['rhoSH'] = np.array([353011.4211303711,353011.4454345703,353010.95935058594,352959.92053222656,352960.47952880856,352959.77470703126,352958.9240600586,352907.66650390625,352907.54498291016,352907.3262451172])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_90S_270_60000(self):
        """Test for latitude = -90, longitude = 270, rho = 60000"""
        lat = -90
        lon = 270
        rho = 60000

        expected = {}
        expected['latNH'] = np.array([-32.81628157939724,-33.35249241037826,-33.87457841015569,-34.16620016695856,-34.56941355442109,-34.89606052128778,-35.20709367571182,-35.394773613725434,-35.681163445624065,-35.96064112608265])
        expected['lonNH'] = np.array([359.99085756442486,0.09813110205393182,0.20573270161912266,0.3615672161328791,0.42695400443958637,0.4576832923197382,0.48536204696183305,0.5997083782911321,0.6228967638016196,0.6463135337624795])
        expected['rhoNH'] = np.array([301835.1625244141,301860.80345458986,302043.81407470704,302302.45936279296,301891.8399169922,300761.8404785156,299689.61212158203,299257.82371826173,298259.4315185547,297364.18634033203])
        expected['latSH'] = np.array([-74.65031598151157,-74.65449605728364,-74.6587171141907,-74.67026013388801,-74.67444020966008,-74.67912571943069,-74.68383854995801,-74.69592798478891,-74.7006271549379,-74.7053399854652])
        expected['lonSH'] = np.array([142.24952214553917,142.2063143688497,142.16280606383668,142.13750704315098,142.0940670400297,142.0535640182515,142.01278778890654,141.99027548540218,141.9494992560572,141.9086137436855])
        expected['rhoSH'] = np.array([6371.199240493775,6371.199240493775,6371.198101234436,6371.2,6371.199620246887,6371.198860740661,6371.2,6371.199620246887,6371.199240493775,6371.2])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_60S_270_60000(self):
        """Test for latitude = -60, longitude = 270, rho = 60000"""
        lat = -60
        lon = 270
        rho = 60000

        expected = {}
        expected['latNH'] = np.array([34.638089512663825,34.570532111583226,34.50517403141537,34.50476422006518,34.44260608352347,34.37663670142491,34.31264124399647,34.306675073756466,34.24507018253753,34.18467764989628])
        expected['lonNH'] = np.array([285.8913646930071,286.1200940679325,286.35322208468335,286.43488382640004,286.6745961455108,286.943732919566,287.2177601090669,287.34138653304416,287.6227083645786,287.90837419642526])
        expected['rhoNH'] = np.array([84866.22309875488,85900.55513305664,86942.35463256836,87345.45800476075,88391.17655639649,89535.52154846191,90685.2681488037,91189.65319519043,92345.37862854004,93508.25557250976])
        expected['latSH'] = np.array([-77.35020779814758,-77.36061700644268,-77.37110817700781,-77.38209112119318,-77.39258229175834,-77.40307346232348,-77.41357829326697,-77.42464319972237,-77.43520267217923,-77.44576214463606])
        expected['lonSH'] = np.array([174.18640753462995,174.1516145509979,174.11682156736586,174.11891160525187,174.08364050837793,174.05428435532522,174.02481891924577,174.0326736367913,174.00279838936166,173.97305974571543])
        expected['rhoSH'] = np.array([6371.1984809875485,6371.198101234436,6371.197341728211,6371.197721481323,6371.197341728211,6371.198101234436,6371.197721481323,6371.1984809875485,6371.1984809875485,6371.199240493775])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_30S_270_60000(self):
        """Test for latitude = -30, longitude = 270, rho = 60000"""
        lat = -30
        lon = 270
        rho = 60000

        expected = {}
        expected['latNH'] = np.array([60.969127876317884,61.063278618931925,61.157709399301936,61.2451358206781,61.33986029918242,61.43893219309346,61.538272171929414,61.62992477285452,61.72958064793959,61.82950460794959])
        expected['lonNH'] = np.array([281.4950451318367,281.480073357176,281.46485569570524,281.390843765859,281.37557146287486,281.3615285939413,281.34723983819765,281.2729820215413,281.2585293412575,281.24383077416365])
        expected['rhoNH'] = np.array([6371.199620246887,6371.198860740661,6371.197721481323,6371.199240493775,6371.198101234436,6371.1984809875485,6371.199240493775,6371.198101234436,6371.1984809875485,6371.199240493775])
        expected['latSH'] = np.array([-77.37740561142257,-77.39282817856846,-77.408237085336,-77.42236191653959,-77.43782546482049,-77.45231912623927,-77.46688108954973,-77.48003603389117,-77.49455701606664,-77.50914630013378])
        expected['lonSH'] = np.array([209.4063189709357,209.457231201009,209.50901769529602,209.57036645442108,209.6225217789233,209.68240887756596,209.74266480642382,209.81342556622516,209.87467870270183,209.9361777259886])
        expected['rhoSH'] = np.array([6371.1965822219845,6371.199240493775,6371.197341728211,6371.196202468872,6371.195442962647,6371.1965822219845,6371.199620246887,6371.196961975097,6371.195442962647,6371.196202468872])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_0N_270_60000(self):
        """Test for latitude = 0, longitude = 270, rho = 60000"""
        lat = 0
        lon = 270
        rho = 60000

        expected = {}
        expected['latNH'] = np.array([58.82937304332546,58.901680840973796,58.97451797828282,59.05032624788079,59.123337555013634,59.199401956705486,59.275329754613935,59.35474777918826,59.430938539379746,59.507877205285354])
        expected['lonNH'] = np.array([272.71366216124807,272.66836434667255,272.6228479660436,272.56031075400296,272.51443920353717,272.4672562567507,272.4197454608841,272.354858663769,272.3069107357955,272.25871692101185])
        expected['rhoNH'] = np.array([6371.2,6371.198101234436,6371.197721481323,6371.1984809875485,6371.1984809875485,6371.198860740661,6371.198101234436,6371.199240493775,6371.198101234436,6371.200759506225])
        expected['latSH'] = np.array([-74.61197129951114,-74.62531748914932,-74.63867733916587,-74.65819801981377,-74.67144858680359,-74.68334677633777,-74.69509470171019,-74.71311274074068,-74.7249289680048,-74.73667689337722])
        expected['lonSH'] = np.array([211.1073502629707,211.21268544035064,211.31851239135082,211.42883360682487,211.5356304446872,211.65341022673488,211.77302049948014,211.89595024416204,212.01557417728563,212.13581282743453])
        expected['rhoSH'] = np.array([6371.195822715759,6371.196961975097,6371.1965822219845,6371.196961975097,6371.195822715759,6371.198101234436,6371.195822715759,6371.195442962647,6371.1965822219845,6371.195822715759])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_30N_270_60000(self):
        """Test for latitude = 30, longitude = 270, rho = 60000"""
        lat = 30
        lon = 270
        rho = 60000

        expected = {}
        expected['latNH'] = np.array([64.44792422061838,64.51250878186273,64.57727434312008,64.64231994213341,64.70733822039006,64.77425358368868,64.84128164510858,64.90843264993356,64.97556145664375,65.0428080841171])
        expected['lonNH'] = np.array([268.7312793845371,268.68141900359603,268.63114881130474,268.5769444300515,268.52620978489665,268.47454623401467,268.4225001925392,268.366328716805,268.3137089394392,268.2607066714799])
        expected['rhoNH'] = np.array([6371.199240493775,6371.199240493775,6371.1984809875485,6371.199240493775,6371.198860740661,6371.199240493775,6371.199620246887,6371.198860740661,6371.199240493775,6371.199620246887])
        expected['latSH'] = np.array([-74.64348579234158,-74.65948209537774,-74.67575160598071,-74.69923379634722,-74.71542134468015,-74.73072096842097,-74.74610255443184,-74.76902466928641,-74.7844472364323,-74.79995176584822])
        expected['lonSH'] = np.array([183.48827824073024,183.57312285060013,183.65825432841515,183.76022905272345,183.84650800231904,183.94609216041783,184.0464822808387,184.16415277985968,184.26556742865603,184.3673372472892])
        expected['rhoSH'] = np.array([6371.199240493775,6371.198101234436,6371.199620246887,6371.1984809875485,6371.1984809875485,6371.197721481323,6371.197721481323,6371.197341728211,6371.198101234436,6371.197341728211])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_60N_270_60000(self):
        """Test for latitude = 60, longitude = 270, rho = 60000"""
        lat = 60
        lon = 270
        rho = 60000

        expected = {}
        expected['latNH'] = np.array([74.21684838480601,74.27863939867983,74.34042016726988,74.39863899220778,74.46037536456824,74.5239558880046,74.58753470389365,74.64752596292118,74.71107062786439,74.774570896578])
        expected['lonNH'] = np.array([262.8394489234574,262.74360770902376,262.64691955113307,262.53547818463517,262.437205422857,262.3347799060635,262.2313981627862,262.1129080410648,262.00777776935996,261.90169127117133])
        expected['rhoNH'] = np.array([6371.199620246887,6371.2,6371.198860740661,6371.199620246887,6371.2,6371.2,6371.2,6371.199620246887,6371.2,6371.2])
        expected['latSH'] = np.array([39.50478029631091,39.48826831399241,39.47124406748615,39.40677732700499,39.390234608835215,39.371185211240046,39.351667945686735,39.28434618613251,39.265307033821095,39.24567707014648])
        expected['lonSH'] = np.array([335.0639729054366,335.0207787891254,334.9776666350843,335.06405486770666,335.0207787891254,334.97613667271025,334.93149455629504,335.0162708642732,334.971546785588,334.92685002765944])
        expected['rhoSH'] = np.array([350511.6370239258,350517.0325561523,350521.86909179686,350431.8463378906,350437.0231323242,350439.9639404297,350442.66170654295,350350.1356201172,350353.2708618164,350355.676977539])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_90N_270_60000(self):
        """Test for latitude = 90, longitude = 270, rho = 60000"""
        lat = 90
        lon = 270
        rho = 60000

        expected = {}
        expected['latNH'] = np.array([85.31520697234728,85.36239034602055,85.40917756872196,85.45064322028628,85.49670772359615,85.5444648331597,85.59185823514994,85.6338190754291,85.6802997933915,85.72633270707645])
        expected['lonNH'] = np.array([246.50248337224397,246.04163684856488,245.57136466383116,245.0926503652833,244.6047016509776,244.08607172692018,243.5572784813778,243.0197425936978,242.46928398810815,241.90710477790273])
        expected['rhoNH'] = np.array([6371.2,6371.2,6371.199240493775,6371.2,6371.199620246887,6371.199240493775,6371.2,6371.199620246887,6371.199620246887,6371.2])
        expected['latSH'] = np.array([47.059112952317584,47.05838895226557,47.05738491445757,46.99775736300336,46.99764807997664,46.99663379688489,46.99530190999674,46.935486528340356,46.935052811328056,46.93450981128904])
        expected['lonSH'] = np.array([5.141759576996429,5.088336398629528,5.034762956100887,5.0960045666333365,5.042612551004524,4.98711854465864,4.931449514715274,4.990621151042387,4.935170260265639,4.8795533105146935])
        expected['rhoSH'] = np.array([353011.4211303711,353011.4454345703,353010.95935058594,352959.92053222656,352960.47952880856,352959.77470703126,352958.9240600586,352907.66650390625,352907.54498291016,352907.3262451172])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_90S_0_90000(self):
        """Test for latitude = -90, longitude = 0, rho = 90000"""
        lat = -90
        lon = 0
        rho = 90000

        expected = {}
        expected['latNH'] = np.array([-72.91629487578541,-72.91326227179394,-72.91042091309922,-72.95791804858749,-72.95442099173243,-72.9523309538464,-72.95043216125714,-72.99723261745007,-72.99466446632215,-72.99230122086934])
        expected['lonNH'] = np.array([26.31206751323435,26.153137548984617,25.994491037585437,26.018999463874735,25.85885884859462,25.68842001559341,25.51824414487525,25.530536777833984,25.358815576816106,25.187080715419892])
        expected['rhoNH'] = np.array([257072.90361328123,257070.01141357422,257067.21643066406,257034.94045410157,257031.70799560545,257029.47200927735,257027.33323974608,257058.88009033204,257056.30384521483,257053.75190429686])
        expected['latSH'] = np.array([-67.50291916606508,-67.50166241125783,-67.50037833569385,-67.50953078918167,-67.50813743059098,-67.50718120410718,-67.50608837383999,-67.51559599716464,-67.51448950651908,-67.51327373284684])
        expected['lonSH'] = np.array([152.87375845608895,152.8524072847435,152.83079656620959,152.86250230433677,152.84086426504618,152.82214954672034,152.8033392057461,152.83777701954133,152.81887105591872,152.79991045078276])
        expected['rhoSH'] = np.array([6371.2,6371.199620246887,6371.199240493775,6371.199620246887,6371.199620246887,6371.199620246887,6371.199620246887,6371.2,6371.199620246887,6371.199620246887])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_60S_0_90000(self):
        """Test for latitude = -60, longitude = 0, rho = 90000"""
        lat = -60
        lon = 0
        rho = 90000

        expected = {}
        expected['latNH'] = np.array([-16.4880655005106,-17.78542578240868,-18.99084488788921,-18.18452056580169,-19.31355766579398,-20.419904877363464,-21.42597125153884,-20.7795006767863,-21.763553351266722,-22.658424245754276])
        expected['lonNH'] = np.array([0.031845813701090644,0.24368073905982426,0.44392283570011615,0.3531751281183284,0.535877325650454,0.7187554805949867,0.8845904459304865,0.8167794207161008,0.9782335667509778,1.1234461632697992])
        expected['rhoNH'] = np.array([347758.3115112305,346348.3276977539,345325.6799072265,346074.3707641601,344960.412097168,344142.81883544923,343466.5787963867,343921.26175537106,343345.61679687497,342827.4998779297])
        expected['latSH'] = np.array([-75.74216270147315,-75.74083764477416,-75.73964919185858,-75.76881409961453,-75.76743440140217,-75.76688798626859,-75.76649183529673,-75.79655832802311,-75.79592995061947,-75.79539719586421])
        expected['lonSH'] = np.array([135.5365253613055,135.5049562269617,135.47296362088937,135.41996135293007,135.38847418085632,135.3605250467726,135.33238466739218,135.2822237581276,135.2546161335024,135.22640745223026])
        expected['rhoSH'] = np.array([6371.199240493775,6371.199240493775,6371.1984809875485,6371.1984809875485,6371.198860740661,6371.2,6371.1984809875485,6371.197721481323,6371.199240493775,6371.2])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_30S_0_90000(self):
        """Test for latitude = -30, longitude = 0, rho = 90000"""
        lat = -30
        lon = 0
        rho = 90000

        expected = {}
        expected['latNH'] = np.array([5.708232471711611,5.7097351133290175,5.711128471919693,5.67464160137348,5.67664967698947,5.6781864695527275,5.679497865873373,5.645381070969151,5.647450618287664,5.6493699014444445])
        expected['lonNH'] = np.array([358.7648659291642,358.75978426842175,358.7546206454092,358.8083332530422,358.80322427154306,358.79882562971756,358.79442698789205,358.8489865389821,358.8446152179133,358.8401072930611])
        expected['rhoNH'] = np.array([382301.4566894531,382299.9012207031,382298.54018554685,382279.24265136715,382277.2010986328,382275.57271728513,382274.2845947266,382316.30655517575,382314.24069824215,382312.41788330075])
        expected['latSH'] = np.array([-78.60867015272242,-78.59856147275082,-78.58837083050915,-78.58427271700714,-78.57409573514383,-78.56568094208637,-78.55714320562385,-78.55464335638763,-78.54613294068179,-78.53754056270591])
        expected['lonSH'] = np.array([70.579889561921,70.50723683971957,70.4340923438979,70.27352142670007,70.20118289320047,70.12503994433317,70.04828910862973,69.88372253076744,69.8078391290886,69.73175765192383])
        expected['rhoSH'] = np.array([6371.191645431519,6371.191645431519,6371.191645431519,6371.1984809875485,6371.197721481323,6371.195822715759,6371.195063209533,6371.191645431519,6371.192025184631,6371.193164443969])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_0N_0_90000(self):
        """Test for latitude = 0, longitude = 0, rho = 90000"""
        lat = 0
        lon = 0
        rho = 90000

        expected = {}
        expected['latNH'] = np.array([19.59752460177009,19.668107776653002,19.736778498568313,19.66582649347022,19.735275856950906,19.80371435243444,19.870226734572014,19.802081937222795,19.86929099865573,19.93466273920191])
        expected['lonNH'] = np.array([358.2904409894152,358.27811932815246,358.26634408202335,358.31467450059034,358.3031451412714,358.2929818197864,358.2833375926783,358.33196853956883,358.3226248407843,358.31374559486324])
        expected['rhoNH'] = np.array([206842.3700073242,208343.83482666014,209831.20321044922,208672.96229248046,210180.23581542968,211694.84920654297,213193.9808227539,212067.26245117188,213585.86173095703,215092.1630859375])
        expected['latSH'] = np.array([-70.3195662363733,-70.29658948000537,-70.2735307613674,-70.25268502402054,-70.22961264500424,-70.2088898510624,-70.18808509485055,-70.16931573501137,-70.1485109787995,-70.1275969395609])
        expected['lonSH'] = np.array([40.255191779236284,40.1833723401136,40.11159388212594,39.996136364396044,39.924426208300076,39.84494329692864,39.76545355536803,39.642124244619694,39.56257644645114,39.48302864828259])
        expected['rhoSH'] = np.array([6371.192404937744,6371.185949134827,6371.185569381713,6371.198860740661,6371.188987159729,6371.184809875488,6371.187468147277,6371.195442962647,6371.187088394165,6371.185189628601])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_30N_0_90000(self):
        """Test for latitude = 30, longitude = 0, rho = 90000"""
        lat = 30
        lon = 0
        rho = 90000

        expected = {}
        expected['latNH'] = np.array([72.72007389990026,72.75779361959165,72.79525549964188,72.83609149314209,72.87300012786955,72.91055080037899,72.94783851060538,72.98855156070053,73.02522284635432,73.06159531123194])
        expected['lonNH'] = np.array([342.20624707900555,342.422163019048,342.6388439402775,342.835116256267,343.05335446062725,343.2826575714429,343.51280762571565,343.7225490747484,343.954420336692,344.18713854209267])
        expected['rhoNH'] = np.array([6371.198101234436,6371.197341728211,6371.196961975097,6371.197721481323,6371.1984809875485,6371.1984809875485,6371.199240493775,6371.198860740661,6371.199240493775,6371.200759506225])
        expected['latSH'] = np.array([24.092840924770655,24.10628956724642,24.119410360642007,24.07373688566213,24.087499716839716,24.100941529126302,24.114055492332724,24.068313715461144,24.082069716449553,24.09550469854696])
        expected['lonSH'] = np.array([1.0033712242175634,0.986579737751616,0.9697981764043062,1.0045216842058875,0.9877156835879538,0.9706078739860701,0.9535046534175351,0.9878389471581314,0.9707380744671235,0.9536262094404201])
        expected['rhoSH'] = np.array([382297.7624511719,382300.60604248045,382303.3767211914,382293.2418701172,382296.20698242186,382299.0262695312,382301.6997314453,382291.662097168,382294.50568847655,382297.4951049805])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_60N_0_90000(self):
        """Test for latitude = 60, longitude = 0, rho = 90000"""
        lat = 60
        lon = 0
        rho = 90000

        expected = {}
        expected['latNH'] = np.array([81.99150330664344,82.04252567351708,82.09334057339468,82.14586216679115,82.19604015152863,82.24789324016008,82.29942189480596,82.35287410147683,82.40372400607393,82.4543041181988])
        expected['lonNH'] = np.array([323.34170172353726,323.6554806140076,323.9724833537662,324.22082903198793,324.54564550815707,324.8896684762722,325.23817204848297,325.5165705590527,325.87378945264436,326.2351884220081])
        expected['rhoNH'] = np.array([6371.2,6371.2,6371.199240493775,6371.199240493775,6371.199620246887,6371.199620246887,6371.199240493775,6371.198860740661,6371.199240493775,6371.199620246887])
        expected['latSH'] = np.array([36.09488348526292,36.1033153537933,36.11143986381103,36.06449938874012,36.075694068789765,36.08408495618513,36.092096768081554,36.04516995338898,36.05388527476992,36.06241276594868])
        expected['lonSH'] = np.array([2.5581449007907255,2.5288984576515543,2.4995677043648152,2.5430092015899772,2.513769588639976,2.4835406654773804,2.453278018255758,2.495744292533489,2.4655653151291994,2.4352687304051384])
        expected['rhoSH'] = np.array([382286.63112792966,382295.2834228515,382303.9114135742,382326.660144043,382274.114465332,382282.98549804685,382291.3704467773,382314.2893066406,382323.2332519531,382332.0313720703])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_90N_0_90000(self):
        """Test for latitude = 90, longitude = 0, rho = 90000"""
        lat = 90
        lon = 0
        rho = 90000

        expected = {}
        expected['latNH'] = np.array([83.20862508749313,83.24527716323989,83.28141612102526,83.3013585658544,83.33654855423195,83.37292229977004,83.40868047450917,83.42815675892746,83.46288528264921,83.49695981575793])
        expected['lonNH'] = np.array([228.984482490887,228.51412834388321,228.038733517272,227.5677100117296,227.08495224119306,226.5767451858091,226.0629646960624,225.55742141445475,225.0355403203524,224.5081404334007])
        expected['rhoNH'] = np.array([6371.2,6371.199620246887,6371.199240493775,6371.2,6371.199620246887,6371.199620246887,6371.2,6371.199240493775,6371.2,6371.2])
        expected['latSH'] = np.array([48.21644752604123,48.22020754517932,48.22374899826397,48.17751203267757,48.1818560329897,48.18553408985775,48.18905163728031,48.14278393584264,48.147121105965596,48.15122604965678])
        expected['lonSH'] = np.array([3.209931924038471,3.1683759859110556,3.1265748013037546,3.1993957169134917,3.157824410860444,3.114996350000114,3.0719928386554787,3.1435928579510763,3.100818371387048,3.0578771855185893])
        expected['rhoSH'] = np.array([376940.9225097656,376944.6167480469,376948.3352905273,376888.5469604492,376893.35919189453,376896.88330078125,376899.969934082,376840.54616699216,376844.96953125,376849.1498535156])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_90S_90_90000(self):
        """Test for latitude = -90, longitude = 90, rho = 90000"""
        lat = -90
        lon = 90
        rho = 90000

        expected = {}
        expected['latNH'] = np.array([-72.91629487578541,-72.91326227179394,-72.91042091309922,-72.95791804858749,-72.95442099173243,-72.95234461422476,-72.95043216125714,-72.99723261745007,-72.99466446632215,-72.99228756049098])
        expected['lonNH'] = np.array([26.312058975497887,26.153127303700863,25.99448762249085,26.01898921859098,25.85885372595274,25.688421723140703,25.518235607138788,25.530529947644812,25.358808746626938,25.18707559277801])
        expected['rhoNH'] = np.array([257072.90361328123,257069.98710937498,257067.21643066406,257034.94045410157,257031.70799560545,257029.47200927735,257027.33323974608,257058.8557861328,257056.30384521483,257053.8005126953])
        expected['latSH'] = np.array([-67.50291916606508,-67.50166241125783,-67.50033735455884,-67.50954444956,-67.50813743059098,-67.50718120410718,-67.50608837383999,-67.51560965754297,-67.51448950651908,-67.51328739322517])
        expected['lonSH'] = np.array([152.87375845608895,152.8524072847435,152.83091950961463,152.86243400244507,152.8408779254245,152.822135886342,152.80338018688113,152.83777701954133,152.81887105591872,152.7998831300261])
        expected['rhoSH'] = np.array([6371.2,6371.199620246887,6371.199620246887,6371.2,6371.199620246887,6371.199620246887,6371.2,6371.199620246887,6371.199620246887,6371.199620246887])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_60S_90_90000(self):
        """Test for latitude = -60, longitude = 90, rho = 90000"""
        lat = -60
        lon = 90
        rho = 90000

        expected = {}
        expected['latNH'] = np.array([-66.56751109885352,-66.59226370440564,-66.61724853638955,-66.67025080434885,-66.69471654195581,-66.72160016652899,-66.74875699866897,-66.80432741775618,-66.8309105140059,-66.85768485555232])
        expected['lonNH'] = np.array([48.22258354039406,48.078063567745765,47.93344797244909,47.96734620129986,47.82086596435976,47.667821915627286,47.51456613103054,47.54045937817406,47.3852945557043,47.22992141246485])
        expected['rhoNH'] = np.array([256462.67377929686,256480.56166992188,256498.2308227539,256442.33116455076,256459.29549560547,256474.16966552733,256488.84940185546,256430.08184814453,256444.03245849608,256457.8129394531])
        expected['latSH'] = np.array([-65.90832954205558,-65.91197686307237,-65.91555588219745,-65.92927090205083,-65.93295920420263,-65.93702999694798,-65.94107346893662,-65.95537588505863,-65.95954230045234,-65.96366773471101])
        expected['lonSH'] = np.array([146.2665066605854,146.26492205669797,146.2633237924322,146.30160017254093,146.3003297573553,146.30258371978144,146.30490598409924,146.34695262862982,146.3496983646762,146.35251240261422])
        expected['rhoSH'] = np.array([6371.2,6371.2,6371.199240493775,6371.2,6371.2,6371.199240493775,6371.199620246887,6371.2,6371.199620246887,6371.199620246887])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_30S_90_90000(self):
        """Test for latitude = -30, longitude = 90, rho = 90000"""
        lat = -30
        lon = 90
        rho = 90000

        expected = {}
        expected['latNH'] = np.array([-59.40403601810081,-59.47476945714547,-59.54548923581177,-59.64052448792333,-59.71042464388924,-59.785310837949254,-59.860197032009296,-59.95617485022632,-60.03011847818087,-60.102272596572874])
        expected['lonNH'] = np.array([54.77778587932752,54.6157772073094,54.453474837156975,54.438359628523735,54.273875012931484,54.097396585156694,53.92043321395084,53.90330309951244,53.72410967154258,53.5501106024365])
        expected['rhoNH'] = np.array([255386.67827148436,255360.4054321289,255333.3305541992,255368.49873046874,255339.6739501953,255366.31135253905,255392.00089111328,255356.20080566406,255380.26196289062,255341.47246093748])
        expected['latSH'] = np.array([-64.61071654315822,-64.62627571408751,-64.64178024350343,-64.66546733954505,-64.68106749160935,-64.69725503994226,-64.71327866373514,-64.7379493070172,-64.75402757232342,-64.76995557346788])
        expected['lonSH'] = np.array([145.54820298633186,145.56426759125972,145.5795125734872,145.63479612462928,145.64997280496505,145.66799084399554,145.68518926032564,145.7448031514015,145.7617010394081,145.7775334179042])
        expected['rhoSH'] = np.array([6371.199620246887,6371.199620246887,6371.199240493775,6371.2,6371.199620246887,6371.199620246887,6371.2,6371.199240493775,6371.199620246887,6371.2])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_0N_90_90000(self):
        """Test for latitude = 0, longitude = 90, rho = 90000"""
        lat = 0
        lon = 90
        rho = 90000

        expected = {}
        expected['latNH'] = np.array([80.63383672324238,80.56943657710562,80.5052567045696,80.42643461400036,80.36235804807554,80.29302223648979,80.2234840805499,80.13923881977966,80.07016170160874,80.00091895135044])
        expected['lonNH'] = np.array([118.2267769477422,118.21867634338656,118.21027521070744,117.8152853710056,117.80937042718438,117.7875684633537,117.76852589594769,117.36916473517705,117.35128329992996,117.33413952511323])
        expected['rhoNH'] = np.array([6371.2,6371.199620246887,6371.198860740661,6371.2,6371.199620246887,6371.2,6371.2,6371.199240493775,6371.199240493775,6371.2])
        expected['latSH'] = np.array([-61.2745789449572,-61.300711248721655,-61.32684355248614,-61.326638646811034,-61.35292121473722,-61.38065178276747,-61.40834136966271,-61.409598124469994,-61.437478956662005,-61.46531880771897])
        expected['lonSH'] = np.array([127.12737404010423,127.12781117221111,127.12827562507466,127.01378799420692,127.01417048480043,127.01717576803524,127.02031765505345,126.90742828845148,126.91039259055127,126.91332957189437])
        expected['rhoSH'] = np.array([6371.2,6371.199240493775,6371.199620246887,6371.199620246887,6371.199620246887,6371.199620246887,6371.199620246887,6371.199240493775,6371.199620246887,6371.199620246887])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_30N_90_90000(self):
        """Test for latitude = 30, longitude = 90, rho = 90000"""
        lat = 30
        lon = 90
        rho = 90000

        expected = {}
        expected['latNH'] = np.array([78.46508517590232,78.41058538896749,78.35661835678793,78.2995341970259,78.2454963016337,78.18659018891057,78.12809644885859,78.06672805293967,78.00811734589814,77.9495783558429])
        expected['lonNH'] = np.array([96.71681736445788,96.79298763408185,96.86895299803074,96.9757156849472,97.04905825625481,97.12663554484782,97.2037825315231,97.31111895432986,97.38595050687651,97.46044054996467])
        expected['rhoNH'] = np.array([6371.2,6371.2,6371.199240493775,6371.199620246887,6371.199620246887,6371.199620246887,6371.2,6371.2,6371.199620246887,6371.2])
        expected['latSH'] = np.array([-59.18485524763511,-59.21917011802526,-59.253512309172066,-59.28095600925718,-59.31521623813396,-59.35260469365062,-59.38976092273549,-59.42029186832545,-59.45754372005871,-59.49479557179194])
        expected['lonSH'] = np.array([121.61796587065352,121.60845824732887,121.59886866173417,121.56642526317661,121.55646684736672,121.55190428100116,121.54720511085219,121.51976141076707,121.51474805191629,121.50969371193048])
        expected['rhoSH'] = np.array([6371.199620246887,6371.199620246887,6371.198860740661,6371.199240493775,6371.198860740661,6371.199620246887,6371.2,6371.199240493775,6371.199620246887,6371.199620246887])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_60N_90_90000(self):
        """Test for latitude = 60, longitude = 90, rho = 90000"""
        lat = 60
        lon = 90
        rho = 90000

        expected = {}
        expected['latNH'] = np.array([84.10824040213292,84.05661228285726,84.00492909518142,83.95660892189817,83.90497696064111,83.84992350149669,83.79481668149937,83.74325046081307,83.68814748279718,83.63300352364625])
        expected['lonNH'] = np.array([134.03240842304197,133.79336546246986,133.55999155890888,133.45029872083848,133.22288074223374,132.9820892532341,132.74715806654234,132.63197375637924,132.40213789080832,132.1785448181388])
        expected['rhoNH'] = np.array([6371.2,6371.2,6371.199240493775,6371.199620246887,6371.199240493775,6371.2,6371.2,6371.199620246887,6371.199620246887,6371.199620246887])
        expected['latSH'] = np.array([15.367745543132102,15.727505267095012,16.08270925488152,16.431178676146402,16.77724387082344,17.145391067087132,17.50926939511956,17.857834439032814,18.20825046421116,18.553516526755303])
        expected['lonSH'] = np.array([44.37411003745579,43.943470025381075,43.5095856734506,43.09801554953856,42.65754689524819,42.17889406840287,41.69417603357457,41.231809792805144,40.74171981419463,40.24672234466547])
        expected['rhoSH'] = np.array([220177.81677246094,223138.04393310545,226147.9245727539,229709.4376220703,232829.22185058592,236271.10963134764,239792.78809814452,243905.22873535156,247559.04913330078,251295.16354980468])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_90N_90_90000(self):
        """Test for latitude = 90, longitude = 90, rho = 90000"""
        lat = 90
        lon = 90
        rho = 90000

        expected = {}
        expected['latNH'] = np.array([83.20862508749313,83.24527716323989,83.28141612102526,83.3013585658544,83.33654855423195,83.37292229977004,83.40868047450917,83.42815675892746,83.46288528264921,83.49695981575793])
        expected['lonNH'] = np.array([228.984482490887,228.51412834388321,228.038733517272,227.5677100117296,227.08495224119306,226.5767451858091,226.0629646960624,225.55742141445475,225.0355403203524,224.5081404334007])
        expected['rhoNH'] = np.array([6371.2,6371.199620246887,6371.199240493775,6371.2,6371.199620246887,6371.199620246887,6371.2,6371.199240493775,6371.2,6371.2])
        expected['latSH'] = np.array([48.21644752604123,48.22020754517932,48.22374899826397,48.17751203267757,48.1818560329897,48.18553408985775,48.18905163728031,48.14278393584264,48.147121105965596,48.15122604965678])
        expected['lonSH'] = np.array([3.209931924038471,3.1683759859110556,3.1265748013037546,3.1993957169134917,3.157824410860444,3.114996350000114,3.0719928386554787,3.1435928579510763,3.100818371387048,3.0578771855185893])
        expected['rhoSH'] = np.array([376940.9225097656,376944.6167480469,376948.3352905273,376888.5469604492,376893.35919189453,376896.88330078125,376899.969934082,376840.54616699216,376844.96953125,376849.1498535156])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_90S_180_90000(self):
        """Test for latitude = -90, longitude = 180, rho = 90000"""
        lat = -90
        lon = 180
        rho = 90000

        expected = {}
        expected['latNH'] = np.array([-72.91629487578541,-72.91326227179394,-72.91042091309922,-72.95791804858749,-72.9544073313541,-72.9523309538464,-72.95043216125714,-72.99723261745007,-72.99466446632215,-72.99228756049098])
        expected['lonNH'] = np.array([26.312064098139764,26.15313413389003,25.99448762249085,26.018990926138272,25.858857141047324,25.688421723140703,25.518240729780665,25.530529947644812,25.35881216172152,25.187077300325306])
        expected['rhoNH'] = np.array([257072.90361328123,257069.96280517578,257067.21643066406,257034.94045410157,257031.70799560545,257029.47200927735,257027.33323974608,257058.8557861328,257056.27954101562,257053.7762084961])
        expected['latSH'] = np.array([-67.50291916606508,-67.50166241125783,-67.50037833569385,-67.50950346842498,-67.50813743059098,-67.50718120410718,-67.50608837383999,-67.51559599716464,-67.51448950651908,-67.51326007246848])
        expected['lonSH'] = np.array([152.87375845608895,152.8524072847435,152.83079656620959,152.8625432854718,152.8408779254245,152.822135886342,152.8033392057461,152.83777701954133,152.81887105591872,152.79991045078276])
        expected['rhoSH'] = np.array([6371.2,6371.199620246887,6371.199240493775,6371.199620246887,6371.199620246887,6371.199620246887,6371.199620246887,6371.2,6371.200759506225,6371.199620246887])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_60S_180_90000(self):
        """Test for latitude = -60, longitude = 180, rho = 90000"""
        lat = -60
        lon = 180
        rho = 90000

        expected = {}
        expected['latNH'] = np.array([-78.73433197307233,-78.74617552109314,-78.75510940852749,-78.80119952504674,-78.81244201642059,-78.82316541341751,-78.83693507478426,-78.88288858752011,-78.89590692807815,-78.90897991014955])
        expected['lonNH'] = np.array([48.24144852288164,47.94877491694659,47.645354008352534,47.75829801646786,47.46196001404311,47.140872821160805,46.83074125170721,46.91532631438864,46.601024914446754,46.2867132692211])
        expected['rhoNH'] = np.array([264118.5208374023,264084.2519165039,264111.7399658203,264044.4659423828,264009.3220703125,264036.51846923825,264002.5655029297,263996.92692871095,263962.00179443357,263927.46552734374])
        expected['latSH'] = np.array([49.738585918429834,49.72440644571289,49.7071841237207,49.79203897887435,49.777429204239695,49.76143631629811,49.749582522993556,49.83656498207367,49.823659339636926,49.80764596112783])
        expected['lonSH'] = np.array([199.72231284115156,199.59405554891705,199.46480104906374,199.4642819546868,199.33568315299382,199.1976586902462,199.06086366154918,199.05057739665915,198.91329059434187,198.77499292402746])
        expected['rhoSH'] = np.array([264279.68198242184,264314.8744628906,264287.6294555664,264307.1214233398,264341.9979492187,264313.4162109375,264345.30332031247,264362.48638916016,264394.908190918,264364.91680908203])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_30S_180_90000(self):
        """Test for latitude = -30, longitude = 180, rho = 90000"""
        lat = -30
        lon = 180
        rho = 90000

        expected = {}
        expected['latNH'] = np.array([-79.43583338196765,-79.472607120459,-79.51133429305298,-79.55350388098864,-79.58969022321136,-79.62961950909926,-79.67150222908978,-79.71824804376934,-79.75750797111857,-79.79668593619778])
        expected['lonNH'] = np.array([69.67557251581131,69.32295716972023,68.99161786289373,69.21538169029253,68.85527362668195,68.48335616599641,68.13235274454945,68.34471015603432,67.9643369211563,67.58295964847031])
        expected['rhoNH'] = np.array([269380.2098388672,269377.48776855465,269313.8836791992,269269.2611694336,269265.7370605469,269262.7962524414,269199.1678588867,269154.3752197265,269150.6323730469,269146.7193969726])
        expected['latSH'] = np.array([46.68383162346582,46.67949103824828,46.67554318890801,46.76172993094981,46.761067402600325,46.7577240250016,46.7590217609439,46.84222029522383,46.84252082354731,46.83888716290886])
        expected['lonSH'] = np.array([196.0634351442891,195.96334555219173,195.86328328085102,195.86314667706762,195.76431383977754,195.65729843586178,195.5518403150768,195.5424966162922,195.43671064642706,195.32936739343114])
        expected['rhoSH'] = np.array([269496.09226074215,269463.28159179684,269429.66888427734,269426.6551635742,269454.72651367186,269421.67280273436,269447.9456420898,269384.46307373047,269412.21846923826,269379.04323730466])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_0N_180_90000(self):
        """Test for latitude = 0, longitude = 180, rho = 90000"""
        lat = 0
        lon = 180
        rho = 90000

        expected = {}
        expected['latNH'] = np.array([-77.35136893030648,-77.39751368833907,-77.44505180496239,-77.49651045016924,-77.54324260447049,-77.59274781557474,-77.6420208002472,-77.70043257802917,-77.74880397773117,-77.79698413213646])
        expected['lonNH'] = np.array([68.56653420970882,68.19152267332927,67.83303336455198,68.00721001857647,67.6414533885223,67.24518630344566,66.84723216164404,67.02684564624786,66.62108459822493,66.21394385198963])
        expected['rhoNH'] = np.array([267678.4541137695,267652.93470458983,267567.6512695312,267582.59835205076,267495.37058105465,267469.14635009767,267443.8213745117,267396.13653564453,267369.11026611325,267342.2784301758])
        expected['latSH'] = np.array([48.2653550955931,48.26516726539093,48.269279039271275,48.34392617671035,48.34722857317404,48.3478091392535,48.34873462988603,48.428248277108736,48.42831316390585,48.43265033402881])
        expected['lonSH'] = np.array([193.92584548126356,193.84277672057786,193.7616340732381,193.76119694113123,193.67978108622466,193.59066077793435,193.50151314888734,193.49640416738816,193.40698333077435,193.31939298485813])
        expected['rhoSH'] = np.array([267608.36080322263,267567.9672241211,267587.7994506836,267546.409399414,267567.26240234374,267527.403515625,267486.8641113281,267506.59912109375,267467.1777099609,267487.6175415039])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_30N_180_90000(self):
        """Test for latitude = 30, longitude = 180, rho = 90000"""
        lat = 30
        lon = 180
        rho = 90000

        expected = {}
        expected['latNH'] = np.array([75.0801928336321,75.07724902209982,75.07381855958917,75.07006195554567,75.06615679488772,75.06220382290557,75.0579810584512,75.05312479395133,75.04817461435036,75.04284194415588])
        expected['lonNH'] = np.array([200.19074087480936,199.9377233471954,199.68510197055332,199.43862776416424,199.18703091589765,198.92423255739223,198.6620762366688,198.4053430861464,198.14403370888002,197.88346199204403])
        expected['rhoNH'] = np.array([6371.199240493775,6371.199240493775,6371.198101234436,6371.198860740661,6371.1984809875485,6371.199240493775,6371.199620246887,6371.198860740661,6371.199240493775,6371.199620246887])
        expected['latSH'] = np.array([54.373012704256055,54.378463195213726,54.38148555392146,54.44901221915079,54.45396069120446,54.45739286126239,54.46373127681216,54.53200584775561,54.53495990457164,54.54079288612283])
        expected['lonSH'] = np.array([193.79765649092076,193.72277029686074,193.64543889507786,193.64994681993005,193.57458251262813,193.49125420475397,193.4100705762792,193.4080488402849,193.32428340030384,193.24262165858718])
        expected['rhoSH'] = np.array([260348.18610839843,260363.69218749998,260316.15317382812,260319.16689453126,260334.47854003907,260287.83878173828,260303.1504272461,260306.8932739258,260260.64238281248,260276.39150390626])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_60N_180_90000(self):
        """Test for latitude = 60, longitude = 180, rho = 90000"""
        lat = 60
        lon = 180
        rho = 90000

        expected = {}
        expected['latNH'] = np.array([76.15609874584449,76.16075181221656,76.16503348705251,76.1558110241257,76.15927819890312,76.16341729354015,76.166825557936,76.1569499581698,76.15979643950641,76.16222457175634])
        expected['lonNH'] = np.array([203.925433671459,203.6344539524381,203.34359717682227,203.11173957525702,202.82152483742317,202.5187425515165,202.21570071842137,201.97240938018552,201.6703920754659,201.36847039339466])
        expected['rhoNH'] = np.array([6371.2,6371.199240493775,6371.1984809875485,6371.2,6371.1984809875485,6371.199240493775,6371.199240493775,6371.198860740661,6371.199240493775,6371.2])
        expected['latSH'] = np.array([64.24191376241976,64.25112085742093,64.26021013165892,64.2992310023872,64.30807609736237,64.31783302259174,64.3279758535092,64.36761314881008,64.37716687591164,64.38678548981031])
        expected['lonSH'] = np.array([197.1598717513729,197.07508178301634,196.9869040408315,197.0040751364049,196.91746833772913,196.8225833497793,196.7301572299307,196.73887255131163,196.6442197897936,196.54818733006323])
        expected['rhoSH'] = np.array([254994.82166748046,255028.1670288086,254974.6248779297,254993.7279785156,254999.87694091795,254967.69818115234,255006.90085449218,255019.61195068358,255016.96279296876,254979.82597656248])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_90N_180_90000(self):
        """Test for latitude = 90, longitude = 180, rho = 90000"""
        lat = 90
        lon = 180
        rho = 90000

        expected = {}
        expected['latNH'] = np.array([83.20862508749313,83.24527716323989,83.28141612102526,83.3013585658544,83.33654855423195,83.37292229977004,83.40868047450917,83.42815675892746,83.46288528264921,83.49695981575793])
        expected['lonNH'] = np.array([228.984482490887,228.51412834388321,228.038733517272,227.5677100117296,227.08495224119306,226.5767451858091,226.0629646960624,225.55742141445475,225.0355403203524,224.5081404334007])
        expected['rhoNH'] = np.array([6371.2,6371.199620246887,6371.199240493775,6371.2,6371.199620246887,6371.199620246887,6371.2,6371.199240493775,6371.2,6371.2])
        expected['latSH'] = np.array([48.21644752604123,48.22020754517932,48.22374899826397,48.17751203267757,48.1818560329897,48.18553408985775,48.18905163728031,48.14278393584264,48.147121105965596,48.15122604965678])
        expected['lonSH'] = np.array([3.209931924038471,3.1683759859110556,3.1265748013037546,3.1993957169134917,3.157824410860444,3.114996350000114,3.0719928386554787,3.1435928579510763,3.100818371387048,3.0578771855185893])
        expected['rhoSH'] = np.array([376940.9225097656,376944.6167480469,376948.3352905273,376888.5469604492,376893.35919189453,376896.88330078125,376899.969934082,376840.54616699216,376844.96953125,376849.1498535156])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_90S_270_90000(self):
        """Test for latitude = -90, longitude = 270, rho = 90000"""
        lat = -90
        lon = 270
        rho = 90000

        expected = {}
        expected['latNH'] = np.array([-72.91629487578541,-72.91326227179394,-72.91042091309922,-72.95791804858749,-72.95442099173243,-72.9523309538464,-72.95043216125714,-72.99723261745007,-72.99466446632215,-72.99228756049098])
        expected['lonNH'] = np.array([26.312069220781645,26.15313413389003,25.994491037585437,26.018999463874735,25.858865678783786,25.68843196842446,25.51824414487525,25.530536777833984,25.358817284363397,25.18708583806177])
        expected['rhoNH'] = np.array([257072.90361328123,257069.98710937498,257067.21643066406,257034.94045410157,257031.70799560545,257029.47200927735,257027.33323974608,257058.8557861328,257056.27954101562,257053.7762084961])
        expected['latSH'] = np.array([-67.50291916606508,-67.50166241125783,-67.50033735455884,-67.50950346842498,-67.50813743059098,-67.50718120410718,-67.50608837383999,-67.51559599716464,-67.51447584614075,-67.51328739322517])
        expected['lonSH'] = np.array([152.87375845608895,152.8524072847435,152.83091950961463,152.8625432854718,152.8408779254245,152.82214954672034,152.8033392057461,152.83777701954133,152.81887105591872,152.79989679040443])
        expected['rhoSH'] = np.array([6371.2,6371.199620246887,6371.199240493775,6371.199240493775,6371.199620246887,6371.199620246887,6371.199620246887,6371.2,6371.2,6371.199620246887])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_60S_270_90000(self):
        """Test for latitude = -60, longitude = 270, rho = 90000"""
        lat = -60
        lon = 270
        rho = 90000

        expected = {}
        expected['latNH'] = np.array([-73.07605300047203,-73.05158726286504,-73.02742205358152,-73.07696824582081,-73.05203805535027,-73.02727178941979,-73.0027377499211,-73.0519834138369,-73.0253593364522,-73.00037450446828])
        expected['lonNH'] = np.array([358.7624890233331,358.7134482650924,358.66347860112455,358.7158524916802,358.66473535593184,358.6006135400038,358.53545353532184,358.57198138700306,358.51531813764865,358.44802711394567])
        expected['rhoNH'] = np.array([256350.75294189452,256338.2848876953,256325.9383544922,256319.7650878906,256306.78664550782,256297.91561279297,256289.31192626953,256286.9301147461,256339.84035644532,256330.94501953124])
        expected['latSH'] = np.array([50.15727651455161,50.20839706539458,50.26434314488615,50.38270007791871,50.435125194893146,50.494653708604396,50.55517601483988,50.67846775954778,50.73534615986106,50.7969032397558])
        expected['lonSH'] = np.array([223.84925940492624,223.82402868613224,223.79538287275318,223.94526454389995,223.916140617279,223.87795985981865,223.83916438533296,223.97824069721278,223.93900809062023,223.89621012528093])
        expected['rhoSH'] = np.array([257076.30620117186,257020.79541015625,257021.96201171874,257003.6366455078,256937.82087402343,256923.57861328125,256905.59350585938,256866.92552490233,256782.12817382812,256754.4699951172])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_30S_270_90000(self):
        """Test for latitude = -30, longitude = 270, rho = 90000"""
        lat = -30
        lon = 270
        rho = 90000

        expected = {}
        expected['latNH'] = np.array([-70.39009476974283,-70.37976752371779,-70.36875725877573,-70.44152609419305,-70.42864435741839,-70.41382284691946,-60.986946018629624,-61.31512294787038,-34.482055434936626,-61.99900246870709])
        expected['lonNH'] = np.array([355.40187202714674,355.5211544508118,355.64737634667364,355.8572817202465,355.98096278573706,356.0821315477233,339.53583435882734,338.60742040532585,305.6448181878176,337.55070817845484])
        expected['rhoNH'] = np.array([255369.37368164063,255325.86916503907,255343.75705566406,255335.80958251952,255351.5830078125,255330.94874267577,237936.36044921874,232434.66748046875,134001.73708496094,226095.0386352539])
        expected['latSH'] = np.array([53.79742241761532,53.977978468324615,54.16070993428455,54.36804374163487,54.543736697655106,54.725846616400574,54.906884195446345,55.111929889424715,55.28908792102192,55.46526582047323])
        expected['lonSH'] = np.array([233.64304033505087,233.5219000999315,233.39382039261542,233.42832650830235,233.29912664996237,233.16000935694757,233.01856979961494,233.04140995219944,232.89409643218062,232.7444333270873])
        expected['rhoSH'] = np.array([254903.04901123047,254869.02313232422,254893.6189819336,254904.02117919922,254865.35319824217,254875.65817871093,254883.6542602539,254880.51901855468,254886.2305053711,254889.34144287108])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_0N_270_90000(self):
        """Test for latitude = 0, longitude = 270, rho = 90000"""
        lat = 0
        lon = 270
        rho = 90000

        expected = {}
        expected['latNH'] = np.array([65.20232544463546,65.266204788848,65.33028391609378,65.43394569712706,65.49817679608185,65.56492311219851,65.63195117361843,65.73856871901503,65.8053850445707,65.87244384184187])
        expected['lonNH'] = np.array([259.495661513386,259.42593894233846,259.355533352374,259.0615893312533,258.9899269864815,258.91427581123446,258.83805090009713,258.5329873310077,258.4551778159829,258.37676724431117])
        expected['rhoNH'] = np.array([6371.199620246887,6371.199240493775,6371.198860740661,6371.199240493775,6371.199620246887,6371.198860740661,6371.199620246887,6371.2,6371.199620246887,6371.199240493775])
        expected['latSH'] = np.array([-71.65205418117273,-71.67445720165037,-71.69692852401971,-71.67721659807506,-71.69971524120109,-71.72228218621882,-71.7447398482098,-71.72448150713154,-71.74711675404097,-71.7697520009504])
        expected['lonSH'] = np.array([175.52858068767247,175.57520355894698,175.62190839249152,175.48570076006314,175.53293834836293,175.5879760126949,175.64279511097342,175.51102710150553,175.56577789789236,175.62093850562937])
        expected['rhoSH'] = np.array([6371.198860740661,6371.198860740661,6371.198860740661,6371.199240493775,6371.198101234436,6371.1984809875485,6371.198860740661,6371.1984809875485,6371.199620246887,6371.199240493775])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_30N_270_90000(self):
        """Test for latitude = 30, longitude = 270, rho = 90000"""
        lat = 30
        lon = 270
        rho = 90000

        expected = {}
        expected['latNH'] = np.array([67.326978729373,67.38729954502796,67.44764255879772,67.51564904481626,67.57595620009288,67.6381536102223,67.70045518073658,67.77031435556746,67.8325561619265,67.89488334565016])
        expected['lonNH'] = np.array([258.16765417268203,258.08607439323544,258.0038389156285,257.8409798850587,257.75789746399465,257.6722468918027,257.58577669691033,257.4170437036543,257.3297265653049,257.24156248349834])
        expected['rhoNH'] = np.array([6371.2,6371.199620246887,6371.199620246887,6371.200759506225,6371.199240493775,6371.199620246887,6371.2,6371.199240493775,6371.199240493775,6371.2])
        expected['latSH'] = np.array([-72.57149326610482,-72.59684692830393,-72.62247379806982,-72.63565606316794,-72.66128293293383,-72.68690980269972,-72.71294648381581,-72.72627901307567,-72.7522337319217,-72.77769667714753])
        expected['lonSH'] = np.array([170.38248394055307,170.44922854912244,170.51660153509545,170.57434395433873,170.64197648750022,170.72059196484705,170.80081936683803,170.86936714534826,170.9489251888006,171.02836028884784])
        expected['rhoSH'] = np.array([6371.2,6371.199620246887,6371.198860740661,6371.199620246887,6371.199620246887,6371.198860740661,6371.1984809875485,6371.198860740661,6371.2,6371.1984809875485])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_60N_270_90000(self):
        """Test for latitude = 60, longitude = 270, rho = 90000"""
        lat = 60
        lon = 270
        rho = 90000

        expected = {}
        expected['latNH'] = np.array([74.64559643448064,74.70444363682218,74.76325156557598,74.8105796538823,74.86906144110324,74.92942494544053,74.98968599694025,75.038347679682,75.09838162739183,75.15832166000058])
        expected['lonNH'] = np.array([251.51597882681673,251.36410274043234,251.21058740864714,251.00311358241882,250.84754919388263,250.68520925768976,250.5212300760961,250.30228153206215,250.13611668993408,249.96836724391858])
        expected['rhoNH'] = np.array([6371.2,6371.2,6371.199240493775,6371.2,6371.199620246887,6371.199240493775,6371.2,6371.199240493775,6371.199620246887,6371.2])
        expected['latSH'] = np.array([42.657414617175796,42.650055088345106,42.64233355948841,42.596718141116476,42.58936544247496,42.58053742297272,42.57121079966106,42.523587305673146,42.51468756918462,42.50529605907585])
        expected['lonSH'] = np.array([337.09283961725384,337.0521863313139,337.01150572461734,337.09863161767004,337.05778708643334,337.0160682909829,336.9743221747758,337.06024595453454,337.01844519681407,336.97658979758023])
        expected['rhoSH'] = np.array([374961.7829589844,374975.5877441406,374989.076574707,374886.63437499997,374900.31763916014,374912.7613891601,374924.6461425781,374820.2839111328,374832.7276611328,374844.417980957])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_90N_270_90000(self):
        """Test for latitude = 90, longitude = 270, rho = 90000"""
        lat = 90
        lon = 270
        rho = 90000

        expected = {}
        expected['latNH'] = np.array([83.20862508749313,83.24527716323989,83.28141612102526,83.3013585658544,83.33654855423195,83.37292229977004,83.40868047450917,83.42815675892746,83.46288528264921,83.49695981575793])
        expected['lonNH'] = np.array([228.984482490887,228.51412834388321,228.038733517272,227.5677100117296,227.08495224119306,226.5767451858091,226.0629646960624,225.55742141445475,225.0355403203524,224.5081404334007])
        expected['rhoNH'] = np.array([6371.2,6371.199620246887,6371.199240493775,6371.2,6371.199620246887,6371.199620246887,6371.2,6371.199240493775,6371.2,6371.2])
        expected['latSH'] = np.array([48.21644752604123,48.22020754517932,48.22374899826397,48.17751203267757,48.1818560329897,48.18553408985775,48.18905163728031,48.14278393584264,48.147121105965596,48.15122604965678])
        expected['lonSH'] = np.array([3.209931924038471,3.1683759859110556,3.1265748013037546,3.1993957169134917,3.157824410860444,3.114996350000114,3.0719928386554787,3.1435928579510763,3.100818371387048,3.0578771855185893])
        expected['rhoSH'] = np.array([376940.9225097656,376944.6167480469,376948.3352905273,376888.5469604492,376893.35919189453,376896.88330078125,376899.969934082,376840.54616699216,376844.96953125,376849.1498535156])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_90S_0_120000(self):
        """Test for latitude = -90, longitude = 0, rho = 120000"""
        lat = -90
        lon = 0
        rho = 120000

        expected = {}
        expected['latNH'] = np.array([-75.9398283760533,-75.93943222508145,-75.93922731940634,-75.98134226582863,-75.98057728464161,-75.98101441674848,-75.98164279415212,-76.02486423121996,-76.02217313668697,-76.02237804236208])
        expected['lonNH'] = np.array([26.637722395124097,26.47820503460574,26.318750853337207,26.344097685347126,26.18340040964965,26.012591038885972,25.84182947944648,25.854943442652907,25.68296952463574,25.510879493402687])
        expected['rhoNH'] = np.array([259029.1,259028.61391601563,259028.24935302735,259002.0008178711,259001.19877929686,259001.51473388672,259002.0008178711,258976.65153808592,259039.0647216797,259039.210546875])
        expected['latSH'] = np.array([-67.0905669854931,-67.0889687212273,-67.08737045696151,-67.09795725017503,-67.09633166515258,-67.09508857072365,-67.09383181591636,-67.10471913745334,-67.1035033637811,-67.10223294859546])
        expected['lonSH'] = np.array([155.14829341197324,155.11668329649441,155.08440382247693,155.10426601258334,155.07176797251242,155.0410457816257,155.0098454774971,155.03114200732918,154.999477250337,154.96751196502134])
        expected['rhoSH'] = np.array([6371.199620246887,6371.199240493775,6371.199620246887,6371.2,6371.2,6371.199620246887,6371.2,6371.2,6371.199620246887,6371.2])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_60S_0_120000(self):
        """Test for latitude = -60, longitude = 0, rho = 120000"""
        lat = -60
        lon = 0
        rho = 120000

        expected = {}
        expected['latNH'] = np.array([-63.36886520864485,-63.36827781237622,-63.36837343502461,-63.415925212026224,-63.41544709878431,-63.415679325216104,-63.41613011770133,-63.464160007944855,-63.4634906494062,-63.46351797016288])
        expected['lonNH'] = np.array([13.51305286717562,13.435058083269597,13.360066021277442,13.361988719528801,13.286589407507384,13.20545188280951,13.124157263760726,13.119501636067715,13.034738134694212,12.952842458998466])
        expected['rhoNH'] = np.array([255249.94284667968,255201.7476196289,255216.7919189453,255207.43480224608,255222.6006225586,255238.7143066406,255254.755078125,255246.24860839843,255198.8797241211,255214.8475830078])
        expected['latSH'] = np.array([-70.25354562785594,-70.25373687315272,-70.25387347693612,-70.26387287388101,-70.2640367984211,-70.2648291003648,-70.26559408155185,-70.27624917665707,-70.27708245973582,-70.2777244975178])
        expected['lonSH'] = np.array([149.1687769823289,149.14515818817898,149.12155305440743,149.16181018937547,149.138368980144,149.11797403528234,149.09749712815065,149.14118301808205,149.12066512981534,149.10024286419699])
        expected['rhoSH'] = np.array([6371.199620246887,6371.2,6371.198860740661,6371.199620246887,6371.199240493775,6371.199620246887,6371.2,6371.2,6371.199620246887,6371.199620246887])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_30S_0_120000(self):
        """Test for latitude = -30, longitude = 0, rho = 120000"""
        lat = -30
        lon = 0
        rho = 120000

        expected = {}
        expected['latNH'] = np.array([1.0392517588742862,1.0369568153131752,1.034518437779468,1.0051759451050941,1.0033796053533877,1.0008797561171576,0.9982911144217326,0.9683339047220443,0.9663668102410838,0.9643314138684218])
        expected['lonNH'] = np.array([359.0280194575065,359.0238940232478,359.01971394747574,359.067252064099,359.0630446675703,359.0595202899586,359.0558866293201,359.1041624063738,359.10052874573535,359.0968404435835])
        expected['rhoNH'] = np.array([382299.2936157226,382303.3524169922,382307.77578125,382290.5441040039,382293.8980834961,382298.49157714844,382303.2065917969,382286.9227783203,382290.4225830078,382294.50568847655])
        expected['latSH'] = np.array([-79.39074047306724,-79.38628718972839,-79.38180658563286,-79.39849956796436,-79.39395066197713,-79.39105466176906,-79.38810402004759,-79.40632696475319,-79.40336266265342,-79.40035737941861])
        expected['lonSH'] = np.array([97.60581429625923,97.54192470676293,97.47746138137634,97.28948774522843,97.22628117464913,97.16353905693339,97.10011392030066,96.9108493783996,96.84885858149256,96.78583642602085])
        expected['rhoSH'] = np.array([6371.195063209533,6371.1946834564205,6371.194303703308,6371.196961975097,6371.197721481323,6371.1984809875485,6371.2,6371.195442962647,6371.195063209533,6371.195063209533])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_0N_0_120000(self):
        """Test for latitude = 0, longitude = 0, rho = 120000"""
        lat = 0
        lon = 0
        rho = 120000

        expected = {}
        expected['latNH'] = np.array([15.666450206104273,15.668205564720964,15.669865300689281,15.64529711024474,15.647332506617403,15.649340582233393,15.651184733309293,15.624014240790984,15.626261373027916,15.628467524129832])
        expected['lonNH'] = np.array([359.25021917158534,359.24489162403273,359.23950943496675,359.28073645679694,359.2753815884877,359.27049117304193,359.26551879532616,359.3074015153167,359.3025384206276,359.2975387221552])
        expected['rhoNH'] = np.array([382313.92474365234,382313.1956176758,382312.22344970703,382332.9063232422,382331.66680908203,382331.35085449216,382329.3093017578,382289.1587646484,382287.1901245117,382285.31870117184])
        expected['latSH'] = np.array([-71.83816317567724,-71.81910694789292,-71.79992777670353,-71.7800929073538,-71.76098203805611,-71.74413879156285,-71.72722724317791,-71.70934580793082,-71.69250256143755,-71.67552271116091])
        expected['lonSH'] = np.array([43.589529622591016,43.523481693316995,43.45735180177293,43.31789299929961,43.25202607003859,43.178577630798856,43.10502673872158,42.95785323758073,42.884432119097674,42.81102466099296])
        expected['rhoSH'] = np.array([6371.187468147277,6371.192025184631,6371.199620246887,6371.185949134827,6371.186708641052,6371.190126419067,6371.198101234436,6371.185949134827,6371.185949134827,6371.189366912841])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_30N_0_120000(self):
        """Test for latitude = 30, longitude = 0, rho = 120000"""
        lat = 30
        lon = 0
        rho = 120000

        expected = {}
        expected['latNH'] = np.array([73.12373124965883,73.1608874787437,73.19782001913326,73.24322370164091,73.2794920061337,73.3164808955839,73.3531914548254,73.39857123167099,73.43459194180633,73.47037018022615])
        expected['lonNH'] = np.array([341.53891027633864,341.7632683301952,341.98839136523884,342.1763581711976,342.40333901769543,342.6415760159455,342.8806872784093,343.08266963254493,343.3237479894897,343.5656186483782])
        expected['rhoNH'] = np.array([6371.198860740661,6371.198101234436,6371.198101234436,6371.198101234436,6371.197341728211,6371.197721481323,6371.1984809875485,6371.197721481323,6371.197721481323,6371.197721481323])
        expected['latSH'] = np.array([24.67367338159937,24.68518225035085,24.69639742096801,24.655573380298847,24.66868051331609,24.68016206131088,24.69137040173888,24.650478059178013,24.663564701627763,24.675059910000883])
        expected['lonSH'] = np.array([0.9141882702859434,0.8990236495029283,0.8838563073164158,0.916942544068751,0.9015351314050832,0.8861001845413238,0.8706604352008042,0.9034018007609065,0.8877495685041761,0.8723030423353393])
        expected['rhoSH'] = np.array([382277.07957763673,382280.36064453126,382283.7146240234,382335.06939697266,382275.47550048825,382278.7565673828,382282.0133300781,382333.36810302734,382273.7499023437,382277.15249023435])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_60N_0_120000(self):
        """Test for latitude = 60, longitude = 0, rho = 120000"""
        lat = 60
        lon = 0
        rho = 120000

        expected = {}
        expected['latNH'] = np.array([83.35182512608434,83.41309320359981,83.47417558534724,83.53529894822968,83.59592328041589,83.6588715844672,83.72161583661706,83.78478526804274,83.84704628430882,83.90903665432903])
        expected['lonNH'] = np.array([310.0599344295839,310.339835581771,310.62459982864715,310.743991535339,311.0385366131066,311.3521788997936,311.67153122462673,311.81925455599577,312.15002695712116,312.4877934719566])
        expected['rhoNH'] = np.array([6371.2,6371.199620246887,6371.1984809875485,6371.199240493775,6371.199240493775,6371.198860740661,6371.2,6371.199620246887,6371.199620246887,6371.2])
        expected['latSH'] = np.array([38.460929315647036,38.468562052044526,38.478595599935275,38.439195653708055,38.44718355994238,38.454669447272714,38.461940183644195,38.42526548289581,38.43310995515757,38.4407563519334])
        expected['lonSH'] = np.array([2.123415739837285,2.097471479718403,2.0714352254891373,2.1155486425738994,2.089605663115487,2.062929078651533,2.036164342058603,2.079469022056953,2.052811434056628,2.0260592906249806])
        expected['rhoSH'] = np.array([382319.53901367186,382329.3093017578,382277.51705322263,382296.42572021484,382306.34183349606,382316.2336425781,382325.5421508789,382283.13132324215,382293.2904785156,382303.0850708008])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_90N_0_120000(self):
        """Test for latitude = 90, longitude = 0, rho = 120000"""
        lat = 90
        lon = 0
        rho = 120000

        expected = {}
        expected['latNH'] = np.array([79.25470712414821,79.27798611638691,79.30072125481294,79.28855156525927,79.31061393005206,79.33341907791709,79.35545326817955,79.34279095123199,79.36410626408431,79.38475734103984])
        expected['lonNH'] = np.array([213.57057602486577,213.20455984762313,212.83700004762807,212.50938319389923,212.14161848822906,211.75661438509377,211.36958854596418,211.02720482324978,210.63993309731006,210.25109042786121])
        expected['rhoNH'] = np.array([6371.199620246887,6371.199620246887,6371.199240493775,6371.2,6371.199240493775,6371.199240493775,6371.2,6371.199620246887,6371.199620246887,6371.2])
        expected['latSH'] = np.array([73.52093236310446,73.44684871627192,73.37421477709071,73.66171109963489,73.58151443349519,73.50886683393564,73.43907083835457,73.7358732936429,73.65882022206868,73.58863319815764])
        expected['lonSH'] = np.array([351.32061543201064,351.40662117403946,351.4901680479671,351.3320901498163,351.4276854774398,351.5164506158933,351.60114496160145,351.44112728972635,351.5373783155102,351.6237938688892])
        expected['rhoSH'] = np.array([329081.0691040039,329560.44512939453,330019.04106445314,328352.234777832,328805.41087646486,329268.9162597656,329714.7281860351,328038.1273071289,328484.3281005859,328935.0980834961])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_90S_90_120000(self):
        """Test for latitude = -90, longitude = 90, rho = 120000"""
        lat = -90
        lon = 90
        rho = 120000

        expected = {}
        expected['latNH'] = np.array([-75.9398283760533,-75.93943222508145,-75.93922731940634,-75.98134226582863,-75.98057728464161,-75.98101441674848,-75.98164279415212,-76.02486423121996,-76.02215947630864,-76.02237804236208])
        expected['lonNH'] = np.array([26.63770531965117,26.47818966668011,26.318733777864285,26.344089147610664,26.1833884568186,26.012575670960338,25.841817526615436,25.85493148982186,25.682952449162816,25.51086924811893])
        expected['rhoNH'] = np.array([259029.1,259028.61391601563,259028.24935302735,259002.0008178711,259001.19877929686,259001.51473388672,259002.0008178711,258976.65153808592,259039.0647216797,259039.2348510742])
        expected['latSH'] = np.array([-67.09053966473641,-67.0889687212273,-67.08738411733987,-67.09795725017503,-67.09638630666595,-67.09508857072365,-67.09383181591636,-67.10471913745334,-67.1035033637811,-67.10223294859546])
        expected['lonSH'] = np.array([155.1484163553783,155.11668329649441,155.0844174828553,155.10426601258334,155.0716586894857,155.04101846086903,155.00983181711874,155.03114200732918,154.99946358995865,154.96751196502134])
        expected['rhoSH'] = np.array([6371.199620246887,6371.199620246887,6371.2,6371.2,6371.199620246887,6371.1984809875485,6371.2,6371.199620246887,6371.199620246887,6371.199620246887])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_60S_90_120000(self):
        """Test for latitude = -60, longitude = 90, rho = 120000"""
        lat = -60
        lon = 90
        rho = 120000

        expected = {}
        expected['latNH'] = np.array([-66.2869679088844,-66.31193908048996,-66.33708783701397,-66.37688051911846,-66.40170142656228,-66.42887191908059,-66.456247317274,-66.4984988674797,-66.52551909583627,-66.55275789024628])
        expected['lonNH'] = np.array([56.944332129339315,56.838645197217126,56.7330333971758,56.78584100474376,56.67883584611175,56.567401309802996,56.456007754629255,56.50359709767132,56.39070773106935,56.27781494937279])
        expected['rhoNH'] = np.array([257871.02921142578,257888.77127685546,257906.4404296875,257857.2001220703,257874.23736572266,257889.0872314453,257903.91279296874,257851.97471923826,257866.04685058593,257880.1189819336])
        expected['latSH'] = np.array([-64.69444100200423,-64.69755556826576,-64.7005745118789,-64.7159014563764,-64.71889307923288,-64.72202130587274,-64.72502658910756,-64.7407087034419,-64.74352274137993,-64.74624115666961])
        expected['lonSH'] = np.array([146.17515971062568,146.16481880422228,146.15302989771482,146.189475787126,146.17602031446108,146.16354838903663,146.1490000861045,146.18720816432156,146.17099329523197,146.15302989771482])
        expected['rhoSH'] = np.array([6371.199620246887,6371.199620246887,6371.199240493775,6371.199620246887,6371.2,6371.199620246887,6371.2,6371.199620246887,6371.199620246887,6371.2])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_30S_90_120000(self):
        """Test for latitude = -30, longitude = 90, rho = 120000"""
        lat = -30
        lon = 90
        rho = 120000

        expected = {}
        expected['latNH'] = np.array([-56.23257428078878,-56.31650364530992,-56.40037836831766,-56.49572780913104,-56.58182917380822,-56.667834915837034,-56.75688692223565,-56.854900136825336,-56.939908671235315,-57.027949809636766])
        expected['lonNH'] = np.array([62.60261110193962,62.467865129993605,62.332941573129176,62.32375496869551,62.18068982634042,62.039687401114676,61.891806975394736,61.87750455927273,61.73455553013353,61.58467385898677])
        expected['rhoNH'] = np.array([255793.16600341795,255777.36827392576,255760.6955932617,255756.36944580078,255798.31849365233,255772.06995849608,255804.97784423828,255790.03076171875,255761.37611083983,255791.950793457])
        expected['latSH'] = np.array([59.79512422592482,59.887512779733,59.98401310742153,60.21388312393831,60.31049273465355,60.40676425100489,60.50359242777357,60.73751616156275,60.83659147056837,60.93590242110035])
        expected['lonSH'] = np.array([157.74627880619266,157.60276287135235,157.47074897507434,157.35996330673672,157.23501182606051,157.10335309961934,156.97356584501077,156.876071724798,156.76296379214259,156.65109895391612])
        expected['rhoSH'] = np.array([255864.71756591796,255789.03428955076,255761.76497802735,255704.8202392578,255656.0903198242,255604.54111328124,255543.85352783202,255505.9875854492,255483.45759277343,255452.37252197266])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_0N_90_120000(self):
        """Test for latitude = 0, longitude = 90, rho = 120000"""
        lat = 0
        lon = 90
        rho = 120000

        expected = {}
        expected['latNH'] = np.array([-52.74005267135115,-52.904209437863244,-53.066098581570884,-53.2429321791825,-53.39964403949929,-53.56212057947556,-53.71887342092734,-53.89156792390193,-54.04367623671814,-54.197669681745225])
        expected['lonNH'] = np.array([58.904644232457166,58.73698357890086,58.56886530267017,58.538020168378395,58.368126042963496,58.186285916690245,58.009554771916164,57.97175650504931,57.79313339787514,57.608445082718])
        expected['rhoNH'] = np.array([254941.93572998047,254921.61741943358,254905.09056396483,254906.52451171874,254897.60487060546,254938.5088378906,254922.9055419922,254924.26657714843,254915.9302368164,254970.3716430664])
        expected['latSH'] = np.array([68.5491659492659,68.63327289870543,68.70935779096479,68.88482364319513,68.94963701577667,69.00563261413973,69.0597328350081,69.21022751563288,69.25338918854548,69.29131552145927])
        expected['lonSH'] = np.array([143.161639267681,143.65548926542962,144.11565277019173,144.54079106489,144.9747812847526,145.37468886065685,145.7763039838536,146.13965638731995,146.50549497964417,146.84438164550352])
        expected['rhoSH'] = np.array([256077.40361328123,256098.06218261717,256076.77170410156,256086.6635131836,256091.40283203125,256055.60274658204,256089.5557128906,256096.96849365233,256094.3193359375,256043.15899658203])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_30N_90_120000(self):
        """Test for latitude = 30, longitude = 90, rho = 120000"""
        lat = 30
        lon = 90
        rho = 120000

        expected = {}
        expected['latNH'] = np.array([-52.376686607506485,-52.52483341060406,-52.67500194969594,-52.84370762219527,-52.98574823617486,-53.134099944947536,-53.28085338945442,-53.44654011834061,-53.58905884556208,-53.730129572679516])
        expected['lonNH'] = np.array([54.7518243302923,54.64671796424956,54.53581276760148,54.58325526157638,54.473941499004916,54.351974810996,54.22911678330039,54.26515969155055,54.13911538060714,54.01213533374743])
        expected['rhoNH'] = np.array([254932.01961669922,254910.3645751953,254947.08822021485,254911.3853515625,254885.890246582,254905.74677734374,254924.33948974608,254870.96746826172,254888.34497070312,254904.5072631836])
        expected['latSH'] = np.array([71.93174541872843,71.9472175047458,71.95898933578032,72.04937664416168,72.05647321070933,72.05970559773404,72.06015980531384,72.1422569715901,72.13895969776827,72.13541482958904])
        expected['lonSH'] = np.array([144.81148512207594,145.26584296604352,145.68625476983615,146.05168355081017,146.4486541453713,146.82691002160664,147.17452566922526,147.51002456125627,147.83772337725514,148.17096830686006])
        expected['rhoSH'] = np.array([257430.53990478514,257447.91740722655,257415.6900390625,257345.79116210938,257327.4171875,257320.9522705078,257262.69510498046,257283.3779785156,257236.49517822266,257254.48028564453])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_60N_90_120000(self):
        """Test for latitude = 60, longitude = 90, rho = 120000"""
        lat = 60
        lon = 90
        rho = 120000

        expected = {}
        expected['latNH'] = np.array([80.42818826506976,80.3982165412181,80.36765656732418,80.32590105960695,80.29529242061518,80.2627252248789,80.22969613760003,80.18594365332422,80.15266355659332,80.11872093151295])
        expected['lonNH'] = np.array([173.00942933685334,172.63621414022552,172.26655064196606,172.10783070603333,171.74223800051922,171.35514385949793,170.9727215678689,170.7998221592192,170.4206510376351,170.04612444468663])
        expected['rhoNH'] = np.array([6371.2,6371.2,6371.198101234436,6371.199240493775,6371.199240493775,6371.199620246887,6371.2,6371.199620246887,6371.2,6371.199620246887])
        expected['latSH'] = np.array([25.730706627361386,26.188390773454763,26.533656835998904,26.799269232442363,27.032540683165806,27.25874288809829,27.466701657757667,27.62854299014112,27.80933126728219,27.98217603441853])
        expected['lonSH'] = np.array([30.799255911122607,30.63350771053391,30.54271400589693,30.5672514604902,30.51125415457985,30.457988924337506,30.407517241465698,30.45445771653661,30.408258316990644,30.362690709942903])
        expected['rhoSH'] = np.array([366688.6578491211,368672.31798095704,369689.59454345703,370510.7848266601,371039.01229248045,371530.44320068357,371970.37351074215,372433.9761108398,372798.12592773436,373141.86021728517])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_90N_90_120000(self):
        """Test for latitude = 90, longitude = 90, rho = 120000"""
        lat = 90
        lon = 90
        rho = 120000

        expected = {}
        expected['latNH'] = np.array([79.25470712414821,79.27798611638691,79.30072125481294,79.28855156525927,79.31061393005206,79.33341907791709,79.35545326817955,79.34279095123199,79.36410626408431,79.38475734103984])
        expected['lonNH'] = np.array([213.57057602486577,213.20455984762313,212.83700004762807,212.50938319389923,212.14161848822906,211.75661438509377,211.36958854596418,211.02720482324978,210.63993309731006,210.25109042786121])
        expected['rhoNH'] = np.array([6371.199620246887,6371.199620246887,6371.199240493775,6371.2,6371.199240493775,6371.199240493775,6371.2,6371.199620246887,6371.199620246887,6371.2])
        expected['latSH'] = np.array([73.52093236310446,73.44684871627192,73.37421477709071,73.66171109963489,73.58151443349519,73.50886683393564,73.43907083835457,73.7358732936429,73.65882022206868,73.58863319815764])
        expected['lonSH'] = np.array([351.32061543201064,351.40662117403946,351.4901680479671,351.3320901498163,351.4276854774398,351.5164506158933,351.60114496160145,351.44112728972635,351.5373783155102,351.6237938688892])
        expected['rhoSH'] = np.array([329081.0691040039,329560.44512939453,330019.04106445314,328352.234777832,328805.41087646486,329268.9162597656,329714.7281860351,328038.1273071289,328484.3281005859,328935.0980834961])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_90S_180_120000(self):
        """Test for latitude = -90, longitude = 180, rho = 120000"""
        lat = -90
        lon = 180
        rho = 120000

        expected = {}
        expected['latNH'] = np.array([-75.9398283760533,-75.93943222508145,-75.93921365902801,-75.9813286054503,-75.98057728464161,-75.98101441674848,-75.98164279415212,-76.02485057084164,-76.02215947630864,-76.02237804236208])
        expected['lonNH'] = np.array([26.63771044229305,26.478194789321986,26.31874573069533,26.344090855157955,26.18338674927131,26.01258079360222,25.841824356804604,25.854934904916444,25.68295415671011,25.51086754057164])
        expected['rhoNH'] = np.array([259029.1,259028.5896118164,259028.24935302735,259002.0008178711,259001.19877929686,259001.51473388672,259002.0008178711,258976.65153808592,259039.0647216797,259039.210546875])
        expected['latSH'] = np.array([-67.0905669854931,-67.08895506084897,-67.08737045696151,-67.09797091055339,-67.09638630666595,-67.09510223110198,-67.093818155538,-67.10471913745334,-67.1035033637811,-67.10223294859546])
        expected['lonSH'] = np.array([155.14829341197324,155.11669695687277,155.08440382247693,155.10426601258334,155.0716586894857,155.04095015897732,155.00990011901044,155.03114200732918,154.99946358995865,154.96751196502134])
        expected['rhoSH'] = np.array([6371.199620246887,6371.198860740661,6371.2,6371.2,6371.199620246887,6371.199620246887,6371.2,6371.199240493775,6371.198860740661,6371.2])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_60S_180_120000(self):
        """Test for latitude = -60, longitude = 180, rho = 120000"""
        lat = -60
        lon = 180
        rho = 120000

        expected = {}
        expected['latNH'] = np.array([-82.17356444660552,-82.20405441106047,-82.23693494172491,-82.26932369876911,-82.29963607830561,-82.33524868463806,-82.36855268703104,-82.40438385941692,-82.43979156007427,-82.47287699641382])
        expected['lonNH'] = np.array([72.63670540782195,72.34409327358944,72.08167740567755,72.39030633351375,72.09155385921738,71.8135105184845,71.50402781700205,71.80573776320904,71.5209871767112,71.20423032376269])
        expected['rhoNH'] = np.array([271892.87517089845,271924.8594970703,271897.6874023437,271855.7383544922,271887.04216308595,271859.72424316406,271892.63212890626,271851.1205566406,271823.31655273435,271855.71405029297])
        expected['latSH'] = np.array([43.965320711152366,43.95692299356784,43.948849709968876,44.030661715847295,44.02149560198114,44.014463922230604,44.00786595949238,44.09134453152827,44.08355470077987,44.07617468138167])
        expected['lonSH'] = np.array([198.56450015418602,198.44799078732393,198.3314677600835,198.32980119392604,198.21286835533542,198.08840864827945,197.96396260160182,197.95338946876663,197.82850628998213,197.70366409233262])
        expected['rhoSH'] = np.array([265513.2173095703,265552.46859130857,265589.60540771484,265442.856652832,265482.93427734374,265520.9460449219,265558.0585571289,265410.45915527345,265448.7868774414,265486.65281982423])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_30S_180_120000(self):
        """Test for latitude = -30, longitude = 180, rho = 120000"""
        lat = -30
        lon = 180
        rho = 120000

        expected = {}
        expected['latNH'] = np.array([-80.2607153280301,-80.32015163418754,-80.38036658191038,-80.38920484669637,-80.44876409625888,-80.5131044782404,-80.57752682249196,-80.59044954040164,-80.65414788460117,-80.71872049301447])
        expected['lonNH'] = np.array([103.78295541934872,103.68356933673586,103.55286000658933,103.93462660005802,103.83293874369487,103.70418284765096,103.57497615912183,103.9675207911008,103.8696031991595,103.73827915198767])
        expected['rhoNH'] = np.array([280948.4010620117,280891.14036865236,280892.550012207,280894.15408935543,280836.212878418,280837.37947998045,280838.88634033204,280840.0772460937,280782.45198974607,280783.03529052733])
        expected['latSH'] = np.array([40.85840084640238,40.84918009102286,40.8400822790484,40.92000232252673,40.915470492012425,40.90686103856362,40.8990302266802,40.98501206304691,40.9762216095851,40.967397005177446])
        expected['lonSH'] = np.array([194.15132368614402,194.0630913024458,193.9748042772342,193.97203122043118,193.88516487456695,193.79085362250743,193.69666531385295,193.68872863403737,193.59432175932946,193.4997919412165])
        expected['rhoSH'] = np.array([281083.67823486327,281067.97772216797,281051.8154296875,281014.7272216797,281057.867175293,281042.4583129883,281025.05650634767,281046.3712890625,281030.8652099609,281015.2376098633])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_0N_180_120000(self):
        """Test for latitude = 0, longitude = 180, rho = 120000"""
        lat = 0
        lon = 180
        rho = 120000

        expected = {}
        expected['latNH'] = np.array([-77.99456784444658,-78.06730935910721,-78.14010551528122,-78.16601925299224,-78.23876076765288,-78.31667956570439,-78.39465300526925,-78.42603089431628,-78.5039496923678,-78.58192313193265])
        expected['lonNH'] = np.array([94.58422056971563,94.39272255595598,94.20125186295301,94.5612916246719,94.36430213881955,94.16780442658745,93.97047343127662,94.33770538219153,94.13615332997362,93.93433490037808])
        expected['rhoNH'] = np.array([277453.82177734375,277428.30236816406,277403.53638916014,277415.9072265625,277389.075390625,277362.75394287106,277337.16162109375,277348.6575073242,277321.65554199216,277295.6743530273])
        expected['latSH'] = np.array([42.92815648568593,42.92066376816643,42.91341693745704,42.980820659281314,42.9728976398441,42.96596499783654,42.964325752435734,43.03226222901527,43.02484464357663,43.01761830343476])
        expected['lonSH'] = np.array([191.4792853809433,191.40864756454704,191.33796876701575,191.3350181252943,191.2642300447363,191.18866083175928,191.11505871326324,191.1066849013408,191.03096542420204,190.9551913055499])
        expected['rhoSH'] = np.array([277566.88491210935,277543.79592285154,277520.0021118164,277523.69635009766,277501.0934448242,277478.077368164,277512.7837646484,277517.0126953125,277494.55561523436,277471.53953857423])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_30N_180_120000(self):
        """Test for latitude = 30, longitude = 180, rho = 120000"""
        lat = 30
        lon = 180
        rho = 120000

        expected = {}
        expected['latNH'] = np.array([-74.51294721692429,-74.59355710950877,-74.6740440586882,-74.74440866751766,-74.82383010718658,-74.9091938114334,-74.9943799307618,-75.07097367211432,-75.15501231966215,-75.23881874077821])
        expected['lonNH'] = np.array([74.21622080433325,73.89166387535259,73.56576822929459,73.75747797891852,73.42391886061178,73.0793221566063,72.73246465998552,72.91739886195279,72.56235196851719,72.20492133906126])
        expected['rhoNH'] = np.array([236782.22694091796,236674.65655517578,236566.77021484374,236645.95329589842,236536.94896240233,236426.14611816406,236316.4369628906,236393.06810302733,236281.2930908203,236170.29581298828])
        expected['latSH'] = np.array([50.75431701028077,50.74959393446971,50.74510991527959,50.80231616467303,50.79719693789011,50.79287342814549,50.79228261678229,50.84645284708966,50.84170928071108,50.84069841271392])
        expected['lonSH'] = np.array([190.73868796923884,190.67427928536563,190.60981595997904,190.60958373354725,190.54498380437727,190.4759169314901,190.40930892670414,190.40146786953696,190.3321960909747,190.26535585975697])
        expected['rhoSH'] = np.array([264778.1368041992,264741.340246582,264704.0333007812,264766.2763549805,264729.69853515626,264693.6311035156,264718.34847412107,264720.36572265625,264684.5413330078,264709.5503540039])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_60N_180_120000(self):
        """Test for latitude = 60, longitude = 180, rho = 120000"""
        lat = 60
        lon = 180
        rho = 120000

        expected = {}
        expected['latNH'] = np.array([76.3969969565499,76.39442965919562,76.39160622974747,76.37890976185406,76.37526585593186,76.37169025190136,76.36776801577048,76.3540973921467,76.34942383520712,76.34445914145417])
        expected['lonNH'] = np.array([199.04436192451442,198.75536296035284,198.4671289773783,198.22325024287383,197.93650524113835,197.63737027624848,197.33883636800556,197.08490359504282,196.78818651711913,196.49238468454422])
        expected['rhoNH'] = np.array([6371.2,6371.198860740661,6371.198860740661,6371.199620246887,6371.199240493775,6371.198860740661,6371.199620246887,6371.199240493775,6371.199240493775,6371.2])
        expected['latSH'] = np.array([63.233555859777844,63.23180562380303,63.229736076484514,63.27509194766799,63.27244183427002,63.271103117192695,63.269967598243184,63.31527907319705,63.31355445043162,63.31149514839686])
        expected['lonSH'] = np.array([193.58951330615378,193.5155286970642,193.43832023868637,193.44270522013352,193.36516891267556,193.285119095603,193.20493267474706,193.1997690517345,193.11922746104173,193.03554398333074])
        expected['rhoSH'] = np.array([255260.90404052733,255276.43442382812,255228.4579345703,255283.6770751953,255235.79780273436,255252.27604980467,255268.6327758789,255261.43873291014,255277.89267578124,255230.83974609376])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_90N_180_120000(self):
        """Test for latitude = 90, longitude = 180, rho = 120000"""
        lat = 90
        lon = 180
        rho = 120000

        expected = {}
        expected['latNH'] = np.array([79.25470712414821,79.27798611638691,79.30072125481294,79.28855156525927,79.31061393005206,79.33341907791709,79.35545326817955,79.34279095123199,79.36410626408431,79.38475734103984])
        expected['lonNH'] = np.array([213.57057602486577,213.20455984762313,212.83700004762807,212.50938319389923,212.14161848822906,211.75661438509377,211.36958854596418,211.02720482324978,210.63993309731006,210.25109042786121])
        expected['rhoNH'] = np.array([6371.199620246887,6371.199620246887,6371.199240493775,6371.2,6371.199240493775,6371.199240493775,6371.2,6371.199620246887,6371.199620246887,6371.2])
        expected['latSH'] = np.array([73.52093236310446,73.44684871627192,73.37421477709071,73.66171109963489,73.58151443349519,73.50886683393564,73.43907083835457,73.7358732936429,73.65882022206868,73.58863319815764])
        expected['lonSH'] = np.array([351.32061543201064,351.40662117403946,351.4901680479671,351.3320901498163,351.4276854774398,351.5164506158933,351.60114496160145,351.44112728972635,351.5373783155102,351.6237938688892])
        expected['rhoSH'] = np.array([329081.0691040039,329560.44512939453,330019.04106445314,328352.234777832,328805.41087646486,329268.9162597656,329714.7281860351,328038.1273071289,328484.3281005859,328935.0980834961])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_90S_270_120000(self):
        """Test for latitude = -90, longitude = 270, rho = 120000"""
        lat = -90
        lon = 270
        rho = 120000

        expected = {}
        expected['latNH'] = np.array([-75.9398283760533,-75.93943222508145,-75.93921365902801,-75.9813286054503,-75.98057728464161,-75.98101441674848,-75.98164279415212,-76.02485057084164,-76.02215947630864,-76.02237804236208])
        expected['lonNH'] = np.array([26.637722395124097,26.47821186479491,26.3187525608845,26.344102807989003,26.18340040964965,26.012594453980558,25.841836309635653,25.854946857747493,25.682971232183032,25.510881200949978])
        expected['rhoNH'] = np.array([259029.1,259028.61391601563,259028.24935302735,259002.0008178711,259001.19877929686,259001.51473388672,259002.0008178711,258976.65153808592,259039.0647216797,259039.210546875])
        expected['latSH'] = np.array([-67.0905669854931,-67.0889687212273,-67.08737045696151,-67.09795725017503,-67.09638630666595,-67.09510223110198,-67.093818155538,-67.10471913745334,-67.1035033637811,-67.10223294859546])
        expected['lonSH'] = np.array([155.14830707235157,155.11668329649441,155.08440382247693,155.10426601258334,155.0716586894857,155.04093649859897,155.0098454774971,155.0311556677075,154.99946358995865,154.96752562539967])
        expected['rhoSH'] = np.array([6371.199240493775,6371.199620246887,6371.199620246887,6371.199620246887,6371.2,6371.199620246887,6371.199620246887,6371.199620246887,6371.2,6371.2])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_60S_270_120000(self):
        """Test for latitude = -60, longitude = 270, rho = 120000"""
        lat = -60
        lon = 270
        rho = 120000

        expected = {}
        expected['latNH'] = np.array([-74.71197892933844,-74.68879726729543,-74.66515115238886,-74.70957470275061,-74.68516360665697,-74.6598509255929,-74.63471582944726,-74.6782377948386,-74.65237869864092,-74.62662888546998])
        expected['lonNH'] = np.array([340.42695547946056,340.3817123063984,340.35165947405034,340.3415507940787,340.3104051314635,340.2669378075855,340.2218858798201,340.17970263150613,340.13374911877025,340.08612903987694])
        expected['rhoNH'] = np.array([257822.22637939453,257762.72969970704,257764.4066894531,257773.25341796875,257775.1491455078,257782.22166748045,257790.12053222655,257744.59876708983,257752.64345703126,257761.39296875])
        expected['latSH'] = np.array([45.45076732731966,45.50518685953174,45.56108854279371,45.67695928696839,45.73406308352428,45.79535720113598,45.85819835659468,45.98101540315526,46.04482303038152,46.110051336955145])
        expected['lonSH'] = np.array([227.51405204560996,227.5130138568561,227.51209861150733,227.6833451143779,227.6805857179532,227.67289492494777,227.6652587734557,227.82892376634754,227.8193888222662,227.80990851969824])
        expected['rhoSH'] = np.array([252425.13868408202,252202.6580444336,251973.80970458983,251717.32749023437,251477.85821533203,251225.0702392578,250965.69582519532,250677.44802246094,250407.57419433593,250131.041015625])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_30S_270_120000(self):
        """Test for latitude = -30, longitude = 270, rho = 120000"""
        lat = -30
        lon = 270
        rho = 120000

        expected = {}
        expected['latNH'] = np.array([-70.68511796075236,-70.69125147062704,-70.69668830120636,-70.78296725080199,-70.78582226987504,-70.78668287371048,-70.78728393035743,-70.86871344564233,-70.86700589834982,-70.86451970949193])
        expected['lonNH'] = np.array([339.40338333044247,339.5291680941974,339.651483121854,339.78098350851747,339.8994189887255,339.9907522783069,340.09241281391337,340.20319848225097,340.30084286662543,340.38206747623525])
        expected['rhoNH'] = np.array([255821.62622070312,255830.76459960936,255842.55213623046,255829.98686523436,255845.2012939453,255809.6685546875,255836.54899902342,255839.90297851563,255870.42905273437,255842.30909423827])
        expected['latSH'] = np.array([51.77329585708205,52.0280448376506,52.278415666961166,52.53047355299673,52.77130943822597,53.017582154034535,53.25601039758134,53.492420320228405,53.72233473297479,53.95263846650386])
        expected['lonSH'] = np.array([240.15425967082402,240.03945785125444,239.92085844650634,239.94099384417953,239.8141982124274,239.67805888189073,239.54396860810505,239.55719185433819,239.41550641019543,239.26480511634827])
        expected['rhoSH'] = np.array([254939.6511352539,254923.0270629883,254910.53470458984,254954.40378417968,254953.57744140623,254997.34930419922,254985.61037597657,254977.6385986328,254976.78795166014,255038.95809326172])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_0N_270_120000(self):
        """Test for latitude = 0, longitude = 270, rho = 120000"""
        lat = 0
        lon = 270
        rho = 120000

        expected = {}
        expected['latNH'] = np.array([-69.39221779238233,-69.41828179425508,-69.44351251304911,-69.55443478517012,-69.57592256029898,-69.59564814662198,-69.61439018570451,-69.71872815546561,-69.73424634525989,-69.74872634630032])
        expected['lonNH'] = np.array([344.85603262789033,344.940344483005,345.03514750868476,345.1698934806308,345.2640954496636,345.33608564351556,345.4064639127233,345.53025426124066,345.61172475766057,345.68013593238743])
        expected['rhoNH'] = np.array([255280.9307006836,255256.94245605468,255295.78056640623,255278.8405395508,255320.95971679688,255309.56104736327,255300.08240966796,255297.55477294922,255352.31213378906,255347.52420654296])
        expected['latSH'] = np.array([54.8516826065743,55.0391166577778,55.22748302980299,55.41103753355791,55.59383730140955,55.77942378644255,55.95965540316626,56.14254396347711,56.3177929572013,56.494264554786916])
        expected['lonSH'] = np.array([241.06387694372964,240.85203179643253,240.63338378072206,240.578824229632,240.35782662884708,240.13308608439698,239.9133452384193,239.8491414602212,239.6267231800889,239.3972015032198])
        expected['rhoSH'] = np.array([255315.8315307617,255284.13885498047,255315.51557617186,255285.40267333985,255324.79978027343,255353.60025634765,255325.18864746092,255357.6833618164,255336.19844970704,255377.22393798828])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_30N_270_120000(self):
        """Test for latitude = 30, longitude = 270, rho = 120000"""
        lat = 30
        lon = 270
        rho = 120000

        expected = {}
        expected['latNH'] = np.array([-67.95222267004687,-38.7134122672729,-39.055795989987274,-39.406239335922294,-68.2494998234825,-68.29795318545459,-68.34549130207787,-68.48068806650909,-68.52440127719717,-41.154330631338695])
        expected['lonNH'] = np.array([342.67283096158747,286.82190966552963,286.6919721467593,286.52635371976487,341.5882242421461,341.2779970500442,340.9663218578381,340.74444999283946,340.43127215901603,285.6163812770224])
        expected['rhoNH'] = np.array([238047.941027832,110310.16166381836,110660.37302246093,110866.29035034179,235665.4489868164,235056.67740478515,234439.0833984375,233798.3760986328,233168.62999267576,112571.43651123047])
        expected['latSH'] = np.array([57.30222470718065,57.41314356420707,57.523632119315785,57.63502567448952,57.74108485192148,57.85643991681382,57.96854381166124,58.08186348018093,58.19243741265426,58.30262885453408])
        expected['lonSH'] = np.array([243.02501549973707,242.84849609082724,242.67159419132392,242.64197849108274,242.4699123655118,242.28016971036882,242.09662886699223,242.06332486459925,241.87770764371498,241.6915713284538])
        expected['rhoSH'] = np.array([256090.4306640625,256108.75603027342,256124.99123535157,256114.46751708983,256067.19584960936,256129.4632080078,256129.00142822266,256105.0617919922,256100.97868652342,256094.708203125])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_60N_270_120000(self):
        """Test for latitude = 60, longitude = 270, rho = 120000"""
        lat = 60
        lon = 270
        rho = 120000

        expected = {}
        expected['latNH'] = np.array([72.72524093800737,72.77269538481332,72.81998078443732,72.83237928532819,72.87904143019043,72.92713791477836,72.97502266350203,72.98726065494739,73.03461947910498,73.08174949192535])
        expected['lonNH'] = np.array([233.92572820441936,233.71524909495622,233.50345858917248,233.22740966367724,233.0139799124927,232.79213536825065,232.56881550314793,232.28047223714668,232.05545848512978,231.82891477073878])
        expected['rhoNH'] = np.array([6371.2,6371.2,6371.1984809875485,6371.199620246887,6371.199240493775,6371.199620246887,6371.199620246887,6371.199240493775,6371.199240493775,6371.199620246887])
        expected['latSH'] = np.array([69.1037380362832,69.1311646608954,69.15887303081084,69.19270808041179,69.22126339378433,69.250969594032,69.27831596392144,69.31808132526925,69.34905964824985,69.37807941448594])
        expected['lonSH'] = np.array([268.80225871039187,269.223654061425,269.62964050569053,268.49839725459634,268.9221968322173,269.34096939060913,269.7632936473694,268.6268048109926,269.0445665013873,269.4654427580435])
        expected['rhoSH'] = np.array([272536.69340820314,272838.7946044922,273187.72999267577,272299.50872802734,272618.01525878906,272947.774633789,273244.50460205076,272388.5107055664,272739.3904296875,273070.4136230469])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
# --------------------------------------------------------------------------------------------------

    def test_vs_2010_90N_270_120000(self):
        """Test for latitude = 90, longitude = 270, rho = 120000"""
        lat = 90
        lon = 270
        rho = 120000

        expected = {}
        expected['latNH'] = np.array([79.25470712414821,79.27798611638691,79.30072125481294,79.28855156525927,79.31061393005206,79.33341907791709,79.35545326817955,79.34279095123199,79.36410626408431,79.38475734103984])
        expected['lonNH'] = np.array([213.57057602486577,213.20455984762313,212.83700004762807,212.50938319389923,212.14161848822906,211.75661438509377,211.36958854596418,211.02720482324978,210.63993309731006,210.25109042786121])
        expected['rhoNH'] = np.array([6371.199620246887,6371.199620246887,6371.199240493775,6371.2,6371.199240493775,6371.199240493775,6371.2,6371.199620246887,6371.199620246887,6371.2])
        expected['latSH'] = np.array([73.52093236310446,73.44684871627192,73.37421477709071,73.66171109963489,73.58151443349519,73.50886683393564,73.43907083835457,73.7358732936429,73.65882022206868,73.58863319815764])
        expected['lonSH'] = np.array([351.32061543201064,351.40662117403946,351.4901680479671,351.3320901498163,351.4276854774398,351.5164506158933,351.60114496160145,351.44112728972635,351.5373783155102,351.6237938688892])
        expected['rhoSH'] = np.array([329081.0691040039,329560.44512939453,330019.04106445314,328352.234777832,328805.41087646486,329268.9162597656,329714.7281860351,328038.1273071289,328484.3281005859,328935.0980834961])

        years = np.arange(2006,2016)
        dates = np.array([dt.datetime(i,1,1) for i in years])

        trace = tsygTrace(lat = np.ones_like(dates, dtype = float) * lat,
                          lon = np.ones_like(dates, dtype = float) * lon,
                          rho = np.ones_like(dates, dtype = float) * rho,
                          coords = 'geo', datetime = dates)

        for cnt, year in enumerate(years):
            for coord in expected:
                with self.subTest(coord = coord, year = year):
<<<<<<< Updated upstream
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.01)

# --------------------------------------------------------------------------------------------------
=======
                    np.testing.assert_allclose(getattr(trace, coord)[cnt], expected[coord][cnt], rtol = 0.05, atol = 0.1)
>>>>>>> Stashed changes

# --------------------------------------------------------------------------------------------------
